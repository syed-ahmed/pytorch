// required for old g++ to compile PRId64 macros, see
// https://github.com/pytorch/pytorch/issues/3571
// for context
#define __STDC_FORMAT_MACROS

#include <ATen/SparseCPUBoolType.h>

// @generated by aten/src/ATen/gen.py

#include <ATen/CPUGenerator.h>
#include <c10/core/Allocator.h>
#include <ATen/DeviceGuard.h>
#include <ATen/NativeFunctions.h>
#include <ATen/Utils.h>
#include <ATen/WrapDimUtils.h>
#include <c10/util/Half.h>
#include <c10/core/UndefinedTensorImpl.h>
#include <c10/util/Optional.h>

#include <cstddef>
#include <functional>
#include <memory>
#include <utility>

#include <ATen/Config.h>


namespace at {

SparseCPUBoolType::SparseCPUBoolType()
  : CPUTypeDefault(SparseCPUTensorId(), /*is_variable=*/false, /*is_undefined=*/false) {}
ScalarType SparseCPUBoolType::scalarType() const {
  return ScalarType::Bool;
}
caffe2::TypeMeta SparseCPUBoolType::typeMeta() const {
  return caffe2::TypeMeta::Make<uint8_t>();
}
Backend SparseCPUBoolType::backend() const {
  return Backend::SparseCPU;
}

const char * SparseCPUBoolType::toString() const {
  return "SparseCPUBoolType";
}

TypeID SparseCPUBoolType::ID() const {
  return TypeID::SparseCPUBool;
}

size_t SparseCPUBoolType::elementSizeInBytes() const {
  return sizeof(uint8_t);
}



}
