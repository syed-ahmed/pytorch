// required for old g++ to compile PRId64 macros, see
// https://github.com/pytorch/pytorch/issues/3571
// for context
#define __STDC_FORMAT_MACROS

#include <ATen/CUDAFloatType.h>

// @generated by aten/src/ATen/gen.py

#include <THC/THC.h>
#include <THC/THCTensor.hpp>
#include <THCUNN/THCUNN.h>
#undef THNN_
#undef THCIndexTensor_
#include <c10/core/TensorImpl.h>
#include <ATen/CUDAGenerator.h>
#include <c10/core/Allocator.h>
#include <ATen/DeviceGuard.h>
#include <ATen/NativeFunctions.h>
#include <ATen/Utils.h>
#include <ATen/WrapDimUtils.h>
#include <c10/util/Half.h>
#include <c10/core/TensorImpl.h>
#include <c10/core/UndefinedTensorImpl.h>
#include <c10/util/Optional.h>

#include <cstddef>
#include <functional>
#include <memory>
#include <utility>

#include <ATen/Config.h>
#include <ATen/DeviceGuard.h>
#include <ATen/cuda/ATenCUDAGeneral.h>
#include <ATen/cuda/CUDADevice.h>
#include <ATen/cuda/CUDATypeDefault.h>

namespace at {

CUDAFloatType::CUDAFloatType()
  : CUDATypeDefault(CUDATensorId(), /*is_variable=*/false, /*is_undefined=*/false) {}

ScalarType CUDAFloatType::scalarType() const {
  return ScalarType::Float;
}

caffe2::TypeMeta CUDAFloatType::typeMeta() const {
    return caffe2::TypeMeta::Make<float>();
}

Backend CUDAFloatType::backend() const {
  return Backend::CUDA;
}

const char * CUDAFloatType::toString() const {
  return "CUDAFloatType";
}

TypeID CUDAFloatType::ID() const {
  return TypeID::CUDAFloat;
}

size_t CUDAFloatType::elementSizeInBytes() const {
  return sizeof(float);
}

/* example
Tensor * CUDAFloatType::add(Tensor & a, Tensor & b) {
  std::cout << "add CUDAFloatTensor\n";
  return &a;
}
*/

Tensor & CUDAFloatType::_th_set_(Tensor & self, Storage source) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto source_ = checked_storage(source,"source",2, DeviceType::CUDA, at::scalarTypeToDataType(ScalarType::Float));
    THCudaTensor_setStorage(globalContext().getTHCState(), self_, source_.unsafeGetStorageImpl(), 0, {static_cast<int64_t>(source.size())}, {});
    self_->maybe_zero_dim(false);
    return self;
}
Tensor & CUDAFloatType::_th_set_(Tensor & self, Storage source, int64_t storage_offset, IntArrayRef size, IntArrayRef stride) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto source_ = checked_storage(source,"source",2, DeviceType::CUDA, at::scalarTypeToDataType(ScalarType::Float));
    THCudaTensor_setStorage(globalContext().getTHCState(), self_, source_.unsafeGetStorageImpl(), storage_offset, size, stride);
    self_->maybe_zero_dim(size.size() == 0);
    return self;
}
Tensor & CUDAFloatType::_th_set_(Tensor & self, const Tensor & source) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto source_ = checked_tensor_unwrap(source,"source",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_set(globalContext().getTHCState(), self_, source_);
    self_->maybe_zero_dim(source_->dim() == 0);
    return self;
}
Tensor & CUDAFloatType::_th_set_(Tensor & self) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_setStorage(globalContext().getTHCState(), self_, NULL, 0, {0}, {});
    self_->maybe_zero_dim(false);
    return self;
}
Tensor & CUDAFloatType::_th_fill_(Tensor & self, Scalar value) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto value_ = value.toFloat();
    THCudaTensor_fill(globalContext().getTHCState(), self_, value_);
    return self;
}
Tensor & CUDAFloatType::_th_fill_(Tensor & self, const Tensor & value) const {
    // DeviceGuard omitted
    if (value.dim() == 0) {
        return static_cast<const TypeExtendedInterface*>(this)->_th_fill_(self, value.item());
    }
    AT_ERROR("_th_fill_ only supports a 0-dimensional value tensor, but got tensor "
        "with ", value.dim(), " dimension(s).");
}
bool CUDAFloatType::_th_is_set_to(const Tensor & self, const Tensor & tensor) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto tensor_ = checked_tensor_unwrap(tensor,"tensor",2, false, Backend::CUDA, ScalarType::Float);
    return THCudaTensor_isSetTo(globalContext().getTHCState(), self_, tensor_);
}
Tensor & CUDAFloatType::s__th_masked_fill_(Tensor & self, const Tensor & mask, Scalar value) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CUDA, ScalarType::Byte);
    auto value_ = value.toFloat();
    THCudaTensor_maskedFill(globalContext().getTHCState(), self_, mask_, value_);
    return self;
}
Tensor & CUDAFloatType::s__th_masked_fill_(Tensor & self, const Tensor & mask, const Tensor & value) const {
    // DeviceGuard omitted
    if (value.dim() == 0) {
        return static_cast<const TypeExtendedInterface*>(this)->_th_masked_fill_(self, mask, value.item());
    }
    AT_ERROR("_th_masked_fill_ only supports a 0-dimensional value tensor, but got tensor "
        "with ", value.dim(), " dimension(s).");
}
Tensor & CUDAFloatType::s__th_masked_scatter_(Tensor & self, const Tensor & mask, const Tensor & source) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CUDA, ScalarType::Byte);
    auto source_ = checked_tensor_unwrap(source,"source",3, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_maskedCopy(globalContext().getTHCState(), self_, mask_, source_);
    return self;
}
Tensor & CUDAFloatType::s__th_masked_select_out(Tensor & result, const Tensor & self, const Tensor & mask) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CUDA, ScalarType::Byte);
    THCudaTensor_maskedSelect(globalContext().getTHCState(), result_, self_, mask_);
    result_->maybe_zero_dim(self_->dim() == 0 && mask_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::s__th_masked_select(const Tensor & self, const Tensor & mask) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CUDA, ScalarType::Byte);
    THCudaTensor_maskedSelect(globalContext().getTHCState(), result_, self_, mask_);
    result_->maybe_zero_dim(self_->dim() == 0 && mask_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_nonzero_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Long);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_nonzero(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_nonzero(const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), scalarTypeToTypeMeta(ScalarType::Long), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_nonzero(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_clone(const Tensor & self) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    return Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim((THCudaTensor_newClone(globalContext().getTHCState(), self_))->maybe_zero_dim(self_->dim() == 0)));
}
Tensor CUDAFloatType::_th_view(const Tensor & self, IntArrayRef size) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    return Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim((THCudaTensor_newView(globalContext().getTHCState(), self_, size))->maybe_zero_dim(size.size() == 0)));
}
Tensor & CUDAFloatType::_th_resize_as_(Tensor & self, const Tensor & the_template) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto the_template_ = checked_tensor_unwrap(the_template,"the_template",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_resizeAs(globalContext().getTHCState(), self_, the_template_);
    self_->maybe_zero_dim(the_template_->dim() == 0);
    return self;
}
Tensor & CUDAFloatType::_th_index_select_out(Tensor & result, const Tensor & self, int64_t dim, const Tensor & index) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    dim = maybe_wrap_dim(dim, self_);
    auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CUDA, ScalarType::Long);
    THCudaTensor_indexSelect(globalContext().getTHCState(), result_, self_, dim, index_);
    result_->maybe_zero_dim(self_->dim() == 0 && index_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_index_select(const Tensor & self, int64_t dim, const Tensor & index) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    dim = maybe_wrap_dim(dim, self_);
    auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CUDA, ScalarType::Long);
    THCudaTensor_indexSelect(globalContext().getTHCState(), result_, self_, dim, index_);
    result_->maybe_zero_dim(self_->dim() == 0 && index_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_index_copy_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    dim = maybe_wrap_dim(dim, self_);
    auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CUDA, ScalarType::Long);
    auto source_ = checked_tensor_unwrap(source,"source",4, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_indexCopy(globalContext().getTHCState(), self_, dim, index_, source_);
    return self;
}
Tensor & CUDAFloatType::_th_take_out(Tensor & result, const Tensor & self, const Tensor & index) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto index_ = checked_tensor_unwrap(index,"index",2, false, Backend::CUDA, ScalarType::Long);
    THCudaTensor_take(globalContext().getTHCState(), result_, self_, index_);
    result_->maybe_zero_dim(index_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_take(const Tensor & self, const Tensor & index) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto index_ = checked_tensor_unwrap(index,"index",2, false, Backend::CUDA, ScalarType::Long);
    THCudaTensor_take(globalContext().getTHCState(), result_, self_, index_);
    result_->maybe_zero_dim(index_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_put_(Tensor & self, const Tensor & index, const Tensor & source, bool accumulate) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto index_ = checked_tensor_unwrap(index,"index",2, false, Backend::CUDA, ScalarType::Long);
    auto source_ = checked_tensor_unwrap(source,"source",3, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_put(globalContext().getTHCState(), self_, index_, source_, accumulate);
    return self;
}
Tensor & CUDAFloatType::_th_index_add_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    dim = maybe_wrap_dim(dim, self_);
    auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CUDA, ScalarType::Long);
    auto source_ = checked_tensor_unwrap(source,"source",4, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_indexAdd(globalContext().getTHCState(), self_, dim, index_, source_);
    return self;
}
Tensor & CUDAFloatType::_th_index_fill_(Tensor & self, int64_t dim, const Tensor & index, Scalar value) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    dim = maybe_wrap_dim(dim, self_);
    auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CUDA, ScalarType::Long);
    auto value_ = value.toFloat();
    THCudaTensor_indexFill(globalContext().getTHCState(), self_, dim, index_, value_);
    return self;
}
Tensor & CUDAFloatType::_th_index_fill_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & value) const {
    // DeviceGuard omitted
    if (value.dim() == 0) {
        return static_cast<const TypeExtendedInterface*>(this)->_th_index_fill_(self, dim, index, value.item());
    }
    AT_ERROR("_th_index_fill_ only supports a 0-dimensional value tensor, but got tensor "
        "with ", value.dim(), " dimension(s).");
}
Tensor & CUDAFloatType::_th_unfold_out(Tensor & result, const Tensor & self, int64_t dimension, int64_t size, int64_t step) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    dimension = maybe_wrap_dim(dimension, self_);
    THCudaTensor_unfold(globalContext().getTHCState(), result_, self_, dimension, size, step);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_unfold(const Tensor & self, int64_t dimension, int64_t size, int64_t step) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    dimension = maybe_wrap_dim(dimension, self_);
    THCudaTensor_unfold(globalContext().getTHCState(), result_, self_, dimension, size, step);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_scatter_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) const {
    // DeviceGuard omitted
    if (src.dim() == 0) {
        return static_cast<const TypeExtendedInterface*>(this)->_th_scatter_(self, dim, index, src.item());
    }
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    dim = maybe_wrap_dim(dim, self_);
    auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CUDA, ScalarType::Long);
    auto src_ = checked_tensor_unwrap(src,"src",4, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_scatter(globalContext().getTHCState(), self_, dim, index_, src_);
    return self;
}
Tensor & CUDAFloatType::_th_scatter_(Tensor & self, int64_t dim, const Tensor & index, Scalar value) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    dim = maybe_wrap_dim(dim, self_);
    auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CUDA, ScalarType::Long);
    auto value_ = value.toFloat();
    THCudaTensor_scatterFill(globalContext().getTHCState(), self_, dim, index_, value_);
    return self;
}
Tensor & CUDAFloatType::_th_scatter_add_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    dim = maybe_wrap_dim(dim, self_);
    auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CUDA, ScalarType::Long);
    auto src_ = checked_tensor_unwrap(src,"src",4, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_scatterAdd(globalContext().getTHCState(), self_, dim, index_, src_);
    return self;
}
Tensor & CUDAFloatType::_th_gather_out(Tensor & result, const Tensor & self, int64_t dim, const Tensor & index) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    result.resize_(index.sizes());
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    dim = maybe_wrap_dim(dim, self_);
    auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CUDA, ScalarType::Long);
    THCudaTensor_gather(globalContext().getTHCState(), result_, self_, dim, index_);
    result_->maybe_zero_dim(self_->dim() == 0 && index_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_gather(const Tensor & self, int64_t dim, const Tensor & index) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    result.resize_(index.sizes());
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    dim = maybe_wrap_dim(dim, self_);
    auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CUDA, ScalarType::Long);
    THCudaTensor_gather(globalContext().getTHCState(), result_, self_, dim, index_);
    result_->maybe_zero_dim(self_->dim() == 0 && index_->dim() == 0);
    return result;
}
bool CUDAFloatType::_th_equal(const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CUDA, ScalarType::Float);
    return THCudaTensor_equal(globalContext().getTHCState(), self_, other_);
}
Tensor & CUDAFloatType::_th_and_out(Tensor & result, const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = other.toFloat();
    THCudaTensor_bitand(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_and(const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = other.toFloat();
    THCudaTensor_bitand(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::s__th_and_out(Tensor & result, const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_cbitand(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::s__th_and(const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_cbitand(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_iand_(Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = other.toFloat();
    THCudaTensor_bitand(globalContext().getTHCState(), self_, self_, other_);
    return self;
}
Tensor & CUDAFloatType::s__th_iand_(Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_cbitand(globalContext().getTHCState(), self_, self_, other_);
    return self;
}
Tensor & CUDAFloatType::_th_or_out(Tensor & result, const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = other.toFloat();
    THCudaTensor_bitor(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_or(const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = other.toFloat();
    THCudaTensor_bitor(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::s__th_or_out(Tensor & result, const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_cbitor(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::s__th_or(const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_cbitor(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_ior_(Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = other.toFloat();
    THCudaTensor_bitor(globalContext().getTHCState(), self_, self_, other_);
    return self;
}
Tensor & CUDAFloatType::s__th_ior_(Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_cbitor(globalContext().getTHCState(), self_, self_, other_);
    return self;
}
Tensor & CUDAFloatType::_th_xor_out(Tensor & result, const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = other.toFloat();
    THCudaTensor_bitxor(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_xor(const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = other.toFloat();
    THCudaTensor_bitxor(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::s__th_xor_out(Tensor & result, const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_cbitxor(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::s__th_xor(const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_cbitxor(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_ixor_(Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = other.toFloat();
    THCudaTensor_bitxor(globalContext().getTHCState(), self_, self_, other_);
    return self;
}
Tensor & CUDAFloatType::s__th_ixor_(Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_cbitxor(globalContext().getTHCState(), self_, self_, other_);
    return self;
}
Tensor & CUDAFloatType::_th_lshift_out(Tensor & result, const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = other.toFloat();
    THCudaTensor_lshift(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_lshift(const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = other.toFloat();
    THCudaTensor_lshift(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::s__th_lshift_out(Tensor & result, const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_clshift(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::s__th_lshift(const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_clshift(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_ilshift_(Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = other.toFloat();
    THCudaTensor_lshift(globalContext().getTHCState(), self_, self_, other_);
    return self;
}
Tensor & CUDAFloatType::s__th_ilshift_(Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_clshift(globalContext().getTHCState(), self_, self_, other_);
    return self;
}
Tensor & CUDAFloatType::_th_rshift_out(Tensor & result, const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = other.toFloat();
    THCudaTensor_rshift(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_rshift(const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = other.toFloat();
    THCudaTensor_rshift(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::s__th_rshift_out(Tensor & result, const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_crshift(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::s__th_rshift(const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_crshift(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_irshift_(Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = other.toFloat();
    THCudaTensor_rshift(globalContext().getTHCState(), self_, self_, other_);
    return self;
}
Tensor & CUDAFloatType::s__th_irshift_(Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_crshift(globalContext().getTHCState(), self_, self_, other_);
    return self;
}
Tensor & CUDAFloatType::_th_lt_out(Tensor & result, const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Byte);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = other.toFloat();
    THCudaTensor_ltValue(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_lt(const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), scalarTypeToTypeMeta(ScalarType::Byte), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = other.toFloat();
    THCudaTensor_ltValue(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::s__th_lt_out(Tensor & result, const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Byte);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_ltTensor(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::s__th_lt(const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), scalarTypeToTypeMeta(ScalarType::Byte), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_ltTensor(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_lt_(Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = other.toFloat();
    THCudaTensor_ltValueT(globalContext().getTHCState(), self_, self_, other_);
    return self;
}
Tensor & CUDAFloatType::s__th_lt_(Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_ltTensorT(globalContext().getTHCState(), self_, self_, other_);
    return self;
}
Tensor & CUDAFloatType::_th_gt_out(Tensor & result, const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Byte);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = other.toFloat();
    THCudaTensor_gtValue(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_gt(const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), scalarTypeToTypeMeta(ScalarType::Byte), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = other.toFloat();
    THCudaTensor_gtValue(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::s__th_gt_out(Tensor & result, const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Byte);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_gtTensor(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::s__th_gt(const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), scalarTypeToTypeMeta(ScalarType::Byte), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_gtTensor(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_gt_(Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = other.toFloat();
    THCudaTensor_gtValueT(globalContext().getTHCState(), self_, self_, other_);
    return self;
}
Tensor & CUDAFloatType::s__th_gt_(Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_gtTensorT(globalContext().getTHCState(), self_, self_, other_);
    return self;
}
Tensor & CUDAFloatType::_th_le_out(Tensor & result, const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Byte);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = other.toFloat();
    THCudaTensor_leValue(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_le(const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), scalarTypeToTypeMeta(ScalarType::Byte), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = other.toFloat();
    THCudaTensor_leValue(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::s__th_le_out(Tensor & result, const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Byte);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_leTensor(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::s__th_le(const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), scalarTypeToTypeMeta(ScalarType::Byte), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_leTensor(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_le_(Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = other.toFloat();
    THCudaTensor_leValueT(globalContext().getTHCState(), self_, self_, other_);
    return self;
}
Tensor & CUDAFloatType::s__th_le_(Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_leTensorT(globalContext().getTHCState(), self_, self_, other_);
    return self;
}
Tensor & CUDAFloatType::_th_ge_out(Tensor & result, const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Byte);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = other.toFloat();
    THCudaTensor_geValue(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_ge(const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), scalarTypeToTypeMeta(ScalarType::Byte), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = other.toFloat();
    THCudaTensor_geValue(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::s__th_ge_out(Tensor & result, const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Byte);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_geTensor(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::s__th_ge(const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), scalarTypeToTypeMeta(ScalarType::Byte), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_geTensor(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_ge_(Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = other.toFloat();
    THCudaTensor_geValueT(globalContext().getTHCState(), self_, self_, other_);
    return self;
}
Tensor & CUDAFloatType::s__th_ge_(Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_geTensorT(globalContext().getTHCState(), self_, self_, other_);
    return self;
}
Tensor & CUDAFloatType::_th_eq_out(Tensor & result, const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Byte);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = other.toFloat();
    THCudaTensor_eqValue(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_eq(const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), scalarTypeToTypeMeta(ScalarType::Byte), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = other.toFloat();
    THCudaTensor_eqValue(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::s__th_eq_out(Tensor & result, const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Byte);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_eqTensor(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::s__th_eq(const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), scalarTypeToTypeMeta(ScalarType::Byte), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_eqTensor(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_eq_(Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = other.toFloat();
    THCudaTensor_eqValueT(globalContext().getTHCState(), self_, self_, other_);
    return self;
}
Tensor & CUDAFloatType::s__th_eq_(Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_eqTensorT(globalContext().getTHCState(), self_, self_, other_);
    return self;
}
Tensor & CUDAFloatType::_th_ne_out(Tensor & result, const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Byte);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = other.toFloat();
    THCudaTensor_neValue(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_ne(const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), scalarTypeToTypeMeta(ScalarType::Byte), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = other.toFloat();
    THCudaTensor_neValue(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::s__th_ne_out(Tensor & result, const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Byte);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_neTensor(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::s__th_ne(const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), scalarTypeToTypeMeta(ScalarType::Byte), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_neTensor(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_ne_(Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = other.toFloat();
    THCudaTensor_neValueT(globalContext().getTHCState(), self_, self_, other_);
    return self;
}
Tensor & CUDAFloatType::s__th_ne_(Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_neTensorT(globalContext().getTHCState(), self_, self_, other_);
    return self;
}
Tensor & CUDAFloatType::s__th_min_out(Tensor & result, const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_cmin(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::s__th_min(const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_cmin(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_min(const Tensor & self) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    return at::scalar_tensor(convert<float>(THCudaTensor_minall(globalContext().getTHCState(), self_)), options());
}
std::tuple<Tensor &,Tensor &> CUDAFloatType::_th_min_out(Tensor & min, Tensor & min_indices, const Tensor & self, int64_t dim, bool keepdim) const {
    // DeviceGuard omitted
    auto min_ = checked_tensor_unwrap(min,"min",0, false, Backend::CUDA, ScalarType::Float);
    auto min_indices_ = checked_tensor_unwrap(min_indices,"min_indices",0, false, Backend::CUDA, ScalarType::Long);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    dim = maybe_wrap_dim(dim, self_);
    THCudaTensor_min(globalContext().getTHCState(), min_, min_indices_, self_, dim, keepdim);
    bool maybe_scalar = self_->dim() == 0 || (keepdim == false && self_->dim() == 1);
    min_->maybe_zero_dim(maybe_scalar);
    min_indices_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor &, Tensor &>(min, min_indices);
}
std::tuple<Tensor,Tensor> CUDAFloatType::_th_min(const Tensor & self, int64_t dim, bool keepdim) const {
    // DeviceGuard omitted
    auto min_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto min = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(min_));
    auto min_indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), scalarTypeToTypeMeta(ScalarType::Long), allocator(), false).release();
    auto min_indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(min_indices_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    dim = maybe_wrap_dim(dim, self_);
    THCudaTensor_min(globalContext().getTHCState(), min_, min_indices_, self_, dim, keepdim);
    bool maybe_scalar = self_->dim() == 0 || (keepdim == false && self_->dim() == 1);
    min_->maybe_zero_dim(maybe_scalar);
    min_indices_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor, Tensor>(min, min_indices);
}
Tensor & CUDAFloatType::s__th_max_out(Tensor & result, const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_cmax(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::s__th_max(const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_cmax(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_max(const Tensor & self) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    return at::scalar_tensor(convert<float>(THCudaTensor_maxall(globalContext().getTHCState(), self_)), options());
}
std::tuple<Tensor &,Tensor &> CUDAFloatType::_th_max_out(Tensor & max, Tensor & max_indices, const Tensor & self, int64_t dim, bool keepdim) const {
    // DeviceGuard omitted
    auto max_ = checked_tensor_unwrap(max,"max",0, false, Backend::CUDA, ScalarType::Float);
    auto max_indices_ = checked_tensor_unwrap(max_indices,"max_indices",0, false, Backend::CUDA, ScalarType::Long);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    dim = maybe_wrap_dim(dim, self_);
    THCudaTensor_max(globalContext().getTHCState(), max_, max_indices_, self_, dim, keepdim);
    bool maybe_scalar = self_->dim() == 0 || (keepdim == false && self_->dim() == 1);
    max_->maybe_zero_dim(maybe_scalar);
    max_indices_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor &, Tensor &>(max, max_indices);
}
std::tuple<Tensor,Tensor> CUDAFloatType::_th_max(const Tensor & self, int64_t dim, bool keepdim) const {
    // DeviceGuard omitted
    auto max_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto max = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(max_));
    auto max_indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), scalarTypeToTypeMeta(ScalarType::Long), allocator(), false).release();
    auto max_indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(max_indices_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    dim = maybe_wrap_dim(dim, self_);
    THCudaTensor_max(globalContext().getTHCState(), max_, max_indices_, self_, dim, keepdim);
    bool maybe_scalar = self_->dim() == 0 || (keepdim == false && self_->dim() == 1);
    max_->maybe_zero_dim(maybe_scalar);
    max_indices_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor, Tensor>(max, max_indices);
}
std::tuple<Tensor &,Tensor &> CUDAFloatType::_th_mode_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim) const {
    // DeviceGuard omitted
    auto values_ = checked_tensor_unwrap(values,"values",0, false, Backend::CUDA, ScalarType::Float);
    auto indices_ = checked_tensor_unwrap(indices,"indices",0, false, Backend::CUDA, ScalarType::Long);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    dim = maybe_wrap_dim(dim, self_);
    THCudaTensor_mode(globalContext().getTHCState(), values_, indices_, self_, dim, keepdim);
    bool maybe_scalar = self_->dim() == 0|| (keepdim == false && self_->dim() == 1);
    values_->maybe_zero_dim(maybe_scalar);
    indices_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor &, Tensor &>(values, indices);
}
std::tuple<Tensor,Tensor> CUDAFloatType::_th_mode(const Tensor & self, int64_t dim, bool keepdim) const {
    // DeviceGuard omitted
    auto values_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto values = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(values_));
    auto indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), scalarTypeToTypeMeta(ScalarType::Long), allocator(), false).release();
    auto indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(indices_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    dim = maybe_wrap_dim(dim, self_);
    THCudaTensor_mode(globalContext().getTHCState(), values_, indices_, self_, dim, keepdim);
    bool maybe_scalar = self_->dim() == 0|| (keepdim == false && self_->dim() == 1);
    values_->maybe_zero_dim(maybe_scalar);
    indices_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor, Tensor>(values, indices);
}
Tensor CUDAFloatType::_th_median(const Tensor & self) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    return at::scalar_tensor(convert<float>(THCudaTensor_medianall(globalContext().getTHCState(), self_)), options());
}
std::tuple<Tensor &,Tensor &> CUDAFloatType::_th_median_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim) const {
    // DeviceGuard omitted
    auto values_ = checked_tensor_unwrap(values,"values",0, false, Backend::CUDA, ScalarType::Float);
    auto indices_ = checked_tensor_unwrap(indices,"indices",0, false, Backend::CUDA, ScalarType::Long);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    dim = maybe_wrap_dim(dim, self_);
    THCudaTensor_median(globalContext().getTHCState(), values_, indices_, self_, dim, keepdim);
    bool maybe_scalar = self_->dim() == 0 || (keepdim == false && self_->dim() == 1);
    values_->maybe_zero_dim(maybe_scalar);
    indices_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor &, Tensor &>(values, indices);
}
std::tuple<Tensor,Tensor> CUDAFloatType::_th_median(const Tensor & self, int64_t dim, bool keepdim) const {
    // DeviceGuard omitted
    auto values_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto values = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(values_));
    auto indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), scalarTypeToTypeMeta(ScalarType::Long), allocator(), false).release();
    auto indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(indices_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    dim = maybe_wrap_dim(dim, self_);
    THCudaTensor_median(globalContext().getTHCState(), values_, indices_, self_, dim, keepdim);
    bool maybe_scalar = self_->dim() == 0 || (keepdim == false && self_->dim() == 1);
    values_->maybe_zero_dim(maybe_scalar);
    indices_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor, Tensor>(values, indices);
}
std::tuple<Tensor &,Tensor &> CUDAFloatType::_th_sort_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool descending) const {
    // DeviceGuard omitted
    auto values_ = checked_tensor_unwrap(values,"values",0, false, Backend::CUDA, ScalarType::Float);
    auto indices_ = checked_tensor_unwrap(indices,"indices",0, false, Backend::CUDA, ScalarType::Long);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    dim = maybe_wrap_dim(dim, self_);
    THCudaTensor_sort(globalContext().getTHCState(), values_, indices_, self_, dim, descending);
    bool maybe_scalar = self_->dim() == 0;
    values_->maybe_zero_dim(maybe_scalar);
    indices_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor &, Tensor &>(values, indices);
}
std::tuple<Tensor,Tensor> CUDAFloatType::_th_sort(const Tensor & self, int64_t dim, bool descending) const {
    // DeviceGuard omitted
    auto values_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto values = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(values_));
    auto indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), scalarTypeToTypeMeta(ScalarType::Long), allocator(), false).release();
    auto indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(indices_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    dim = maybe_wrap_dim(dim, self_);
    THCudaTensor_sort(globalContext().getTHCState(), values_, indices_, self_, dim, descending);
    bool maybe_scalar = self_->dim() == 0;
    values_->maybe_zero_dim(maybe_scalar);
    indices_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor, Tensor>(values, indices);
}
std::tuple<Tensor &,Tensor &> CUDAFloatType::_th_topk_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) const {
    // DeviceGuard omitted
    auto values_ = checked_tensor_unwrap(values,"values",0, false, Backend::CUDA, ScalarType::Float);
    auto indices_ = checked_tensor_unwrap(indices,"indices",0, false, Backend::CUDA, ScalarType::Long);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    dim = maybe_wrap_dim(dim, self_);
    THCudaTensor_topk(globalContext().getTHCState(), values_, indices_, self_, k, dim, largest, sorted);
    bool maybe_scalar = self_->dim() == 0;
    values_->maybe_zero_dim(maybe_scalar);
    indices_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor &, Tensor &>(values, indices);
}
std::tuple<Tensor,Tensor> CUDAFloatType::_th_topk(const Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) const {
    // DeviceGuard omitted
    auto values_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto values = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(values_));
    auto indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), scalarTypeToTypeMeta(ScalarType::Long), allocator(), false).release();
    auto indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(indices_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    dim = maybe_wrap_dim(dim, self_);
    THCudaTensor_topk(globalContext().getTHCState(), values_, indices_, self_, k, dim, largest, sorted);
    bool maybe_scalar = self_->dim() == 0;
    values_->maybe_zero_dim(maybe_scalar);
    indices_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor, Tensor>(values, indices);
}
Tensor & CUDAFloatType::_th_abs_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_abs(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_abs(const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_abs(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_sigmoid_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_sigmoid(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_sigmoid(const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_sigmoid(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_log_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_log(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_log(const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_log(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_log10_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_log10(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_log10(const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_log10(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_log1p_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_log1p(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_log1p(const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_log1p(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_log2_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_log2(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_log2(const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_log2(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_lgamma_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_lgamma(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_lgamma(const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_lgamma(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_lgamma_(Tensor & self) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_lgamma(globalContext().getTHCState(), self_, self_);
    return self;
}
Tensor & CUDAFloatType::_th_digamma_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_digamma(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_digamma(const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_digamma(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_digamma_(Tensor & self) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_digamma(globalContext().getTHCState(), self_, self_);
    return self;
}
Tensor & CUDAFloatType::_th_polygamma_out(Tensor & result, int64_t n, const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_polygamma(globalContext().getTHCState(), result_, n, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_polygamma(int64_t n, const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_polygamma(globalContext().getTHCState(), result_, n, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_polygamma_(Tensor & self, int64_t n) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_polygamma(globalContext().getTHCState(), self_, n, self_);
    return self;
}
Tensor & CUDAFloatType::_th_exp_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_exp(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_exp(const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_exp(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_expm1_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_expm1(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_expm1(const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_expm1(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_cos_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_cos(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_cos(const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_cos(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_acos_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_acos(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_acos(const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_acos(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_cosh_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_cosh(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_cosh(const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_cosh(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_sin_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_sin(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_sin(const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_sin(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_asin_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_asin(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_asin(const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_asin(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_sinh_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_sinh(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_sinh(const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_sinh(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_tan_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_tan(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_tan(const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_tan(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_atan_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_atan(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_atan(const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_atan(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_tanh_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_tanh(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_tanh(const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_tanh(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_erf_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_erf(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_erf(const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_erf(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_erfc_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_erfc(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_erfc(const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_erfc(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_erfinv_(Tensor & self) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_erfinv(globalContext().getTHCState(), self_, self_);
    return self;
}
Tensor & CUDAFloatType::_th_erfinv_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_erfinv(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_erfinv(const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_erfinv(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_sqrt_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_sqrt(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_sqrt(const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_sqrt(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_rsqrt_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_rsqrt(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_rsqrt(const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_rsqrt(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_ceil_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_ceil(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_ceil(const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_ceil(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_floor_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_floor(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_floor(const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_floor(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_round_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_round(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_round(const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_round(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_trunc_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_trunc(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_trunc(const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_trunc(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_frac_(Tensor & self) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_frac(globalContext().getTHCState(), self_, self_);
    return self;
}
Tensor & CUDAFloatType::_th_frac_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_frac(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_frac(const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_frac(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_var_out(Tensor & result, const Tensor & self, int64_t dim, bool unbiased, bool keepdim) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    dim = maybe_wrap_dim(dim, self_);
    THCudaTensor_var(globalContext().getTHCState(), result_, self_, dim, (unbiased) ? 0 : 1, keepdim);
    result_->maybe_zero_dim(self_->dim() == 0 || (keepdim == false && self_->dim() == 1));
    return result;
}
Tensor CUDAFloatType::_th_var(const Tensor & self, int64_t dim, bool unbiased, bool keepdim) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    dim = maybe_wrap_dim(dim, self_);
    THCudaTensor_var(globalContext().getTHCState(), result_, self_, dim, (unbiased) ? 0 : 1, keepdim);
    result_->maybe_zero_dim(self_->dim() == 0 || (keepdim == false && self_->dim() == 1));
    return result;
}
Tensor CUDAFloatType::_th_var(const Tensor & self, bool unbiased) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    return at::scalar_tensor(convert<float>(THCudaTensor_varall(globalContext().getTHCState(), self_, (unbiased) ? 0 : 1)), options());
}
Tensor & CUDAFloatType::_th_std_out(Tensor & result, const Tensor & self, int64_t dim, bool unbiased, bool keepdim) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    dim = maybe_wrap_dim(dim, self_);
    THCudaTensor_std(globalContext().getTHCState(), result_, self_, dim, (unbiased) ? 0 : 1, keepdim);
    result_->maybe_zero_dim(self_->dim() == 0 || (keepdim == false && self_->dim() == 1));
    return result;
}
Tensor CUDAFloatType::_th_std(const Tensor & self, int64_t dim, bool unbiased, bool keepdim) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    dim = maybe_wrap_dim(dim, self_);
    THCudaTensor_std(globalContext().getTHCState(), result_, self_, dim, (unbiased) ? 0 : 1, keepdim);
    result_->maybe_zero_dim(self_->dim() == 0 || (keepdim == false && self_->dim() == 1));
    return result;
}
Tensor CUDAFloatType::_th_std(const Tensor & self, bool unbiased) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    return at::scalar_tensor(convert<float>(THCudaTensor_stdall(globalContext().getTHCState(), self_, (unbiased) ? 0 : 1)), options());
}
Tensor & CUDAFloatType::_th_renorm_out(Tensor & result, const Tensor & self, Scalar p, int64_t dim, Scalar maxnorm) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto p_ = p.toFloat();
    dim = maybe_wrap_dim(dim, self_);
    auto maxnorm_ = maxnorm.toFloat();
    THCudaTensor_renorm(globalContext().getTHCState(), result_, self_, p_, dim, maxnorm_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_renorm(const Tensor & self, Scalar p, int64_t dim, Scalar maxnorm) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto p_ = p.toFloat();
    dim = maybe_wrap_dim(dim, self_);
    auto maxnorm_ = maxnorm.toFloat();
    THCudaTensor_renorm(globalContext().getTHCState(), result_, self_, p_, dim, maxnorm_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_renorm_(Tensor & self, Scalar p, int64_t dim, Scalar maxnorm) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto p_ = p.toFloat();
    dim = maybe_wrap_dim(dim, self_);
    auto maxnorm_ = maxnorm.toFloat();
    THCudaTensor_renorm(globalContext().getTHCState(), self_, self_, p_, dim, maxnorm_);
    return self;
}
Tensor CUDAFloatType::s__th_dist(const Tensor & self, const Tensor & other, Scalar p) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CUDA, ScalarType::Float);
    auto p_ = p.toFloat();
    return at::scalar_tensor(convert<float>(THCudaTensor_dist(globalContext().getTHCState(), self_, other_, p_)), options());
}
Tensor & CUDAFloatType::_th_reciprocal_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_cinv(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_reciprocal(const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_cinv(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_reciprocal_(Tensor & self) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_cinv(globalContext().getTHCState(), self_, self_);
    return self;
}
Tensor & CUDAFloatType::_th_neg_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_neg(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_neg(const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_neg(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_neg_(Tensor & self) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_neg(globalContext().getTHCState(), self_, self_);
    return self;
}
Tensor & CUDAFloatType::s__th_atan2_out(Tensor & result, const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_atan2(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::s__th_atan2(const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_atan2(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::s__th_atan2_(Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_atan2(globalContext().getTHCState(), self_, self_, other_);
    return self;
}
Tensor & CUDAFloatType::_th_pow_out(Tensor & result, const Tensor & self, Scalar exponent) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto exponent_ = exponent.toFloat();
    THCudaTensor_pow(globalContext().getTHCState(), result_, self_, exponent_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_pow(const Tensor & self, Scalar exponent) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto exponent_ = exponent.toFloat();
    THCudaTensor_pow(globalContext().getTHCState(), result_, self_, exponent_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::s__th_pow_out(Tensor & result, const Tensor & self, const Tensor & exponent) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto exponent_ = checked_tensor_unwrap(exponent,"exponent",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_cpow(globalContext().getTHCState(), result_, self_, exponent_);
    result_->maybe_zero_dim(self_->dim() == 0 && exponent_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::s__th_pow(const Tensor & self, const Tensor & exponent) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto exponent_ = checked_tensor_unwrap(exponent,"exponent",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_cpow(globalContext().getTHCState(), result_, self_, exponent_);
    result_->maybe_zero_dim(self_->dim() == 0 && exponent_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_pow_out(Tensor & result, Scalar self, const Tensor & exponent) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = self.toFloat();
    auto exponent_ = checked_tensor_unwrap(exponent,"exponent",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_tpow(globalContext().getTHCState(), result_, self_, exponent_);
    result_->maybe_zero_dim(exponent_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_pow(Scalar self, const Tensor & exponent) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = self.toFloat();
    auto exponent_ = checked_tensor_unwrap(exponent,"exponent",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_tpow(globalContext().getTHCState(), result_, self_, exponent_);
    result_->maybe_zero_dim(exponent_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_pow_(Tensor & self, Scalar exponent) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto exponent_ = exponent.toFloat();
    THCudaTensor_pow(globalContext().getTHCState(), self_, self_, exponent_);
    return self;
}
Tensor & CUDAFloatType::s__th_pow_(Tensor & self, const Tensor & exponent) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto exponent_ = checked_tensor_unwrap(exponent,"exponent",3, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_cpow(globalContext().getTHCState(), self_, self_, exponent_);
    return self;
}
Tensor & CUDAFloatType::s__th_lerp_out(Tensor & result, const Tensor & self, const Tensor & end, Scalar weight) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto end_ = checked_tensor_unwrap(end,"end",2, false, Backend::CUDA, ScalarType::Float);
    auto weight_ = weight.toFloat();
    THCudaTensor_lerp(globalContext().getTHCState(), result_, self_, end_, weight_);
    result_->maybe_zero_dim(self_->dim() == 0 && end_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::s__th_lerp(const Tensor & self, const Tensor & end, Scalar weight) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto end_ = checked_tensor_unwrap(end,"end",2, false, Backend::CUDA, ScalarType::Float);
    auto weight_ = weight.toFloat();
    THCudaTensor_lerp(globalContext().getTHCState(), result_, self_, end_, weight_);
    result_->maybe_zero_dim(self_->dim() == 0 && end_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::s__th_lerp_(Tensor & self, const Tensor & end, Scalar weight) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto end_ = checked_tensor_unwrap(end,"end",3, false, Backend::CUDA, ScalarType::Float);
    auto weight_ = weight.toFloat();
    THCudaTensor_lerp(globalContext().getTHCState(), self_, self_, end_, weight_);
    return self;
}
Tensor & CUDAFloatType::_th_zero_(Tensor & self) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_zero(globalContext().getTHCState(), self_);
    return self;
}
Tensor & CUDAFloatType::_th_cumsum_out(Tensor & result, const Tensor & self, int64_t dim) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    dim = maybe_wrap_dim(dim, self_);
    THCudaTensor_cumsum(globalContext().getTHCState(), result_, self_, dim);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_cumsum(const Tensor & self, int64_t dim) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    dim = maybe_wrap_dim(dim, self_);
    THCudaTensor_cumsum(globalContext().getTHCState(), result_, self_, dim);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_cumprod_out(Tensor & result, const Tensor & self, int64_t dim) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    dim = maybe_wrap_dim(dim, self_);
    THCudaTensor_cumprod(globalContext().getTHCState(), result_, self_, dim);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_cumprod(const Tensor & self, int64_t dim) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    dim = maybe_wrap_dim(dim, self_);
    THCudaTensor_cumprod(globalContext().getTHCState(), result_, self_, dim);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_sign_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_sign(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_sign(const Tensor & self) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_sign(globalContext().getTHCState(), result_, self_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_sign_(Tensor & self) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_sign(globalContext().getTHCState(), self_, self_);
    return self;
}
Tensor CUDAFloatType::_th_trace(const Tensor & self) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    return at::scalar_tensor(convert<float>(THCudaTensor_trace(globalContext().getTHCState(), self_)), options());
}
Tensor & CUDAFloatType::_th_fmod_out(Tensor & result, const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = other.toFloat();
    THCudaTensor_fmod(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_fmod(const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = other.toFloat();
    THCudaTensor_fmod(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::s__th_fmod_out(Tensor & result, const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_cfmod(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::s__th_fmod(const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_cfmod(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_fmod_(Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = other.toFloat();
    THCudaTensor_fmod(globalContext().getTHCState(), self_, self_, other_);
    return self;
}
Tensor & CUDAFloatType::s__th_fmod_(Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_cfmod(globalContext().getTHCState(), self_, self_, other_);
    return self;
}
Tensor & CUDAFloatType::_th_remainder_out(Tensor & result, const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = other.toFloat();
    THCudaTensor_remainder(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_remainder(const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = other.toFloat();
    THCudaTensor_remainder(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::s__th_remainder_out(Tensor & result, const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_cremainder(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::s__th_remainder(const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_cremainder(globalContext().getTHCState(), result_, self_, other_);
    result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_remainder_(Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = other.toFloat();
    THCudaTensor_remainder(globalContext().getTHCState(), self_, self_, other_);
    return self;
}
Tensor & CUDAFloatType::s__th_remainder_(Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_cremainder(globalContext().getTHCState(), self_, self_, other_);
    return self;
}
Tensor & CUDAFloatType::_th_clamp_out(Tensor & result, const Tensor & self, Scalar min, Scalar max) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto min_ = min.toFloat();
    auto max_ = max.toFloat();
    THCudaTensor_clamp(globalContext().getTHCState(), result_, self_, min_, max_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_clamp(const Tensor & self, Scalar min, Scalar max) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto min_ = min.toFloat();
    auto max_ = max.toFloat();
    THCudaTensor_clamp(globalContext().getTHCState(), result_, self_, min_, max_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_clamp_min_out(Tensor & result, const Tensor & self, Scalar min) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto min_ = min.toFloat();
    THCudaTensor_cmaxValue(globalContext().getTHCState(), result_, self_, min_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_clamp_min(const Tensor & self, Scalar min) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto min_ = min.toFloat();
    THCudaTensor_cmaxValue(globalContext().getTHCState(), result_, self_, min_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_clamp_max_out(Tensor & result, const Tensor & self, Scalar max) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto max_ = max.toFloat();
    THCudaTensor_cminValue(globalContext().getTHCState(), result_, self_, max_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_clamp_max(const Tensor & self, Scalar max) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto max_ = max.toFloat();
    THCudaTensor_cminValue(globalContext().getTHCState(), result_, self_, max_);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_dot(const Tensor & self, const Tensor & tensor) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto tensor_ = checked_tensor_unwrap(tensor,"tensor",2, false, Backend::CUDA, ScalarType::Float);
    return at::scalar_tensor(convert<float>(THCudaTensor_dot(globalContext().getTHCState(), self_, tensor_)), options());
}
Tensor & CUDAFloatType::_th_cross_out(Tensor & result, const Tensor & self, const Tensor & other, int64_t dim) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_cross(globalContext().getTHCState(), result_, self_, other_, dim);
    result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_cross(const Tensor & self, const Tensor & other, int64_t dim) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_cross(globalContext().getTHCState(), result_, self_, other_, dim);
    result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_diag_out(Tensor & result, const Tensor & self, int64_t diagonal) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    if (self_->dim() == 0) {
      throw std::runtime_error("Input must be 1-d or 2-d");
    }
    THCudaTensor_diag(globalContext().getTHCState(), result_, self_, diagonal);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_diag(const Tensor & self, int64_t diagonal) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    if (self_->dim() == 0) {
      throw std::runtime_error("Input must be 1-d or 2-d");
    }
    THCudaTensor_diag(globalContext().getTHCState(), result_, self_, diagonal);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::s__th_addmm_out(Tensor & result, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto beta_ = beta.toFloat();
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto alpha_ = alpha.toFloat();
    auto mat1_ = checked_tensor_unwrap(mat1,"mat1",4, false, Backend::CUDA, ScalarType::Float);
    auto mat2_ = checked_tensor_unwrap(mat2,"mat2",5, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_addmm(globalContext().getTHCState(), result_, beta_, self_, alpha_, mat1_, mat2_);
    result_->maybe_zero_dim(self_->dim() == 0 && mat1_->dim() == 0 && mat2_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::s__th_addmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto beta_ = beta.toFloat();
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto alpha_ = alpha.toFloat();
    auto mat1_ = checked_tensor_unwrap(mat1,"mat1",4, false, Backend::CUDA, ScalarType::Float);
    auto mat2_ = checked_tensor_unwrap(mat2,"mat2",5, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_addmm(globalContext().getTHCState(), result_, beta_, self_, alpha_, mat1_, mat2_);
    result_->maybe_zero_dim(self_->dim() == 0 && mat1_->dim() == 0 && mat2_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_addmm_(Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto beta_ = beta.toFloat();
    auto alpha_ = alpha.toFloat();
    auto mat1_ = checked_tensor_unwrap(mat1,"mat1",5, false, Backend::CUDA, ScalarType::Float);
    auto mat2_ = checked_tensor_unwrap(mat2,"mat2",6, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_addmm(globalContext().getTHCState(), self_, beta_, self_, alpha_, mat1_, mat2_);
    return self;
}
Tensor & CUDAFloatType::s__th_addmv_out(Tensor & result, const Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto beta_ = beta.toFloat();
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto alpha_ = alpha.toFloat();
    auto mat_ = checked_tensor_unwrap(mat,"mat",4, false, Backend::CUDA, ScalarType::Float);
    auto vec_ = checked_tensor_unwrap(vec,"vec",5, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_addmv(globalContext().getTHCState(), result_, beta_, self_, alpha_, mat_, vec_);
    result_->maybe_zero_dim(self_->dim() == 0 && mat_->dim() == 0 && vec_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::s__th_addmv(const Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto beta_ = beta.toFloat();
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto alpha_ = alpha.toFloat();
    auto mat_ = checked_tensor_unwrap(mat,"mat",4, false, Backend::CUDA, ScalarType::Float);
    auto vec_ = checked_tensor_unwrap(vec,"vec",5, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_addmv(globalContext().getTHCState(), result_, beta_, self_, alpha_, mat_, vec_);
    result_->maybe_zero_dim(self_->dim() == 0 && mat_->dim() == 0 && vec_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_addmv_(Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto beta_ = beta.toFloat();
    auto alpha_ = alpha.toFloat();
    auto mat_ = checked_tensor_unwrap(mat,"mat",5, false, Backend::CUDA, ScalarType::Float);
    auto vec_ = checked_tensor_unwrap(vec,"vec",6, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_addmv(globalContext().getTHCState(), self_, beta_, self_, alpha_, mat_, vec_);
    return self;
}
Tensor & CUDAFloatType::s__th_addr_out(Tensor & result, const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto beta_ = beta.toFloat();
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto alpha_ = alpha.toFloat();
    auto vec1_ = checked_tensor_unwrap(vec1,"vec1",4, false, Backend::CUDA, ScalarType::Float);
    auto vec2_ = checked_tensor_unwrap(vec2,"vec2",5, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_addr(globalContext().getTHCState(), result_, beta_, self_, alpha_, vec1_, vec2_);
    result_->maybe_zero_dim(self_->dim() == 0 && vec1_->dim() == 0 && vec2_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::s__th_addr(const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto beta_ = beta.toFloat();
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto alpha_ = alpha.toFloat();
    auto vec1_ = checked_tensor_unwrap(vec1,"vec1",4, false, Backend::CUDA, ScalarType::Float);
    auto vec2_ = checked_tensor_unwrap(vec2,"vec2",5, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_addr(globalContext().getTHCState(), result_, beta_, self_, alpha_, vec1_, vec2_);
    result_->maybe_zero_dim(self_->dim() == 0 && vec1_->dim() == 0 && vec2_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_addr_(Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto beta_ = beta.toFloat();
    auto alpha_ = alpha.toFloat();
    auto vec1_ = checked_tensor_unwrap(vec1,"vec1",5, false, Backend::CUDA, ScalarType::Float);
    auto vec2_ = checked_tensor_unwrap(vec2,"vec2",6, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_addr(globalContext().getTHCState(), self_, beta_, self_, alpha_, vec1_, vec2_);
    return self;
}
Tensor & CUDAFloatType::_th_ger_out(Tensor & result, const Tensor & self, const Tensor & vec2) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    result.resize_({ self.dim() == 0 ? 1 : self.size(0),vec2.dim() == 0 ? 1 : vec2.size(0) });
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto vec2_ = checked_tensor_unwrap(vec2,"vec2",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_addr(globalContext().getTHCState(), result_, float(0), result_, float(1), self_, vec2_);
    result_->maybe_zero_dim(false);
    return result;
}
Tensor CUDAFloatType::_th_ger(const Tensor & self, const Tensor & vec2) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    result.resize_({ self.dim() == 0 ? 1 : self.size(0),vec2.dim() == 0 ? 1 : vec2.size(0) });
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto vec2_ = checked_tensor_unwrap(vec2,"vec2",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_addr(globalContext().getTHCState(), result_, float(0), result_, float(1), self_, vec2_);
    result_->maybe_zero_dim(false);
    return result;
}
Tensor & CUDAFloatType::_th_mv_out(Tensor & result, const Tensor & self, const Tensor & vec) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    result.resize_({ self.size(0) });
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto vec_ = checked_tensor_unwrap(vec,"vec",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_addmv(globalContext().getTHCState(), result_, float(0), result_, float(1), self_, vec_);
    result_->maybe_zero_dim(self_->dim() == 0 && vec_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_mv(const Tensor & self, const Tensor & vec) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    result.resize_({ self.size(0) });
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto vec_ = checked_tensor_unwrap(vec,"vec",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_addmv(globalContext().getTHCState(), result_, float(0), result_, float(1), self_, vec_);
    result_->maybe_zero_dim(self_->dim() == 0 && vec_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_mm_out(Tensor & result, const Tensor & self, const Tensor & mat2) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    result.resize_({ self.size(0),mat2.size(1) });
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto mat2_ = checked_tensor_unwrap(mat2,"mat2",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_addmm(globalContext().getTHCState(), result_, float(0), result_, float(1), self_, mat2_);
    result_->maybe_zero_dim(self_->dim() == 0 && mat2_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_mm(const Tensor & self, const Tensor & mat2) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    result.resize_({ self.size(0),mat2.size(1) });
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto mat2_ = checked_tensor_unwrap(mat2,"mat2",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_addmm(globalContext().getTHCState(), result_, float(0), result_, float(1), self_, mat2_);
    result_->maybe_zero_dim(self_->dim() == 0 && mat2_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_bmm_out(Tensor & result, const Tensor & self, const Tensor & mat2) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    result.resize_({ self.size(0),self.size(1),mat2.size(2) });
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto mat2_ = checked_tensor_unwrap(mat2,"mat2",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_baddbmm(globalContext().getTHCState(), result_, float(0), result_, float(1), self_, mat2_);
    result_->maybe_zero_dim(self_->dim() == 0 && mat2_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_bmm(const Tensor & self, const Tensor & mat2) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    result.resize_({ self.size(0),self.size(1),mat2.size(2) });
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto mat2_ = checked_tensor_unwrap(mat2,"mat2",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_baddbmm(globalContext().getTHCState(), result_, float(0), result_, float(1), self_, mat2_);
    result_->maybe_zero_dim(self_->dim() == 0 && mat2_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::s__th_addbmm_out(Tensor & result, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto beta_ = beta.toFloat();
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto alpha_ = alpha.toFloat();
    auto batch1_ = checked_tensor_unwrap(batch1,"batch1",4, false, Backend::CUDA, ScalarType::Float);
    auto batch2_ = checked_tensor_unwrap(batch2,"batch2",5, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_addbmm(globalContext().getTHCState(), result_, beta_, self_, alpha_, batch1_, batch2_);
    result_->maybe_zero_dim(self_->dim() == 0 && batch1_->dim() == 0 && batch2_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::s__th_addbmm(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto beta_ = beta.toFloat();
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto alpha_ = alpha.toFloat();
    auto batch1_ = checked_tensor_unwrap(batch1,"batch1",4, false, Backend::CUDA, ScalarType::Float);
    auto batch2_ = checked_tensor_unwrap(batch2,"batch2",5, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_addbmm(globalContext().getTHCState(), result_, beta_, self_, alpha_, batch1_, batch2_);
    result_->maybe_zero_dim(self_->dim() == 0 && batch1_->dim() == 0 && batch2_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_addbmm_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto beta_ = beta.toFloat();
    auto alpha_ = alpha.toFloat();
    auto batch1_ = checked_tensor_unwrap(batch1,"batch1",5, false, Backend::CUDA, ScalarType::Float);
    auto batch2_ = checked_tensor_unwrap(batch2,"batch2",6, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_addbmm(globalContext().getTHCState(), self_, beta_, self_, alpha_, batch1_, batch2_);
    return self;
}
Tensor & CUDAFloatType::s__th_baddbmm_out(Tensor & result, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto beta_ = beta.toFloat();
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto alpha_ = alpha.toFloat();
    auto batch1_ = checked_tensor_unwrap(batch1,"batch1",4, false, Backend::CUDA, ScalarType::Float);
    auto batch2_ = checked_tensor_unwrap(batch2,"batch2",5, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_baddbmm(globalContext().getTHCState(), result_, beta_, self_, alpha_, batch1_, batch2_);
    result_->maybe_zero_dim(self_->dim() == 0 && batch1_->dim() == 0 && batch2_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::s__th_baddbmm(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto beta_ = beta.toFloat();
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto alpha_ = alpha.toFloat();
    auto batch1_ = checked_tensor_unwrap(batch1,"batch1",4, false, Backend::CUDA, ScalarType::Float);
    auto batch2_ = checked_tensor_unwrap(batch2,"batch2",5, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_baddbmm(globalContext().getTHCState(), result_, beta_, self_, alpha_, batch1_, batch2_);
    result_->maybe_zero_dim(self_->dim() == 0 && batch1_->dim() == 0 && batch2_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::s__th_addcmul_out(Tensor & result, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto value_ = value.toFloat();
    auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",3, false, Backend::CUDA, ScalarType::Float);
    auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",4, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_addcmul(globalContext().getTHCState(), result_, self_, value_, tensor1_, tensor2_);
    result_->maybe_zero_dim(self_->dim() == 0 && tensor1_->dim() == 0 && tensor2_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::s__th_addcmul(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto value_ = value.toFloat();
    auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",3, false, Backend::CUDA, ScalarType::Float);
    auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",4, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_addcmul(globalContext().getTHCState(), result_, self_, value_, tensor1_, tensor2_);
    result_->maybe_zero_dim(self_->dim() == 0 && tensor1_->dim() == 0 && tensor2_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::s__th_addcmul_(Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto value_ = value.toFloat();
    auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",4, false, Backend::CUDA, ScalarType::Float);
    auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",5, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_addcmul(globalContext().getTHCState(), self_, self_, value_, tensor1_, tensor2_);
    return self;
}
Tensor & CUDAFloatType::s__th_addcdiv_out(Tensor & result, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto value_ = value.toFloat();
    auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",3, false, Backend::CUDA, ScalarType::Float);
    auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",4, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_addcdiv(globalContext().getTHCState(), result_, self_, value_, tensor1_, tensor2_);
    result_->maybe_zero_dim(self_->dim() == 0 && tensor1_->dim() == 0 && tensor2_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::s__th_addcdiv(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto value_ = value.toFloat();
    auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",3, false, Backend::CUDA, ScalarType::Float);
    auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",4, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_addcdiv(globalContext().getTHCState(), result_, self_, value_, tensor1_, tensor2_);
    result_->maybe_zero_dim(self_->dim() == 0 && tensor1_->dim() == 0 && tensor2_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::s__th_addcdiv_(Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto value_ = value.toFloat();
    auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",4, false, Backend::CUDA, ScalarType::Float);
    auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",5, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_addcdiv(globalContext().getTHCState(), self_, self_, value_, tensor1_, tensor2_);
    return self;
}
std::tuple<Tensor &,Tensor &> CUDAFloatType::_th_gels_out(Tensor & res1, Tensor & res2, const Tensor & self, const Tensor & A) const {
    // DeviceGuard omitted
    auto res1_ = checked_tensor_unwrap(res1,"res1",0, false, Backend::CUDA, ScalarType::Float);
    auto res2_ = checked_tensor_unwrap(res2,"res2",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto A_ = checked_tensor_unwrap(A,"A",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_gels(globalContext().getTHCState(), res1_, res2_, self_, A_);
    bool maybe_scalar = self_->dim() == 0 && A_->dim() == 0;
    res1_->maybe_zero_dim(maybe_scalar);
    res2_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor &, Tensor &>(res1, res2);
}
std::tuple<Tensor,Tensor> CUDAFloatType::_th_gels(const Tensor & self, const Tensor & A) const {
    // DeviceGuard omitted
    auto res1_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto res1 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res1_));
    auto res2_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto res2 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res2_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto A_ = checked_tensor_unwrap(A,"A",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_gels(globalContext().getTHCState(), res1_, res2_, self_, A_);
    bool maybe_scalar = self_->dim() == 0 && A_->dim() == 0;
    res1_->maybe_zero_dim(maybe_scalar);
    res2_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor, Tensor>(res1, res2);
}
std::tuple<Tensor &,Tensor &> CUDAFloatType::_th_trtrs_out(Tensor & res1, Tensor & res2, const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular) const {
    // DeviceGuard omitted
    auto res1_ = checked_tensor_unwrap(res1,"res1",0, false, Backend::CUDA, ScalarType::Float);
    auto res2_ = checked_tensor_unwrap(res2,"res2",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto A_ = checked_tensor_unwrap(A,"A",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_trtrs(globalContext().getTHCState(), res1_, res2_, self_, A_, (upper) ? "U" : "L", (transpose) ? "T" : "N", (unitriangular) ? "U" : "N");
    bool maybe_scalar = self_->dim() == 0 && A_->dim() == 0;
    res1_->maybe_zero_dim(maybe_scalar);
    res2_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor &, Tensor &>(res1, res2);
}
std::tuple<Tensor,Tensor> CUDAFloatType::_th_trtrs(const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular) const {
    // DeviceGuard omitted
    auto res1_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto res1 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res1_));
    auto res2_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto res2 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res2_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto A_ = checked_tensor_unwrap(A,"A",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_trtrs(globalContext().getTHCState(), res1_, res2_, self_, A_, (upper) ? "U" : "L", (transpose) ? "T" : "N", (unitriangular) ? "U" : "N");
    bool maybe_scalar = self_->dim() == 0 && A_->dim() == 0;
    res1_->maybe_zero_dim(maybe_scalar);
    res2_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor, Tensor>(res1, res2);
}
std::tuple<Tensor &,Tensor &> CUDAFloatType::_th_symeig_out(Tensor & res1, Tensor & res2, const Tensor & self, bool eigenvectors, bool upper) const {
    // DeviceGuard omitted
    auto res1_ = checked_tensor_unwrap(res1,"res1",0, false, Backend::CUDA, ScalarType::Float);
    auto res2_ = checked_tensor_unwrap(res2,"res2",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_syev(globalContext().getTHCState(), res1_, res2_, self_, (eigenvectors) ? "V" : "N", (upper) ? "U" : "L");
    bool maybe_scalar = self_->dim() == 0;
    res1_->maybe_zero_dim(maybe_scalar);
    res2_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor &, Tensor &>(res1, res2);
}
std::tuple<Tensor,Tensor> CUDAFloatType::_th_symeig(const Tensor & self, bool eigenvectors, bool upper) const {
    // DeviceGuard omitted
    auto res1_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto res1 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res1_));
    auto res2_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto res2 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res2_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_syev(globalContext().getTHCState(), res1_, res2_, self_, (eigenvectors) ? "V" : "N", (upper) ? "U" : "L");
    bool maybe_scalar = self_->dim() == 0;
    res1_->maybe_zero_dim(maybe_scalar);
    res2_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor, Tensor>(res1, res2);
}
std::tuple<Tensor &,Tensor &> CUDAFloatType::_th_eig_out(Tensor & res1, Tensor & res2, const Tensor & self, bool eigenvectors) const {
    // DeviceGuard omitted
    auto res1_ = checked_tensor_unwrap(res1,"res1",0, false, Backend::CUDA, ScalarType::Float);
    auto res2_ = checked_tensor_unwrap(res2,"res2",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_geev(globalContext().getTHCState(), res1_, res2_, self_, (eigenvectors) ? "V" : "N");
    bool maybe_scalar = self_->dim() == 0;
    res1_->maybe_zero_dim(maybe_scalar);
    res2_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor &, Tensor &>(res1, res2);
}
std::tuple<Tensor,Tensor> CUDAFloatType::_th_eig(const Tensor & self, bool eigenvectors) const {
    // DeviceGuard omitted
    auto res1_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto res1 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res1_));
    auto res2_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto res2 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res2_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_geev(globalContext().getTHCState(), res1_, res2_, self_, (eigenvectors) ? "V" : "N");
    bool maybe_scalar = self_->dim() == 0;
    res1_->maybe_zero_dim(maybe_scalar);
    res2_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor, Tensor>(res1, res2);
}
std::tuple<Tensor &,Tensor &,Tensor &> CUDAFloatType::_th_svd_out(Tensor & res1, Tensor & res2, Tensor & res3, const Tensor & self, bool some, bool compute_uv) const {
    // DeviceGuard omitted
    auto res1_ = checked_tensor_unwrap(res1,"res1",0, false, Backend::CUDA, ScalarType::Float);
    auto res2_ = checked_tensor_unwrap(res2,"res2",0, false, Backend::CUDA, ScalarType::Float);
    auto res3_ = checked_tensor_unwrap(res3,"res3",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_gesdd(globalContext().getTHCState(), res1_, res2_, res3_, self_, (some) ? "S" : "A", (compute_uv) ? "S" : "N");
    bool maybe_scalar = self_->dim() == 0;
    res1_->maybe_zero_dim(maybe_scalar);
    res2_->maybe_zero_dim(maybe_scalar);
    res3_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor &, Tensor &, Tensor &>(res1, res2, res3);
}
std::tuple<Tensor,Tensor,Tensor> CUDAFloatType::_th_svd(const Tensor & self, bool some, bool compute_uv) const {
    // DeviceGuard omitted
    auto res1_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto res1 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res1_));
    auto res2_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto res2 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res2_));
    auto res3_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto res3 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res3_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_gesdd(globalContext().getTHCState(), res1_, res2_, res3_, self_, (some) ? "S" : "A", (compute_uv) ? "S" : "N");
    bool maybe_scalar = self_->dim() == 0;
    res1_->maybe_zero_dim(maybe_scalar);
    res2_->maybe_zero_dim(maybe_scalar);
    res3_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor, Tensor, Tensor>(res1, res2, res3);
}
Tensor & CUDAFloatType::_th_getri_single_out(Tensor & output, const Tensor & self) const {
    // DeviceGuard omitted
    auto output_ = checked_tensor_unwrap(output,"output",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_getri(globalContext().getTHCState(), output_, self_);
    output_->maybe_zero_dim(self_->dim() == 0);
    return output;
}
Tensor CUDAFloatType::_th_getri_single(const Tensor & self) const {
    // DeviceGuard omitted
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_getri(globalContext().getTHCState(), output_, self_);
    output_->maybe_zero_dim(self_->dim() == 0);
    return output;
}
Tensor & CUDAFloatType::_th_potri_out(Tensor & output, const Tensor & self, bool upper) const {
    // DeviceGuard omitted
    auto output_ = checked_tensor_unwrap(output,"output",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_potri(globalContext().getTHCState(), output_, self_, (upper) ? "U" : "L");
    output_->maybe_zero_dim(self_->dim() == 0);
    return output;
}
Tensor CUDAFloatType::_th_potri(const Tensor & self, bool upper) const {
    // DeviceGuard omitted
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_potri(globalContext().getTHCState(), output_, self_, (upper) ? "U" : "L");
    output_->maybe_zero_dim(self_->dim() == 0);
    return output;
}
std::tuple<Tensor &,Tensor &> CUDAFloatType::_th_qr_out(Tensor & res1, Tensor & res2, const Tensor & self) const {
    // DeviceGuard omitted
    auto res1_ = checked_tensor_unwrap(res1,"res1",0, false, Backend::CUDA, ScalarType::Float);
    auto res2_ = checked_tensor_unwrap(res2,"res2",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_qr(globalContext().getTHCState(), res1_, res2_, self_);
    bool maybe_scalar = self_->dim() == 0;
    res1_->maybe_zero_dim(maybe_scalar);
    res2_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor &, Tensor &>(res1, res2);
}
std::tuple<Tensor,Tensor> CUDAFloatType::_th_qr(const Tensor & self) const {
    // DeviceGuard omitted
    auto res1_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto res1 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res1_));
    auto res2_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto res2 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res2_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_qr(globalContext().getTHCState(), res1_, res2_, self_);
    bool maybe_scalar = self_->dim() == 0;
    res1_->maybe_zero_dim(maybe_scalar);
    res2_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor, Tensor>(res1, res2);
}
std::tuple<Tensor &,Tensor &> CUDAFloatType::_th_geqrf_out(Tensor & res1, Tensor & res2, const Tensor & self) const {
    // DeviceGuard omitted
    auto res1_ = checked_tensor_unwrap(res1,"res1",0, false, Backend::CUDA, ScalarType::Float);
    auto res2_ = checked_tensor_unwrap(res2,"res2",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_geqrf(globalContext().getTHCState(), res1_, res2_, self_);
    bool maybe_scalar = self_->dim() == 0;
    res1_->maybe_zero_dim(maybe_scalar);
    res2_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor &, Tensor &>(res1, res2);
}
std::tuple<Tensor,Tensor> CUDAFloatType::_th_geqrf(const Tensor & self) const {
    // DeviceGuard omitted
    auto res1_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto res1 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res1_));
    auto res2_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto res2 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res2_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_geqrf(globalContext().getTHCState(), res1_, res2_, self_);
    bool maybe_scalar = self_->dim() == 0;
    res1_->maybe_zero_dim(maybe_scalar);
    res2_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor, Tensor>(res1, res2);
}
std::tuple<Tensor &,Tensor &> CUDAFloatType::_th_btrifact_out(Tensor & result, Tensor & pivots, const Tensor & self, bool pivot) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto pivots_ = checked_tensor_unwrap(pivots,"pivots",0, false, Backend::CUDA, ScalarType::Int);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_btrifact(globalContext().getTHCState(), result_, pivots_, NULL, pivot, self_);
    bool maybe_scalar = self_->dim() == 0;
    result_->maybe_zero_dim(maybe_scalar);
    pivots_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor &, Tensor &>(result, pivots);
}
std::tuple<Tensor,Tensor> CUDAFloatType::_th_btrifact(const Tensor & self, bool pivot) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto pivots_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), scalarTypeToTypeMeta(ScalarType::Int), allocator(), false).release();
    auto pivots = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(pivots_));
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_btrifact(globalContext().getTHCState(), result_, pivots_, NULL, pivot, self_);
    bool maybe_scalar = self_->dim() == 0;
    result_->maybe_zero_dim(maybe_scalar);
    pivots_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor, Tensor>(result, pivots);
}
std::tuple<Tensor &,Tensor &,Tensor &> CUDAFloatType::_th_btrifact_with_info_out(Tensor & result, Tensor & pivots, Tensor & info, const Tensor & self, bool pivot) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto pivots_ = checked_tensor_unwrap(pivots,"pivots",0, false, Backend::CUDA, ScalarType::Int);
    auto info_ = checked_tensor_unwrap(info,"info",0, false, Backend::CUDA, ScalarType::Int);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_btrifact(globalContext().getTHCState(), result_, pivots_, info_, pivot, self_);
    bool maybe_scalar = self_->dim() == 0;
    result_->maybe_zero_dim(maybe_scalar);
    pivots_->maybe_zero_dim(maybe_scalar);
    info_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor &, Tensor &, Tensor &>(result, pivots, info);
}
std::tuple<Tensor,Tensor,Tensor> CUDAFloatType::_th_btrifact_with_info(const Tensor & self, bool pivot) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto pivots_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), scalarTypeToTypeMeta(ScalarType::Int), allocator(), false).release();
    auto pivots = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(pivots_));
    auto info_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), scalarTypeToTypeMeta(ScalarType::Int), allocator(), false).release();
    auto info = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(info_));
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_btrifact(globalContext().getTHCState(), result_, pivots_, info_, pivot, self_);
    bool maybe_scalar = self_->dim() == 0;
    result_->maybe_zero_dim(maybe_scalar);
    pivots_->maybe_zero_dim(maybe_scalar);
    info_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor, Tensor, Tensor>(result, pivots, info);
}
Tensor & CUDAFloatType::_th_btrisolve_out(Tensor & result, const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto LU_data_ = checked_tensor_unwrap(LU_data,"LU_data",2, false, Backend::CUDA, ScalarType::Float);
    auto LU_pivots_ = checked_tensor_unwrap(LU_pivots,"LU_pivots",3, false, Backend::CUDA, ScalarType::Int);
    THCudaTensor_btrisolve(globalContext().getTHCState(), result_, self_, LU_data_, LU_pivots_);
    result_->maybe_zero_dim(self_->dim() == 0 && LU_data_->dim() == 0 && LU_pivots_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_btrisolve(const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto LU_data_ = checked_tensor_unwrap(LU_data,"LU_data",2, false, Backend::CUDA, ScalarType::Float);
    auto LU_pivots_ = checked_tensor_unwrap(LU_pivots,"LU_pivots",3, false, Backend::CUDA, ScalarType::Int);
    THCudaTensor_btrisolve(globalContext().getTHCState(), result_, self_, LU_data_, LU_pivots_);
    result_->maybe_zero_dim(self_->dim() == 0 && LU_data_->dim() == 0 && LU_pivots_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_random_(Tensor & self, int64_t from, int64_t to, Generator * generator) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto generator_ = check_generator<CUDAGenerator>(generator, &globalContext().defaultGenerator(device_type()));
    (void) generator_; //silence unused warning
    THCudaTensor_clampedRandom(globalContext().getTHCState(), self_, from, to);
    return self;
}
Tensor & CUDAFloatType::_th_random_(Tensor & self, int64_t to, Generator * generator) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto generator_ = check_generator<CUDAGenerator>(generator, &globalContext().defaultGenerator(device_type()));
    (void) generator_; //silence unused warning
    THCudaTensor_cappedRandom(globalContext().getTHCState(), self_, to);
    return self;
}
Tensor & CUDAFloatType::_th_random_(Tensor & self, Generator * generator) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto generator_ = check_generator<CUDAGenerator>(generator, &globalContext().defaultGenerator(device_type()));
    (void) generator_; //silence unused warning
    THCudaTensor_random(globalContext().getTHCState(), self_);
    return self;
}
Tensor & CUDAFloatType::_th_multinomial_out(Tensor & result, const Tensor & self, int64_t num_samples, bool replacement, Generator * generator) const {
    // DeviceGuard omitted
    auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CUDA, ScalarType::Long);
    auto generator_ = check_generator<CUDAGenerator>(generator, &globalContext().defaultGenerator(device_type()));
    (void) generator_; //silence unused warning
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_multinomial(globalContext().getTHCState(), result_, self_, num_samples, replacement);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor CUDAFloatType::_th_multinomial(const Tensor & self, int64_t num_samples, bool replacement, Generator * generator) const {
    // DeviceGuard omitted
    auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), scalarTypeToTypeMeta(ScalarType::Long), allocator(), false).release();
    auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
    auto generator_ = check_generator<CUDAGenerator>(generator, &globalContext().defaultGenerator(device_type()));
    (void) generator_; //silence unused warning
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_multinomial(globalContext().getTHCState(), result_, self_, num_samples, replacement);
    result_->maybe_zero_dim(self_->dim() == 0);
    return result;
}
Tensor & CUDAFloatType::_th_uniform_(Tensor & self, double from, double to, Generator * generator) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto generator_ = check_generator<CUDAGenerator>(generator, &globalContext().defaultGenerator(device_type()));
    (void) generator_; //silence unused warning
    THCudaTensor_uniform(globalContext().getTHCState(), self_, from, to);
    return self;
}
Tensor & CUDAFloatType::_th_normal_out(Tensor & output, const Tensor & mean, double std, Generator * generator) const {
    // DeviceGuard omitted
    auto output_ = checked_tensor_unwrap(output,"output",0, false, Backend::CUDA, ScalarType::Float);
    auto generator_ = check_generator<CUDAGenerator>(generator, &globalContext().defaultGenerator(device_type()));
    (void) generator_; //silence unused warning
    auto mean_ = checked_tensor_unwrap(mean,"mean",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_normal_means(globalContext().getTHCState(), output_, mean_, std);
    output_->maybe_zero_dim(mean_->dim() == 0);
    return output;
}
Tensor CUDAFloatType::_th_normal(const Tensor & mean, double std, Generator * generator) const {
    // DeviceGuard omitted
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    auto generator_ = check_generator<CUDAGenerator>(generator, &globalContext().defaultGenerator(device_type()));
    (void) generator_; //silence unused warning
    auto mean_ = checked_tensor_unwrap(mean,"mean",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_normal_means(globalContext().getTHCState(), output_, mean_, std);
    output_->maybe_zero_dim(mean_->dim() == 0);
    return output;
}
Tensor & CUDAFloatType::_th_normal_out(Tensor & output, double mean, const Tensor & std, Generator * generator) const {
    // DeviceGuard omitted
    auto output_ = checked_tensor_unwrap(output,"output",0, false, Backend::CUDA, ScalarType::Float);
    auto generator_ = check_generator<CUDAGenerator>(generator, &globalContext().defaultGenerator(device_type()));
    (void) generator_; //silence unused warning
    auto std_ = checked_tensor_unwrap(std,"std",3, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_normal_stddevs(globalContext().getTHCState(), output_, mean, std_);
    output_->maybe_zero_dim(std_->dim() == 0);
    return output;
}
Tensor CUDAFloatType::_th_normal(double mean, const Tensor & std, Generator * generator) const {
    // DeviceGuard omitted
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    auto generator_ = check_generator<CUDAGenerator>(generator, &globalContext().defaultGenerator(device_type()));
    (void) generator_; //silence unused warning
    auto std_ = checked_tensor_unwrap(std,"std",3, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_normal_stddevs(globalContext().getTHCState(), output_, mean, std_);
    output_->maybe_zero_dim(std_->dim() == 0);
    return output;
}
Tensor & CUDAFloatType::_th_normal_out(Tensor & output, const Tensor & mean, const Tensor & std, Generator * generator) const {
    // DeviceGuard omitted
    auto output_ = checked_tensor_unwrap(output,"output",0, false, Backend::CUDA, ScalarType::Float);
    auto generator_ = check_generator<CUDAGenerator>(generator, &globalContext().defaultGenerator(device_type()));
    (void) generator_; //silence unused warning
    auto mean_ = checked_tensor_unwrap(mean,"mean",2, false, Backend::CUDA, ScalarType::Float);
    auto std_ = checked_tensor_unwrap(std,"std",3, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_normal_means_stddevs(globalContext().getTHCState(), output_, mean_, std_);
    output_->maybe_zero_dim(mean_->dim() == 0 && std_->dim() == 0);
    return output;
}
Tensor CUDAFloatType::_th_normal(const Tensor & mean, const Tensor & std, Generator * generator) const {
    // DeviceGuard omitted
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    auto generator_ = check_generator<CUDAGenerator>(generator, &globalContext().defaultGenerator(device_type()));
    (void) generator_; //silence unused warning
    auto mean_ = checked_tensor_unwrap(mean,"mean",2, false, Backend::CUDA, ScalarType::Float);
    auto std_ = checked_tensor_unwrap(std,"std",3, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_normal_means_stddevs(globalContext().getTHCState(), output_, mean_, std_);
    output_->maybe_zero_dim(mean_->dim() == 0 && std_->dim() == 0);
    return output;
}
Tensor & CUDAFloatType::_th_normal_(Tensor & self, double mean, double std, Generator * generator) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto generator_ = check_generator<CUDAGenerator>(generator, &globalContext().defaultGenerator(device_type()));
    (void) generator_; //silence unused warning
    THCudaTensor_normal(globalContext().getTHCState(), self_, mean, std);
    return self;
}
Tensor & CUDAFloatType::_th_cauchy_(Tensor & self, double median, double sigma, Generator * generator) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto generator_ = check_generator<CUDAGenerator>(generator, &globalContext().defaultGenerator(device_type()));
    (void) generator_; //silence unused warning
    THCudaTensor_cauchy(globalContext().getTHCState(), self_, median, sigma);
    return self;
}
Tensor & CUDAFloatType::_th_log_normal_(Tensor & self, double mean, double std, Generator * generator) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto generator_ = check_generator<CUDAGenerator>(generator, &globalContext().defaultGenerator(device_type()));
    (void) generator_; //silence unused warning
    THCudaTensor_logNormal(globalContext().getTHCState(), self_, mean, std);
    return self;
}
Tensor & CUDAFloatType::_th_exponential_(Tensor & self, double lambd, Generator * generator) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto generator_ = check_generator<CUDAGenerator>(generator, &globalContext().defaultGenerator(device_type()));
    (void) generator_; //silence unused warning
    THCudaTensor_exponential(globalContext().getTHCState(), self_, lambd);
    return self;
}
Tensor & CUDAFloatType::_th_geometric_(Tensor & self, double p, Generator * generator) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto generator_ = check_generator<CUDAGenerator>(generator, &globalContext().defaultGenerator(device_type()));
    (void) generator_; //silence unused warning
    THCudaTensor_geometric(globalContext().getTHCState(), self_, p);
    return self;
}
Tensor CUDAFloatType::_th_alias(const Tensor & self) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    return Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim((THCudaTensor_newWithTensor(globalContext().getTHCState(), self_))->maybe_zero_dim(self_->dim() == 0)));
}
Tensor & CUDAFloatType::_th_copy_ignoring_overlaps_(Tensor & self, const Tensor & src) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto src_ = checked_tensor_unwrap(src,"src",2, false, Backend::CUDA, ScalarType::Float);
    THCudaTensor_copyIgnoringOverlaps(globalContext().getTHCState(), self_, src_);
    return self;
}
Tensor & CUDAFloatType::_th_cat_out(Tensor & self, TensorList tensors, int64_t dim) const {
    // DeviceGuard omitted
    auto self_ = checked_tensor_unwrap(self,"self",0, false, Backend::CUDA, ScalarType::Float);
    auto tensors_ = checked_tensor_list_unwrap(tensors,"tensors",1, Backend::CUDA, ScalarType::Float);
    THCudaTensor_catArray(globalContext().getTHCState(), self_, tensors_.data(), tensors_.size(), dim);
    return self;
}
Tensor CUDAFloatType::_th_cat(TensorList tensors, int64_t dim) const {
    // DeviceGuard omitted
    auto self_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto self = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(self_));
    auto tensors_ = checked_tensor_list_unwrap(tensors,"tensors",1, Backend::CUDA, ScalarType::Float);
    THCudaTensor_catArray(globalContext().getTHCState(), self_, tensors_.data(), tensors_.size(), dim);
    return self;
}
Tensor & CUDAFloatType::_thnn_binary_cross_entropy_forward_out(Tensor & output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CUDA, ScalarType::Float);
    auto weight_ = checked_tensor_unwrap(weight,"weight",3, true, Backend::CUDA, ScalarType::Float);
    auto output_ = checked_tensor_unwrap(output,"output",4, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaBCECriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction, weight_ ? weight_ : NULL);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor CUDAFloatType::_thnn_binary_cross_entropy_forward(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CUDA, ScalarType::Float);
    auto weight_ = checked_tensor_unwrap(weight,"weight",3, true, Backend::CUDA, ScalarType::Float);
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    THNN_CudaBCECriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction, weight_ ? weight_ : NULL);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor & CUDAFloatType::_thnn_binary_cross_entropy_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CUDA, ScalarType::Float);
    auto weight_ = checked_tensor_unwrap(weight,"weight",4, true, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",5, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaBCECriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction, weight_ ? weight_ : NULL);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor CUDAFloatType::_thnn_binary_cross_entropy_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CUDA, ScalarType::Float);
    auto weight_ = checked_tensor_unwrap(weight,"weight",4, true, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
    THNN_CudaBCECriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction, weight_ ? weight_ : NULL);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor & CUDAFloatType::_thnn_l1_loss_forward_out(Tensor & output, const Tensor & self, const Tensor & target, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CUDA, ScalarType::Float);
    auto output_ = checked_tensor_unwrap(output,"output",3, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaAbsCriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor CUDAFloatType::_thnn_l1_loss_forward(const Tensor & self, const Tensor & target, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CUDA, ScalarType::Float);
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    THNN_CudaAbsCriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor & CUDAFloatType::_thnn_l1_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",4, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaAbsCriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor CUDAFloatType::_thnn_l1_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
    THNN_CudaAbsCriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor & CUDAFloatType::_thnn_mse_loss_forward_out(Tensor & output, const Tensor & self, const Tensor & target, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CUDA, ScalarType::Float);
    auto output_ = checked_tensor_unwrap(output,"output",3, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaMSECriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor CUDAFloatType::_thnn_mse_loss_forward(const Tensor & self, const Tensor & target, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CUDA, ScalarType::Float);
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    THNN_CudaMSECriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor & CUDAFloatType::_thnn_mse_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",4, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaMSECriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor CUDAFloatType::_thnn_mse_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
    THNN_CudaMSECriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor & CUDAFloatType::_thnn_multi_margin_loss_forward_out(Tensor & output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CUDA, ScalarType::Long);
    auto p_ = p.toDouble();
    auto margin_ = margin.toDouble();
    auto weight_ = checked_tensor_unwrap(weight,"weight",5, true, Backend::CUDA, ScalarType::Float);
    auto output_ = checked_tensor_unwrap(output,"output",6, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaMultiMarginCriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction, p_, weight_ ? weight_ : NULL, margin_);
    output_->maybe_zero_dim(reduction != Reduction::None || self_->dim() == 0 || (reduction == Reduction::None && self_->dim() == 1));
    return output;
}
Tensor CUDAFloatType::_thnn_multi_margin_loss_forward(const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CUDA, ScalarType::Long);
    auto p_ = p.toDouble();
    auto margin_ = margin.toDouble();
    auto weight_ = checked_tensor_unwrap(weight,"weight",5, true, Backend::CUDA, ScalarType::Float);
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    THNN_CudaMultiMarginCriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction, p_, weight_ ? weight_ : NULL, margin_);
    output_->maybe_zero_dim(reduction != Reduction::None || self_->dim() == 0 || (reduction == Reduction::None && self_->dim() == 1));
    return output;
}
Tensor & CUDAFloatType::_thnn_multi_margin_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CUDA, ScalarType::Long);
    auto p_ = p.toDouble();
    auto margin_ = margin.toDouble();
    auto weight_ = checked_tensor_unwrap(weight,"weight",6, true, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",7, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaMultiMarginCriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction, p_, weight_ ? weight_ : NULL, margin_);
    grad_input_->maybe_zero_dim(self_->dim() == 0);
    return grad_input;
}
Tensor CUDAFloatType::_thnn_multi_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CUDA, ScalarType::Long);
    auto p_ = p.toDouble();
    auto margin_ = margin.toDouble();
    auto weight_ = checked_tensor_unwrap(weight,"weight",6, true, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
    THNN_CudaMultiMarginCriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction, p_, weight_ ? weight_ : NULL, margin_);
    grad_input_->maybe_zero_dim(self_->dim() == 0);
    return grad_input;
}
std::tuple<Tensor &,Tensor &> CUDAFloatType::_thnn_multilabel_margin_loss_forward_out(Tensor & output, Tensor & is_target, const Tensor & self, const Tensor & target, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CUDA, ScalarType::Long);
    auto output_ = checked_tensor_unwrap(output,"output",3, false, Backend::CUDA, ScalarType::Float);
    auto is_target_ = checked_tensor_unwrap(is_target,"is_target",3, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaMultiLabelMarginCriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, is_target_, reduction);
    output_->maybe_zero_dim(reduction != Reduction::None || self_->dim() == 0);
    is_target_->maybe_zero_dim(target_->dim() == 0);
    return std::tuple<Tensor &, Tensor &>(output, is_target);
}
std::tuple<Tensor,Tensor> CUDAFloatType::_thnn_multilabel_margin_loss_forward(const Tensor & self, const Tensor & target, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CUDA, ScalarType::Long);
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    auto is_target_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto is_target = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(is_target_));
    THNN_CudaMultiLabelMarginCriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, is_target_, reduction);
    output_->maybe_zero_dim(reduction != Reduction::None || self_->dim() == 0);
    is_target_->maybe_zero_dim(target_->dim() == 0);
    return std::tuple<Tensor, Tensor>(output, is_target);
}
Tensor & CUDAFloatType::_thnn_multilabel_margin_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, const Tensor & is_target) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CUDA, ScalarType::Long);
    auto is_target_ = checked_tensor_unwrap(is_target,"is_target",5, false, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",5, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaMultiLabelMarginCriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, is_target_, reduction);
    grad_input_->maybe_zero_dim(self_->dim() == 0);
    return grad_input;
}
Tensor CUDAFloatType::_thnn_multilabel_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, const Tensor & is_target) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CUDA, ScalarType::Long);
    auto is_target_ = checked_tensor_unwrap(is_target,"is_target",5, false, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
    THNN_CudaMultiLabelMarginCriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, is_target_, reduction);
    grad_input_->maybe_zero_dim(self_->dim() == 0);
    return grad_input;
}
std::tuple<Tensor &,Tensor &> CUDAFloatType::_thnn_nll_loss_forward_out(Tensor & output, Tensor & total_weight, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CUDA, ScalarType::Long);
    auto weight_ = checked_tensor_unwrap(weight,"weight",3, true, Backend::CUDA, ScalarType::Float);
    auto output_ = checked_tensor_unwrap(output,"output",5, false, Backend::CUDA, ScalarType::Float);
    auto total_weight_ = checked_tensor_unwrap(total_weight,"total_weight",5, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaClassNLLCriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction, weight_ ? weight_ : NULL, total_weight_, ignore_index);
    output_->maybe_zero_dim(reduction != Reduction::None || self_->dim() == 0);
    total_weight_->maybe_zero_dim(true);
    return std::tuple<Tensor &, Tensor &>(output, total_weight);
}
std::tuple<Tensor,Tensor> CUDAFloatType::_thnn_nll_loss_forward(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CUDA, ScalarType::Long);
    auto weight_ = checked_tensor_unwrap(weight,"weight",3, true, Backend::CUDA, ScalarType::Float);
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    auto total_weight_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto total_weight = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(total_weight_));
    THNN_CudaClassNLLCriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction, weight_ ? weight_ : NULL, total_weight_, ignore_index);
    output_->maybe_zero_dim(reduction != Reduction::None || self_->dim() == 0);
    total_weight_->maybe_zero_dim(true);
    return std::tuple<Tensor, Tensor>(output, total_weight);
}
Tensor & CUDAFloatType::_thnn_nll_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CUDA, ScalarType::Long);
    auto weight_ = checked_tensor_unwrap(weight,"weight",4, true, Backend::CUDA, ScalarType::Float);
    auto total_weight_ = checked_tensor_unwrap(total_weight,"total_weight",7, false, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",7, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaClassNLLCriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction, weight_ ? weight_ : NULL, total_weight_, ignore_index);
    grad_input_->maybe_zero_dim(self_->dim() == 0);
    return grad_input;
}
Tensor CUDAFloatType::_thnn_nll_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CUDA, ScalarType::Long);
    auto weight_ = checked_tensor_unwrap(weight,"weight",4, true, Backend::CUDA, ScalarType::Float);
    auto total_weight_ = checked_tensor_unwrap(total_weight,"total_weight",7, false, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
    THNN_CudaClassNLLCriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction, weight_ ? weight_ : NULL, total_weight_, ignore_index);
    grad_input_->maybe_zero_dim(self_->dim() == 0);
    return grad_input;
}
std::tuple<Tensor &,Tensor &> CUDAFloatType::_thnn_nll_loss2d_forward_out(Tensor & output, Tensor & total_weight, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CUDA, ScalarType::Long);
    auto weight_ = checked_tensor_unwrap(weight,"weight",3, true, Backend::CUDA, ScalarType::Float);
    auto output_ = checked_tensor_unwrap(output,"output",5, false, Backend::CUDA, ScalarType::Float);
    auto total_weight_ = checked_tensor_unwrap(total_weight,"total_weight",5, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaSpatialClassNLLCriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction, weight_ ? weight_ : NULL, total_weight_, ignore_index);
    output_->maybe_zero_dim(reduction != Reduction::None || self_->dim() == 0);
    total_weight_->maybe_zero_dim(true);
    return std::tuple<Tensor &, Tensor &>(output, total_weight);
}
std::tuple<Tensor,Tensor> CUDAFloatType::_thnn_nll_loss2d_forward(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CUDA, ScalarType::Long);
    auto weight_ = checked_tensor_unwrap(weight,"weight",3, true, Backend::CUDA, ScalarType::Float);
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    auto total_weight_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto total_weight = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(total_weight_));
    THNN_CudaSpatialClassNLLCriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction, weight_ ? weight_ : NULL, total_weight_, ignore_index);
    output_->maybe_zero_dim(reduction != Reduction::None || self_->dim() == 0);
    total_weight_->maybe_zero_dim(true);
    return std::tuple<Tensor, Tensor>(output, total_weight);
}
Tensor & CUDAFloatType::_thnn_nll_loss2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CUDA, ScalarType::Long);
    auto weight_ = checked_tensor_unwrap(weight,"weight",4, true, Backend::CUDA, ScalarType::Float);
    auto total_weight_ = checked_tensor_unwrap(total_weight,"total_weight",7, false, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",7, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaSpatialClassNLLCriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction, weight_ ? weight_ : NULL, total_weight_, ignore_index);
    grad_input_->maybe_zero_dim(self_->dim() == 0);
    return grad_input;
}
Tensor CUDAFloatType::_thnn_nll_loss2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CUDA, ScalarType::Long);
    auto weight_ = checked_tensor_unwrap(weight,"weight",4, true, Backend::CUDA, ScalarType::Float);
    auto total_weight_ = checked_tensor_unwrap(total_weight,"total_weight",7, false, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
    THNN_CudaSpatialClassNLLCriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction, weight_ ? weight_ : NULL, total_weight_, ignore_index);
    grad_input_->maybe_zero_dim(self_->dim() == 0);
    return grad_input;
}
Tensor & CUDAFloatType::_thnn_smooth_l1_loss_forward_out(Tensor & output, const Tensor & self, const Tensor & target, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CUDA, ScalarType::Float);
    auto output_ = checked_tensor_unwrap(output,"output",3, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaSmoothL1Criterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor CUDAFloatType::_thnn_smooth_l1_loss_forward(const Tensor & self, const Tensor & target, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CUDA, ScalarType::Float);
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    THNN_CudaSmoothL1Criterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor & CUDAFloatType::_thnn_smooth_l1_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",4, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaSmoothL1Criterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor CUDAFloatType::_thnn_smooth_l1_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
    THNN_CudaSmoothL1Criterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor & CUDAFloatType::_thnn_soft_margin_loss_forward_out(Tensor & output, const Tensor & self, const Tensor & target, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CUDA, ScalarType::Float);
    auto output_ = checked_tensor_unwrap(output,"output",3, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaSoftMarginCriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor CUDAFloatType::_thnn_soft_margin_loss_forward(const Tensor & self, const Tensor & target, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CUDA, ScalarType::Float);
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    THNN_CudaSoftMarginCriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor & CUDAFloatType::_thnn_soft_margin_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",4, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaSoftMarginCriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor CUDAFloatType::_thnn_soft_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
    THNN_CudaSoftMarginCriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor & CUDAFloatType::_thnn_elu_forward_out(Tensor & output, const Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto alpha_ = alpha.toDouble();
    auto scale_ = scale.toDouble();
    auto input_scale_ = input_scale.toDouble();
    auto output_ = checked_tensor_unwrap(output,"output",4, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaELU_updateOutput(globalContext().getTHCState(), self_, output_, alpha_, scale_, input_scale_, false);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor CUDAFloatType::_thnn_elu_forward(const Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto alpha_ = alpha.toDouble();
    auto scale_ = scale.toDouble();
    auto input_scale_ = input_scale.toDouble();
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    THNN_CudaELU_updateOutput(globalContext().getTHCState(), self_, output_, alpha_, scale_, input_scale_, false);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor & CUDAFloatType::_thnn_elu_backward_out(Tensor & grad_input, const Tensor & grad_output, Scalar alpha, Scalar scale, Scalar input_scale, const Tensor & output) const {
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto alpha_ = alpha.toDouble();
    auto scale_ = scale.toDouble();
    auto input_scale_ = input_scale.toDouble();
    auto output_ = checked_tensor_unwrap(output,"output",5, false, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",5, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaELU_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, output_, alpha_, scale_, input_scale_);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor CUDAFloatType::_thnn_elu_backward(const Tensor & grad_output, Scalar alpha, Scalar scale, Scalar input_scale, const Tensor & output) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto alpha_ = alpha.toDouble();
    auto scale_ = scale.toDouble();
    auto input_scale_ = input_scale.toDouble();
    auto output_ = checked_tensor_unwrap(output,"output",5, false, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
    THNN_CudaELU_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, output_, alpha_, scale_, input_scale_);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor & CUDAFloatType::_thnn_elu_forward_(Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto alpha_ = alpha.toDouble();
    auto scale_ = scale.toDouble();
    auto input_scale_ = input_scale.toDouble();
    THNN_CudaELU_updateOutput(globalContext().getTHCState(), self_, self_, alpha_, scale_, input_scale_, true);
    return self;
}
Tensor & CUDAFloatType::_thnn_glu_forward_out(Tensor & output, const Tensor & self, int64_t dim) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    dim = maybe_wrap_dim(dim, self_);
    auto output_ = checked_tensor_unwrap(output,"output",2, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaGatedLinear_updateOutput(globalContext().getTHCState(), self_, output_, dim);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor CUDAFloatType::_thnn_glu_forward(const Tensor & self, int64_t dim) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    dim = maybe_wrap_dim(dim, self_);
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    THNN_CudaGatedLinear_updateOutput(globalContext().getTHCState(), self_, output_, dim);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor & CUDAFloatType::_thnn_glu_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, int64_t dim) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    dim = maybe_wrap_dim(dim, self_);
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",3, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaGatedLinear_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, dim);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor CUDAFloatType::_thnn_glu_backward(const Tensor & grad_output, const Tensor & self, int64_t dim) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    dim = maybe_wrap_dim(dim, self_);
    auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
    THNN_CudaGatedLinear_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, dim);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor & CUDAFloatType::_thnn_hardtanh_forward_out(Tensor & output, const Tensor & self, Scalar min_val, Scalar max_val) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto min_val_ = min_val.toDouble();
    auto max_val_ = max_val.toDouble();
    auto output_ = checked_tensor_unwrap(output,"output",3, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaHardTanh_updateOutput(globalContext().getTHCState(), self_, output_, min_val_, max_val_, false);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor CUDAFloatType::_thnn_hardtanh_forward(const Tensor & self, Scalar min_val, Scalar max_val) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto min_val_ = min_val.toDouble();
    auto max_val_ = max_val.toDouble();
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    THNN_CudaHardTanh_updateOutput(globalContext().getTHCState(), self_, output_, min_val_, max_val_, false);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor & CUDAFloatType::_thnn_hardtanh_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar min_val, Scalar max_val) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto min_val_ = min_val.toDouble();
    auto max_val_ = max_val.toDouble();
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",4, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaHardTanh_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, min_val_, max_val_, false);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor CUDAFloatType::_thnn_hardtanh_backward(const Tensor & grad_output, const Tensor & self, Scalar min_val, Scalar max_val) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto min_val_ = min_val.toDouble();
    auto max_val_ = max_val.toDouble();
    auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
    THNN_CudaHardTanh_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, min_val_, max_val_, false);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor & CUDAFloatType::_thnn_hardtanh_forward_(Tensor & self, Scalar min_val, Scalar max_val) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto min_val_ = min_val.toDouble();
    auto max_val_ = max_val.toDouble();
    THNN_CudaHardTanh_updateOutput(globalContext().getTHCState(), self_, self_, min_val_, max_val_, true);
    return self;
}
Tensor & CUDAFloatType::_thnn_leaky_relu_forward_out(Tensor & output, const Tensor & self, Scalar negative_slope) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto negative_slope_ = negative_slope.toDouble();
    auto output_ = checked_tensor_unwrap(output,"output",2, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaLeakyReLU_updateOutput(globalContext().getTHCState(), self_, output_, negative_slope_, false);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor CUDAFloatType::_thnn_leaky_relu_forward(const Tensor & self, Scalar negative_slope) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto negative_slope_ = negative_slope.toDouble();
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    THNN_CudaLeakyReLU_updateOutput(globalContext().getTHCState(), self_, output_, negative_slope_, false);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor & CUDAFloatType::_thnn_leaky_relu_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar negative_slope) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto negative_slope_ = negative_slope.toDouble();
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",3, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaLeakyReLU_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, negative_slope_, false);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor CUDAFloatType::_thnn_leaky_relu_backward(const Tensor & grad_output, const Tensor & self, Scalar negative_slope) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto negative_slope_ = negative_slope.toDouble();
    auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
    THNN_CudaLeakyReLU_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, negative_slope_, false);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor & CUDAFloatType::_thnn_leaky_relu_forward_(Tensor & self, Scalar negative_slope) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto negative_slope_ = negative_slope.toDouble();
    THNN_CudaLeakyReLU_updateOutput(globalContext().getTHCState(), self_, self_, negative_slope_, true);
    return self;
}
std::tuple<Tensor &,Tensor &> CUDAFloatType::_thnn_log_sigmoid_forward_out(Tensor & output, Tensor & buffer, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto output_ = checked_tensor_unwrap(output,"output",1, false, Backend::CUDA, ScalarType::Float);
    auto buffer_ = checked_tensor_unwrap(buffer,"buffer",1, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaLogSigmoid_updateOutput(globalContext().getTHCState(), self_, output_, buffer_);
    output_->maybe_zero_dim(false);
    buffer_->maybe_zero_dim(false);
    return std::tuple<Tensor &, Tensor &>(output, buffer);
}
std::tuple<Tensor,Tensor> CUDAFloatType::_thnn_log_sigmoid_forward(const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    auto buffer_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto buffer = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(buffer_));
    THNN_CudaLogSigmoid_updateOutput(globalContext().getTHCState(), self_, output_, buffer_);
    output_->maybe_zero_dim(false);
    buffer_->maybe_zero_dim(false);
    return std::tuple<Tensor, Tensor>(output, buffer);
}
Tensor & CUDAFloatType::_thnn_log_sigmoid_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & buffer) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto buffer_ = checked_tensor_unwrap(buffer,"buffer",3, false, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",3, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaLogSigmoid_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, buffer_);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor CUDAFloatType::_thnn_log_sigmoid_backward(const Tensor & grad_output, const Tensor & self, const Tensor & buffer) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto buffer_ = checked_tensor_unwrap(buffer,"buffer",3, false, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
    THNN_CudaLogSigmoid_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, buffer_);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor & CUDAFloatType::_thnn_rrelu_with_noise_forward_out(Tensor & output, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, Generator * generator) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto noise_ = checked_tensor_unwrap(noise,"noise",2, false, Backend::CUDA, ScalarType::Float);
    auto lower_ = lower.toDouble();
    auto upper_ = upper.toDouble();
    auto generator_ = check_generator<CUDAGenerator>(generator, &globalContext().defaultGenerator(device_type()));
    (void) generator_; //silence unused warning
    auto output_ = checked_tensor_unwrap(output,"output",6, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaRReLU_updateOutput(globalContext().getTHCState(), self_, output_, noise_, lower_, upper_, training, false, NULL);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor CUDAFloatType::_thnn_rrelu_with_noise_forward(const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, Generator * generator) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto noise_ = checked_tensor_unwrap(noise,"noise",2, false, Backend::CUDA, ScalarType::Float);
    auto lower_ = lower.toDouble();
    auto upper_ = upper.toDouble();
    auto generator_ = check_generator<CUDAGenerator>(generator, &globalContext().defaultGenerator(device_type()));
    (void) generator_; //silence unused warning
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    THNN_CudaRReLU_updateOutput(globalContext().getTHCState(), self_, output_, noise_, lower_, upper_, training, false, NULL);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor & CUDAFloatType::_thnn_rrelu_with_noise_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto noise_ = checked_tensor_unwrap(noise,"noise",3, false, Backend::CUDA, ScalarType::Float);
    auto lower_ = lower.toDouble();
    auto upper_ = upper.toDouble();
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",6, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaRReLU_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, noise_, lower_, upper_, training, false);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor CUDAFloatType::_thnn_rrelu_with_noise_backward(const Tensor & grad_output, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto noise_ = checked_tensor_unwrap(noise,"noise",3, false, Backend::CUDA, ScalarType::Float);
    auto lower_ = lower.toDouble();
    auto upper_ = upper.toDouble();
    auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
    THNN_CudaRReLU_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, noise_, lower_, upper_, training, false);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor & CUDAFloatType::_thnn_rrelu_with_noise_forward_(Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, Generator * generator) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto noise_ = checked_tensor_unwrap(noise,"noise",2, false, Backend::CUDA, ScalarType::Float);
    auto lower_ = lower.toDouble();
    auto upper_ = upper.toDouble();
    auto generator_ = check_generator<CUDAGenerator>(generator, &globalContext().defaultGenerator(device_type()));
    (void) generator_; //silence unused warning
    THNN_CudaRReLU_updateOutput(globalContext().getTHCState(), self_, self_, noise_, lower_, upper_, training, true, NULL);
    return self;
}
Tensor & CUDAFloatType::_thnn_softplus_forward_out(Tensor & output, const Tensor & self, Scalar beta, Scalar threshold) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto beta_ = beta.toDouble();
    auto threshold_ = threshold.toDouble();
    auto output_ = checked_tensor_unwrap(output,"output",3, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaSoftPlus_updateOutput(globalContext().getTHCState(), self_, output_, beta_, threshold_);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor CUDAFloatType::_thnn_softplus_forward(const Tensor & self, Scalar beta, Scalar threshold) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto beta_ = beta.toDouble();
    auto threshold_ = threshold.toDouble();
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    THNN_CudaSoftPlus_updateOutput(globalContext().getTHCState(), self_, output_, beta_, threshold_);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor & CUDAFloatType::_thnn_softplus_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar beta, Scalar threshold, const Tensor & output) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto beta_ = beta.toDouble();
    auto threshold_ = threshold.toDouble();
    auto output_ = checked_tensor_unwrap(output,"output",5, false, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",5, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaSoftPlus_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, output_, beta_, threshold_);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor CUDAFloatType::_thnn_softplus_backward(const Tensor & grad_output, const Tensor & self, Scalar beta, Scalar threshold, const Tensor & output) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto beta_ = beta.toDouble();
    auto threshold_ = threshold.toDouble();
    auto output_ = checked_tensor_unwrap(output,"output",5, false, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
    THNN_CudaSoftPlus_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, output_, beta_, threshold_);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor & CUDAFloatType::_thnn_softshrink_forward_out(Tensor & output, const Tensor & self, Scalar lambd) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto lambd_ = lambd.toDouble();
    auto output_ = checked_tensor_unwrap(output,"output",2, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaSoftShrink_updateOutput(globalContext().getTHCState(), self_, output_, lambd_);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor CUDAFloatType::_thnn_softshrink_forward(const Tensor & self, Scalar lambd) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto lambd_ = lambd.toDouble();
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    THNN_CudaSoftShrink_updateOutput(globalContext().getTHCState(), self_, output_, lambd_);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor & CUDAFloatType::_thnn_softshrink_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar lambd) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto lambd_ = lambd.toDouble();
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",3, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaSoftShrink_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, lambd_);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor CUDAFloatType::_thnn_softshrink_backward(const Tensor & grad_output, const Tensor & self, Scalar lambd) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto lambd_ = lambd.toDouble();
    auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
    THNN_CudaSoftShrink_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, lambd_);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor & CUDAFloatType::_thnn_adaptive_avg_pool3d_forward_out(Tensor & output, const Tensor & self, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto output_size_ = check_intlist<3>(output_size, "output_size", 2);
    auto output_ = checked_tensor_unwrap(output,"output",2, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaVolumetricAdaptiveAveragePooling_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[2], output_size_[1]);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor CUDAFloatType::_thnn_adaptive_avg_pool3d_forward(const Tensor & self, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto output_size_ = check_intlist<3>(output_size, "output_size", 2);
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    THNN_CudaVolumetricAdaptiveAveragePooling_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[2], output_size_[1]);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor & CUDAFloatType::_thnn_adaptive_avg_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",2, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaVolumetricAdaptiveAveragePooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor CUDAFloatType::_thnn_adaptive_avg_pool3d_backward(const Tensor & grad_output, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
    THNN_CudaVolumetricAdaptiveAveragePooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
std::tuple<Tensor &,Tensor &> CUDAFloatType::_thnn_adaptive_max_pool2d_forward_out(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
    auto output_ = checked_tensor_unwrap(output,"output",2, false, Backend::CUDA, ScalarType::Float);
    auto indices_ = checked_tensor_unwrap(indices,"indices",2, false, Backend::CUDA, ScalarType::Long);
    THNN_CudaSpatialAdaptiveMaxPooling_updateOutput(globalContext().getTHCState(), self_, output_, indices_, output_size_[1], output_size_[0]);
    output_->maybe_zero_dim(false);
    return std::tuple<Tensor &, Tensor &>(output, indices);
}
std::tuple<Tensor,Tensor> CUDAFloatType::_thnn_adaptive_max_pool2d_forward(const Tensor & self, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    auto indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), scalarTypeToTypeMeta(ScalarType::Long), allocator(), false).release();
    auto indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(indices_));
    THNN_CudaSpatialAdaptiveMaxPooling_updateOutput(globalContext().getTHCState(), self_, output_, indices_, output_size_[1], output_size_[0]);
    output_->maybe_zero_dim(false);
    return std::tuple<Tensor, Tensor>(output, indices);
}
Tensor & CUDAFloatType::_thnn_adaptive_max_pool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto indices_ = checked_tensor_unwrap(indices,"indices",3, false, Backend::CUDA, ScalarType::Long);
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",3, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaSpatialAdaptiveMaxPooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, indices_);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor CUDAFloatType::_thnn_adaptive_max_pool2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto indices_ = checked_tensor_unwrap(indices,"indices",3, false, Backend::CUDA, ScalarType::Long);
    auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
    THNN_CudaSpatialAdaptiveMaxPooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, indices_);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
std::tuple<Tensor &,Tensor &> CUDAFloatType::_thnn_adaptive_max_pool3d_forward_out(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto output_size_ = check_intlist<3>(output_size, "output_size", 2);
    auto output_ = checked_tensor_unwrap(output,"output",2, false, Backend::CUDA, ScalarType::Float);
    auto indices_ = checked_tensor_unwrap(indices,"indices",2, false, Backend::CUDA, ScalarType::Long);
    THNN_CudaVolumetricAdaptiveMaxPooling_updateOutput(globalContext().getTHCState(), self_, output_, indices_, output_size_[0], output_size_[2], output_size_[1]);
    output_->maybe_zero_dim(false);
    return std::tuple<Tensor &, Tensor &>(output, indices);
}
std::tuple<Tensor,Tensor> CUDAFloatType::_thnn_adaptive_max_pool3d_forward(const Tensor & self, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto output_size_ = check_intlist<3>(output_size, "output_size", 2);
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    auto indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), scalarTypeToTypeMeta(ScalarType::Long), allocator(), false).release();
    auto indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(indices_));
    THNN_CudaVolumetricAdaptiveMaxPooling_updateOutput(globalContext().getTHCState(), self_, output_, indices_, output_size_[0], output_size_[2], output_size_[1]);
    output_->maybe_zero_dim(false);
    return std::tuple<Tensor, Tensor>(output, indices);
}
Tensor & CUDAFloatType::_thnn_adaptive_max_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto indices_ = checked_tensor_unwrap(indices,"indices",3, false, Backend::CUDA, ScalarType::Long);
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",3, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaVolumetricAdaptiveMaxPooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, indices_);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor CUDAFloatType::_thnn_adaptive_max_pool3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto indices_ = checked_tensor_unwrap(indices,"indices",3, false, Backend::CUDA, ScalarType::Long);
    auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
    THNN_CudaVolumetricAdaptiveMaxPooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, indices_);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor & CUDAFloatType::_thnn_avg_pool2d_forward_out(Tensor & output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 2);
    auto stride_ = check_intlist<2>(stride, "stride", 3, kernel_size);
    auto padding_ = check_intlist<2>(padding, "padding", 4);
    auto output_ = checked_tensor_unwrap(output,"output",6, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaSpatialAveragePooling_updateOutput(globalContext().getTHCState(), self_, output_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], ceil_mode, count_include_pad);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor CUDAFloatType::_thnn_avg_pool2d_forward(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 2);
    auto stride_ = check_intlist<2>(stride, "stride", 3, kernel_size);
    auto padding_ = check_intlist<2>(padding, "padding", 4);
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    THNN_CudaSpatialAveragePooling_updateOutput(globalContext().getTHCState(), self_, output_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], ceil_mode, count_include_pad);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor & CUDAFloatType::_thnn_avg_pool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
    auto stride_ = check_intlist<2>(stride, "stride", 4, kernel_size);
    auto padding_ = check_intlist<2>(padding, "padding", 5);
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",7, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaSpatialAveragePooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], ceil_mode, count_include_pad);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor CUDAFloatType::_thnn_avg_pool2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
    auto stride_ = check_intlist<2>(stride, "stride", 4, kernel_size);
    auto padding_ = check_intlist<2>(padding, "padding", 5);
    auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
    THNN_CudaSpatialAveragePooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], ceil_mode, count_include_pad);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor & CUDAFloatType::_thnn_avg_pool3d_forward_out(Tensor & output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 2);
    auto stride_ = check_intlist<3>(stride, "stride", 3, kernel_size);
    auto padding_ = check_intlist<3>(padding, "padding", 4);
    auto output_ = checked_tensor_unwrap(output,"output",6, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaVolumetricAveragePooling_updateOutput(globalContext().getTHCState(), self_, output_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], ceil_mode, count_include_pad);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor CUDAFloatType::_thnn_avg_pool3d_forward(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 2);
    auto stride_ = check_intlist<3>(stride, "stride", 3, kernel_size);
    auto padding_ = check_intlist<3>(padding, "padding", 4);
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    THNN_CudaVolumetricAveragePooling_updateOutput(globalContext().getTHCState(), self_, output_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], ceil_mode, count_include_pad);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor & CUDAFloatType::_thnn_avg_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 3);
    auto stride_ = check_intlist<3>(stride, "stride", 4, kernel_size);
    auto padding_ = check_intlist<3>(padding, "padding", 5);
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",7, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaVolumetricAveragePooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], ceil_mode, count_include_pad);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor CUDAFloatType::_thnn_avg_pool3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 3);
    auto stride_ = check_intlist<3>(stride, "stride", 4, kernel_size);
    auto padding_ = check_intlist<3>(padding, "padding", 5);
    auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
    THNN_CudaVolumetricAveragePooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], ceil_mode, count_include_pad);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
std::tuple<Tensor &,Tensor &> CUDAFloatType::_thnn_max_pool2d_with_indices_forward_out(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 2);
    auto stride_ = check_intlist<2>(stride, "stride", 3, kernel_size);
    auto padding_ = check_intlist<2>(padding, "padding", 4);
    auto dilation_ = check_intlist<2>(dilation, "dilation", 5);
    auto output_ = checked_tensor_unwrap(output,"output",6, false, Backend::CUDA, ScalarType::Float);
    auto indices_ = checked_tensor_unwrap(indices,"indices",6, false, Backend::CUDA, ScalarType::Long);
    THNN_CudaSpatialDilatedMaxPooling_updateOutput(globalContext().getTHCState(), self_, output_, indices_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0], ceil_mode);
    output_->maybe_zero_dim(false);
    return std::tuple<Tensor &, Tensor &>(output, indices);
}
std::tuple<Tensor,Tensor> CUDAFloatType::_thnn_max_pool2d_with_indices_forward(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 2);
    auto stride_ = check_intlist<2>(stride, "stride", 3, kernel_size);
    auto padding_ = check_intlist<2>(padding, "padding", 4);
    auto dilation_ = check_intlist<2>(dilation, "dilation", 5);
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    auto indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), scalarTypeToTypeMeta(ScalarType::Long), allocator(), false).release();
    auto indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(indices_));
    THNN_CudaSpatialDilatedMaxPooling_updateOutput(globalContext().getTHCState(), self_, output_, indices_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0], ceil_mode);
    output_->maybe_zero_dim(false);
    return std::tuple<Tensor, Tensor>(output, indices);
}
Tensor & CUDAFloatType::_thnn_max_pool2d_with_indices_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
    auto stride_ = check_intlist<2>(stride, "stride", 4, kernel_size);
    auto padding_ = check_intlist<2>(padding, "padding", 5);
    auto dilation_ = check_intlist<2>(dilation, "dilation", 6);
    auto indices_ = checked_tensor_unwrap(indices,"indices",8, false, Backend::CUDA, ScalarType::Long);
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",8, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaSpatialDilatedMaxPooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, indices_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0], ceil_mode);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor CUDAFloatType::_thnn_max_pool2d_with_indices_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
    auto stride_ = check_intlist<2>(stride, "stride", 4, kernel_size);
    auto padding_ = check_intlist<2>(padding, "padding", 5);
    auto dilation_ = check_intlist<2>(dilation, "dilation", 6);
    auto indices_ = checked_tensor_unwrap(indices,"indices",8, false, Backend::CUDA, ScalarType::Long);
    auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
    THNN_CudaSpatialDilatedMaxPooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, indices_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0], ceil_mode);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
std::tuple<Tensor &,Tensor &> CUDAFloatType::_thnn_max_pool3d_with_indices_forward_out(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 2);
    auto stride_ = check_intlist<3>(stride, "stride", 3, kernel_size);
    auto padding_ = check_intlist<3>(padding, "padding", 4);
    auto dilation_ = check_intlist<3>(dilation, "dilation", 5);
    auto output_ = checked_tensor_unwrap(output,"output",6, false, Backend::CUDA, ScalarType::Float);
    auto indices_ = checked_tensor_unwrap(indices,"indices",6, false, Backend::CUDA, ScalarType::Long);
    THNN_CudaVolumetricDilatedMaxPooling_updateOutput(globalContext().getTHCState(), self_, output_, indices_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1], ceil_mode);
    output_->maybe_zero_dim(false);
    return std::tuple<Tensor &, Tensor &>(output, indices);
}
std::tuple<Tensor,Tensor> CUDAFloatType::_thnn_max_pool3d_with_indices_forward(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 2);
    auto stride_ = check_intlist<3>(stride, "stride", 3, kernel_size);
    auto padding_ = check_intlist<3>(padding, "padding", 4);
    auto dilation_ = check_intlist<3>(dilation, "dilation", 5);
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    auto indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), scalarTypeToTypeMeta(ScalarType::Long), allocator(), false).release();
    auto indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(indices_));
    THNN_CudaVolumetricDilatedMaxPooling_updateOutput(globalContext().getTHCState(), self_, output_, indices_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1], ceil_mode);
    output_->maybe_zero_dim(false);
    return std::tuple<Tensor, Tensor>(output, indices);
}
Tensor & CUDAFloatType::_thnn_max_pool3d_with_indices_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 3);
    auto stride_ = check_intlist<3>(stride, "stride", 4, kernel_size);
    auto padding_ = check_intlist<3>(padding, "padding", 5);
    auto dilation_ = check_intlist<3>(dilation, "dilation", 6);
    auto indices_ = checked_tensor_unwrap(indices,"indices",8, false, Backend::CUDA, ScalarType::Long);
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",8, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaVolumetricDilatedMaxPooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, indices_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1], ceil_mode);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor CUDAFloatType::_thnn_max_pool3d_with_indices_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 3);
    auto stride_ = check_intlist<3>(stride, "stride", 4, kernel_size);
    auto padding_ = check_intlist<3>(padding, "padding", 5);
    auto dilation_ = check_intlist<3>(dilation, "dilation", 6);
    auto indices_ = checked_tensor_unwrap(indices,"indices",8, false, Backend::CUDA, ScalarType::Long);
    auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
    THNN_CudaVolumetricDilatedMaxPooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, indices_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1], ceil_mode);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor & CUDAFloatType::_thnn_max_unpool2d_forward_out(Tensor & output, const Tensor & self, const Tensor & indices, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto indices_ = checked_tensor_unwrap(indices,"indices",2, false, Backend::CUDA, ScalarType::Long);
    auto output_size_ = check_intlist<2>(output_size, "output_size", 3);
    auto output_ = checked_tensor_unwrap(output,"output",3, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaSpatialMaxUnpooling_updateOutput(globalContext().getTHCState(), self_, output_, indices_, output_size_[1], output_size_[0]);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor CUDAFloatType::_thnn_max_unpool2d_forward(const Tensor & self, const Tensor & indices, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto indices_ = checked_tensor_unwrap(indices,"indices",2, false, Backend::CUDA, ScalarType::Long);
    auto output_size_ = check_intlist<2>(output_size, "output_size", 3);
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    THNN_CudaSpatialMaxUnpooling_updateOutput(globalContext().getTHCState(), self_, output_, indices_, output_size_[1], output_size_[0]);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor & CUDAFloatType::_thnn_max_unpool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto indices_ = checked_tensor_unwrap(indices,"indices",3, false, Backend::CUDA, ScalarType::Long);
    auto output_size_ = check_intlist<2>(output_size, "output_size", 4);
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",4, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaSpatialMaxUnpooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, indices_, output_size_[1], output_size_[0]);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor CUDAFloatType::_thnn_max_unpool2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto indices_ = checked_tensor_unwrap(indices,"indices",3, false, Backend::CUDA, ScalarType::Long);
    auto output_size_ = check_intlist<2>(output_size, "output_size", 4);
    auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
    THNN_CudaSpatialMaxUnpooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, indices_, output_size_[1], output_size_[0]);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor & CUDAFloatType::_thnn_max_unpool3d_forward_out(Tensor & output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto indices_ = checked_tensor_unwrap(indices,"indices",2, false, Backend::CUDA, ScalarType::Long);
    auto output_size_ = check_intlist<3>(output_size, "output_size", 3);
    auto stride_ = check_intlist<3>(stride, "stride", 4);
    auto padding_ = check_intlist<3>(padding, "padding", 5);
    auto output_ = checked_tensor_unwrap(output,"output",5, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaVolumetricMaxUnpooling_updateOutput(globalContext().getTHCState(), self_, output_, indices_, output_size_[0], output_size_[2], output_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1]);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor CUDAFloatType::_thnn_max_unpool3d_forward(const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto indices_ = checked_tensor_unwrap(indices,"indices",2, false, Backend::CUDA, ScalarType::Long);
    auto output_size_ = check_intlist<3>(output_size, "output_size", 3);
    auto stride_ = check_intlist<3>(stride, "stride", 4);
    auto padding_ = check_intlist<3>(padding, "padding", 5);
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    THNN_CudaVolumetricMaxUnpooling_updateOutput(globalContext().getTHCState(), self_, output_, indices_, output_size_[0], output_size_[2], output_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1]);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor & CUDAFloatType::_thnn_max_unpool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto indices_ = checked_tensor_unwrap(indices,"indices",3, false, Backend::CUDA, ScalarType::Long);
    auto output_size_ = check_intlist<3>(output_size, "output_size", 4);
    auto stride_ = check_intlist<3>(stride, "stride", 5);
    auto padding_ = check_intlist<3>(padding, "padding", 6);
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",6, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaVolumetricMaxUnpooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, indices_, output_size_[0], output_size_[2], output_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1]);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor CUDAFloatType::_thnn_max_unpool3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto indices_ = checked_tensor_unwrap(indices,"indices",3, false, Backend::CUDA, ScalarType::Long);
    auto output_size_ = check_intlist<3>(output_size, "output_size", 4);
    auto stride_ = check_intlist<3>(stride, "stride", 5);
    auto padding_ = check_intlist<3>(padding, "padding", 6);
    auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
    THNN_CudaVolumetricMaxUnpooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, indices_, output_size_[0], output_size_[2], output_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1]);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor & CUDAFloatType::_thnn_upsample_linear1d_forward_out(Tensor & output, const Tensor & self, IntArrayRef output_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto output_size_ = check_intlist<1>(output_size, "output_size", 2);
    auto output_ = checked_tensor_unwrap(output,"output",3, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaTemporalUpSamplingLinear_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], align_corners);
    return output;
}
Tensor CUDAFloatType::_thnn_upsample_linear1d_forward(const Tensor & self, IntArrayRef output_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto output_size_ = check_intlist<1>(output_size, "output_size", 2);
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    THNN_CudaTemporalUpSamplingLinear_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], align_corners);
    return output;
}
Tensor & CUDAFloatType::_thnn_upsample_linear1d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto output_size_ = check_intlist<1>(output_size, "output_size", 2);
    auto input_size_ = check_intlist<3>(input_size, "input_size", 3);
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",4, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaTemporalUpSamplingLinear_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], output_size_[0], align_corners);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor CUDAFloatType::_thnn_upsample_linear1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto output_size_ = check_intlist<1>(output_size, "output_size", 2);
    auto input_size_ = check_intlist<3>(input_size, "input_size", 3);
    auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
    THNN_CudaTemporalUpSamplingLinear_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], output_size_[0], align_corners);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor & CUDAFloatType::_thnn_upsample_bilinear2d_forward_out(Tensor & output, const Tensor & self, IntArrayRef output_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
    auto output_ = checked_tensor_unwrap(output,"output",3, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaSpatialUpSamplingBilinear_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[1], align_corners);
    return output;
}
Tensor CUDAFloatType::_thnn_upsample_bilinear2d_forward(const Tensor & self, IntArrayRef output_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    THNN_CudaSpatialUpSamplingBilinear_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[1], align_corners);
    return output;
}
Tensor & CUDAFloatType::_thnn_upsample_bilinear2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
    auto input_size_ = check_intlist<4>(input_size, "input_size", 3);
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",4, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaSpatialUpSamplingBilinear_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], input_size_[3], output_size_[0], output_size_[1], align_corners);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor CUDAFloatType::_thnn_upsample_bilinear2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
    auto input_size_ = check_intlist<4>(input_size, "input_size", 3);
    auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
    THNN_CudaSpatialUpSamplingBilinear_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], input_size_[3], output_size_[0], output_size_[1], align_corners);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor & CUDAFloatType::_thnn_upsample_bicubic2d_forward_out(Tensor & output, const Tensor & self, IntArrayRef output_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
    auto output_ = checked_tensor_unwrap(output,"output",3, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaSpatialUpSamplingBicubic_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[1], align_corners);
    return output;
}
Tensor CUDAFloatType::_thnn_upsample_bicubic2d_forward(const Tensor & self, IntArrayRef output_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    THNN_CudaSpatialUpSamplingBicubic_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[1], align_corners);
    return output;
}
Tensor & CUDAFloatType::_thnn_upsample_bicubic2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
    auto input_size_ = check_intlist<4>(input_size, "input_size", 3);
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",4, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaSpatialUpSamplingBicubic_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], input_size_[3], output_size_[0], output_size_[1], align_corners);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor CUDAFloatType::_thnn_upsample_bicubic2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
    auto input_size_ = check_intlist<4>(input_size, "input_size", 3);
    auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
    THNN_CudaSpatialUpSamplingBicubic_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], input_size_[3], output_size_[0], output_size_[1], align_corners);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor & CUDAFloatType::_thnn_upsample_trilinear3d_forward_out(Tensor & output, const Tensor & self, IntArrayRef output_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto output_size_ = check_intlist<3>(output_size, "output_size", 2);
    auto output_ = checked_tensor_unwrap(output,"output",3, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaVolumetricUpSamplingTrilinear_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[1], output_size_[2], align_corners);
    return output;
}
Tensor CUDAFloatType::_thnn_upsample_trilinear3d_forward(const Tensor & self, IntArrayRef output_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto output_size_ = check_intlist<3>(output_size, "output_size", 2);
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    THNN_CudaVolumetricUpSamplingTrilinear_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[1], output_size_[2], align_corners);
    return output;
}
Tensor & CUDAFloatType::_thnn_upsample_trilinear3d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto output_size_ = check_intlist<3>(output_size, "output_size", 2);
    auto input_size_ = check_intlist<5>(input_size, "input_size", 3);
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",4, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaVolumetricUpSamplingTrilinear_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], input_size_[3], input_size_[4], output_size_[0], output_size_[1], output_size_[2], align_corners);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor CUDAFloatType::_thnn_upsample_trilinear3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto output_size_ = check_intlist<3>(output_size, "output_size", 2);
    auto input_size_ = check_intlist<5>(input_size, "input_size", 3);
    auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
    THNN_CudaVolumetricUpSamplingTrilinear_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], input_size_[3], input_size_[4], output_size_[0], output_size_[1], output_size_[2], align_corners);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor & CUDAFloatType::_thnn_upsample_nearest1d_forward_out(Tensor & output, const Tensor & self, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto output_size_ = check_intlist<1>(output_size, "output_size", 2);
    auto output_ = checked_tensor_unwrap(output,"output",2, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaTemporalUpSamplingNearest_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0]);
    return output;
}
Tensor CUDAFloatType::_thnn_upsample_nearest1d_forward(const Tensor & self, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto output_size_ = check_intlist<1>(output_size, "output_size", 2);
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    THNN_CudaTemporalUpSamplingNearest_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0]);
    return output;
}
Tensor & CUDAFloatType::_thnn_upsample_nearest1d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) const {
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto output_size_ = check_intlist<1>(output_size, "output_size", 2);
    auto input_size_ = check_intlist<3>(input_size, "input_size", 3);
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",3, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaTemporalUpSamplingNearest_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], output_size_[0]);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor CUDAFloatType::_thnn_upsample_nearest1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto output_size_ = check_intlist<1>(output_size, "output_size", 2);
    auto input_size_ = check_intlist<3>(input_size, "input_size", 3);
    auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
    THNN_CudaTemporalUpSamplingNearest_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], output_size_[0]);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor & CUDAFloatType::_thnn_upsample_nearest2d_forward_out(Tensor & output, const Tensor & self, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
    auto output_ = checked_tensor_unwrap(output,"output",2, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaSpatialUpSamplingNearest_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[1]);
    return output;
}
Tensor CUDAFloatType::_thnn_upsample_nearest2d_forward(const Tensor & self, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    THNN_CudaSpatialUpSamplingNearest_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[1]);
    return output;
}
Tensor & CUDAFloatType::_thnn_upsample_nearest2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) const {
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
    auto input_size_ = check_intlist<4>(input_size, "input_size", 3);
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",3, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaSpatialUpSamplingNearest_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], input_size_[3], output_size_[0], output_size_[1]);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor CUDAFloatType::_thnn_upsample_nearest2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
    auto input_size_ = check_intlist<4>(input_size, "input_size", 3);
    auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
    THNN_CudaSpatialUpSamplingNearest_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], input_size_[3], output_size_[0], output_size_[1]);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor & CUDAFloatType::_thnn_upsample_nearest3d_forward_out(Tensor & output, const Tensor & self, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto output_size_ = check_intlist<3>(output_size, "output_size", 2);
    auto output_ = checked_tensor_unwrap(output,"output",2, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaVolumetricUpSamplingNearest_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[1], output_size_[2]);
    return output;
}
Tensor CUDAFloatType::_thnn_upsample_nearest3d_forward(const Tensor & self, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto output_size_ = check_intlist<3>(output_size, "output_size", 2);
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    THNN_CudaVolumetricUpSamplingNearest_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[1], output_size_[2]);
    return output;
}
Tensor & CUDAFloatType::_thnn_upsample_nearest3d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) const {
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto output_size_ = check_intlist<3>(output_size, "output_size", 2);
    auto input_size_ = check_intlist<5>(input_size, "input_size", 3);
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",3, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaVolumetricUpSamplingNearest_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], input_size_[3], input_size_[4], output_size_[0], output_size_[1], output_size_[2]);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor CUDAFloatType::_thnn_upsample_nearest3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto output_size_ = check_intlist<3>(output_size, "output_size", 2);
    auto input_size_ = check_intlist<5>(input_size, "input_size", 3);
    auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
    THNN_CudaVolumetricUpSamplingNearest_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], input_size_[3], input_size_[4], output_size_[0], output_size_[1], output_size_[2]);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor & CUDAFloatType::_thnn_sigmoid_forward_out(Tensor & output, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto output_ = checked_tensor_unwrap(output,"output",1, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaSigmoid_updateOutput(globalContext().getTHCState(), self_, output_);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor CUDAFloatType::_thnn_sigmoid_forward(const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    THNN_CudaSigmoid_updateOutput(globalContext().getTHCState(), self_, output_);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor & CUDAFloatType::_thnn_sigmoid_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & output) const {
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto output_ = checked_tensor_unwrap(output,"output",2, false, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",2, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaSigmoid_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, output_);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor CUDAFloatType::_thnn_sigmoid_backward(const Tensor & grad_output, const Tensor & output) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto output_ = checked_tensor_unwrap(output,"output",2, false, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
    THNN_CudaSigmoid_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, output_);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor & CUDAFloatType::_thnn_tanh_forward_out(Tensor & output, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto output_ = checked_tensor_unwrap(output,"output",1, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaTanh_updateOutput(globalContext().getTHCState(), self_, output_);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor CUDAFloatType::_thnn_tanh_forward(const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    THNN_CudaTanh_updateOutput(globalContext().getTHCState(), self_, output_);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor & CUDAFloatType::_thnn_tanh_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & output) const {
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto output_ = checked_tensor_unwrap(output,"output",2, false, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",2, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaTanh_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, output_);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor CUDAFloatType::_thnn_tanh_backward(const Tensor & grad_output, const Tensor & output) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto output_ = checked_tensor_unwrap(output,"output",2, false, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
    THNN_CudaTanh_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, output_);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
std::tuple<Tensor &,Tensor &,Tensor &> CUDAFloatType::_thnn_conv_transpose2d_forward_out(Tensor & output, Tensor & columns, Tensor & ones, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto weight_ = checked_tensor_unwrap(weight,"weight",2, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
    auto bias_ = checked_tensor_unwrap(bias,"bias",4, true, Backend::CUDA, ScalarType::Float);
    auto stride_ = check_intlist<2>(stride, "stride", 5);
    auto padding_ = check_intlist<2>(padding, "padding", 6);
    auto output_padding_ = check_intlist<2>(output_padding, "output_padding", 7);
    auto dilation_ = check_intlist<2>(dilation, "dilation", 8);
    auto output_ = checked_tensor_unwrap(output,"output",8, false, Backend::CUDA, ScalarType::Float);
    auto columns_ = checked_tensor_unwrap(columns,"columns",8, false, Backend::CUDA, ScalarType::Float);
    auto ones_ = checked_tensor_unwrap(ones,"ones",8, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaSpatialFullDilatedConvolution_updateOutput(globalContext().getTHCState(), self_, output_, weight_, bias_ ? bias_ : NULL, columns_, ones_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0], output_padding_[1], output_padding_[0]);
    bool maybe_scalar = self_->dim() == 0 && weight_->dim() == 0 && (!bias_ || bias_->dim() == 0);
    output_->maybe_zero_dim(maybe_scalar);
    columns_->maybe_zero_dim(maybe_scalar);
    ones_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor &, Tensor &, Tensor &>(output, columns, ones);
}
std::tuple<Tensor,Tensor,Tensor> CUDAFloatType::_thnn_conv_transpose2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto weight_ = checked_tensor_unwrap(weight,"weight",2, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
    auto bias_ = checked_tensor_unwrap(bias,"bias",4, true, Backend::CUDA, ScalarType::Float);
    auto stride_ = check_intlist<2>(stride, "stride", 5);
    auto padding_ = check_intlist<2>(padding, "padding", 6);
    auto output_padding_ = check_intlist<2>(output_padding, "output_padding", 7);
    auto dilation_ = check_intlist<2>(dilation, "dilation", 8);
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    auto columns_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto columns = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(columns_));
    auto ones_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto ones = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(ones_));
    THNN_CudaSpatialFullDilatedConvolution_updateOutput(globalContext().getTHCState(), self_, output_, weight_, bias_ ? bias_ : NULL, columns_, ones_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0], output_padding_[1], output_padding_[0]);
    bool maybe_scalar = self_->dim() == 0 && weight_->dim() == 0 && (!bias_ || bias_->dim() == 0);
    output_->maybe_zero_dim(maybe_scalar);
    columns_->maybe_zero_dim(maybe_scalar);
    ones_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor, Tensor, Tensor>(output, columns, ones);
}
std::tuple<Tensor &,Tensor &,Tensor &> CUDAFloatType::_thnn_conv_transpose2d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto weight_ = checked_tensor_unwrap(weight,"weight",3, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 4);
    auto stride_ = check_intlist<2>(stride, "stride", 5);
    auto padding_ = check_intlist<2>(padding, "padding", 6);
    auto output_padding_ = check_intlist<2>(output_padding, "output_padding", 7);
    auto dilation_ = check_intlist<2>(dilation, "dilation", 8);
    auto columns_ = checked_tensor_unwrap(columns,"columns",9, false, Backend::CUDA, ScalarType::Float);
    auto ones_ = checked_tensor_unwrap(ones,"ones",10, false, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",10, true, Backend::CUDA, ScalarType::Float);
    auto grad_weight_ = checked_tensor_unwrap(grad_weight,"grad_weight",10, true, Backend::CUDA, ScalarType::Float);
    if (grad_weight.defined()) {
        grad_weight.resize_(weight.sizes());
        grad_weight.zero_();
    }
    auto grad_bias_ = checked_tensor_unwrap(grad_bias,"grad_bias",10, true, Backend::CUDA, ScalarType::Float);
    if (grad_bias.defined()) {
        grad_bias.resize_({ weight.size(1) });
        grad_bias.zero_();
    }
    if (grad_input_) THNN_CudaSpatialFullDilatedConvolution_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_ ? grad_input_ : NULL, weight_, columns_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0], output_padding_[1], output_padding_[0]);
    if (grad_weight_ || grad_bias_) THNN_CudaSpatialFullDilatedConvolution_accGradParameters(globalContext().getTHCState(), self_, grad_output_, grad_weight_ ? grad_weight_ : NULL, grad_bias_ ? grad_bias_ : NULL, columns_, ones_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0], output_padding_[1], output_padding_[0], 1);
    if (grad_input_) grad_input_->maybe_zero_dim(self_->dim() == 0);
    return std::tuple<Tensor &, Tensor &, Tensor &>(grad_input, grad_weight, grad_bias);
}
std::tuple<Tensor,Tensor,Tensor> CUDAFloatType::_thnn_conv_transpose2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones, std::array<bool,3> output_mask) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto weight_ = checked_tensor_unwrap(weight,"weight",3, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 4);
    auto stride_ = check_intlist<2>(stride, "stride", 5);
    auto padding_ = check_intlist<2>(padding, "padding", 6);
    auto output_padding_ = check_intlist<2>(output_padding, "output_padding", 7);
    auto dilation_ = check_intlist<2>(dilation, "dilation", 8);
    auto columns_ = checked_tensor_unwrap(columns,"columns",9, false, Backend::CUDA, ScalarType::Float);
    auto ones_ = checked_tensor_unwrap(ones,"ones",10, false, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = output_mask[0] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release() : nullptr;
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_input_));
    auto grad_weight_ = output_mask[1] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release() : nullptr;
    auto grad_weight = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_weight_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_weight_));
    if (grad_weight.defined()) {
        grad_weight.resize_(weight.sizes());
        grad_weight.zero_();
    }
    auto grad_bias_ = output_mask[2] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release() : nullptr;
    auto grad_bias = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_bias_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_bias_));
    if (grad_bias.defined()) {
        grad_bias.resize_({ weight.size(1) });
        grad_bias.zero_();
    }
    if (grad_input_) THNN_CudaSpatialFullDilatedConvolution_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_ ? grad_input_ : NULL, weight_, columns_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0], output_padding_[1], output_padding_[0]);
    if (grad_weight_ || grad_bias_) THNN_CudaSpatialFullDilatedConvolution_accGradParameters(globalContext().getTHCState(), self_, grad_output_, grad_weight_ ? grad_weight_ : NULL, grad_bias_ ? grad_bias_ : NULL, columns_, ones_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0], output_padding_[1], output_padding_[0], 1);
    if (grad_input_) grad_input_->maybe_zero_dim(self_->dim() == 0);
    return std::tuple<Tensor, Tensor, Tensor>(grad_input, grad_weight, grad_bias);
}
std::tuple<Tensor &,Tensor &,Tensor &> CUDAFloatType::_thnn_conv_transpose3d_forward_out(Tensor & output, Tensor & finput, Tensor & fgrad_input, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto weight_ = checked_tensor_unwrap(weight,"weight",2, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 3);
    auto bias_ = checked_tensor_unwrap(bias,"bias",4, true, Backend::CUDA, ScalarType::Float);
    auto stride_ = check_intlist<3>(stride, "stride", 5);
    auto padding_ = check_intlist<3>(padding, "padding", 6);
    auto output_padding_ = check_intlist<3>(output_padding, "output_padding", 7);
    auto dilation_ = check_intlist<3>(dilation, "dilation", 8);
    auto output_ = checked_tensor_unwrap(output,"output",8, false, Backend::CUDA, ScalarType::Float);
    auto finput_ = checked_tensor_unwrap(finput,"finput",8, false, Backend::CUDA, ScalarType::Float);
    auto fgrad_input_ = checked_tensor_unwrap(fgrad_input,"fgrad_input",8, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaVolumetricFullDilatedConvolution_updateOutput(globalContext().getTHCState(), self_, output_, weight_, bias_ ? bias_ : NULL, finput_, fgrad_input_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1], output_padding_[0], output_padding_[2], output_padding_[1]);
    bool maybe_scalar = self_->dim() == 0 && weight_->dim() == 0 && (!bias_ || bias_->dim() == 0);
    output_->maybe_zero_dim(maybe_scalar);
    finput_->maybe_zero_dim(maybe_scalar);
    fgrad_input_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor &, Tensor &, Tensor &>(output, finput, fgrad_input);
}
std::tuple<Tensor,Tensor,Tensor> CUDAFloatType::_thnn_conv_transpose3d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto weight_ = checked_tensor_unwrap(weight,"weight",2, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 3);
    auto bias_ = checked_tensor_unwrap(bias,"bias",4, true, Backend::CUDA, ScalarType::Float);
    auto stride_ = check_intlist<3>(stride, "stride", 5);
    auto padding_ = check_intlist<3>(padding, "padding", 6);
    auto output_padding_ = check_intlist<3>(output_padding, "output_padding", 7);
    auto dilation_ = check_intlist<3>(dilation, "dilation", 8);
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    auto finput_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto finput = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(finput_));
    auto fgrad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto fgrad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(fgrad_input_));
    THNN_CudaVolumetricFullDilatedConvolution_updateOutput(globalContext().getTHCState(), self_, output_, weight_, bias_ ? bias_ : NULL, finput_, fgrad_input_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1], output_padding_[0], output_padding_[2], output_padding_[1]);
    bool maybe_scalar = self_->dim() == 0 && weight_->dim() == 0 && (!bias_ || bias_->dim() == 0);
    output_->maybe_zero_dim(maybe_scalar);
    finput_->maybe_zero_dim(maybe_scalar);
    fgrad_input_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor, Tensor, Tensor>(output, finput, fgrad_input);
}
std::tuple<Tensor &,Tensor &,Tensor &> CUDAFloatType::_thnn_conv_transpose3d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & finput, const Tensor & fgrad_input) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto weight_ = checked_tensor_unwrap(weight,"weight",3, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 4);
    auto stride_ = check_intlist<3>(stride, "stride", 5);
    auto padding_ = check_intlist<3>(padding, "padding", 6);
    auto output_padding_ = check_intlist<3>(output_padding, "output_padding", 7);
    auto dilation_ = check_intlist<3>(dilation, "dilation", 8);
    auto finput_ = checked_tensor_unwrap(finput,"finput",9, false, Backend::CUDA, ScalarType::Float);
    auto fgrad_input_ = checked_tensor_unwrap(fgrad_input,"fgrad_input",10, false, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",10, true, Backend::CUDA, ScalarType::Float);
    auto grad_weight_ = checked_tensor_unwrap(grad_weight,"grad_weight",10, true, Backend::CUDA, ScalarType::Float);
    if (grad_weight.defined()) {
        grad_weight.resize_(weight.sizes());
        grad_weight.zero_();
    }
    auto grad_bias_ = checked_tensor_unwrap(grad_bias,"grad_bias",10, true, Backend::CUDA, ScalarType::Float);
    if (grad_bias.defined()) {
        grad_bias.resize_({ weight.size(1) });
        grad_bias.zero_();
    }
    if (grad_input_) THNN_CudaVolumetricFullDilatedConvolution_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_ ? grad_input_ : NULL, weight_, finput_, fgrad_input_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1], output_padding_[0], output_padding_[2], output_padding_[1]);
    if (grad_weight_ || grad_bias_) THNN_CudaVolumetricFullDilatedConvolution_accGradParameters(globalContext().getTHCState(), self_, grad_output_, grad_weight_ ? grad_weight_ : NULL, grad_bias_ ? grad_bias_ : NULL, finput_, fgrad_input_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1], output_padding_[0], output_padding_[2], output_padding_[1], 1);
    if (grad_input_) grad_input_->maybe_zero_dim(self_->dim() == 0);
    return std::tuple<Tensor &, Tensor &, Tensor &>(grad_input, grad_weight, grad_bias);
}
std::tuple<Tensor,Tensor,Tensor> CUDAFloatType::_thnn_conv_transpose3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto weight_ = checked_tensor_unwrap(weight,"weight",3, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 4);
    auto stride_ = check_intlist<3>(stride, "stride", 5);
    auto padding_ = check_intlist<3>(padding, "padding", 6);
    auto output_padding_ = check_intlist<3>(output_padding, "output_padding", 7);
    auto dilation_ = check_intlist<3>(dilation, "dilation", 8);
    auto finput_ = checked_tensor_unwrap(finput,"finput",9, false, Backend::CUDA, ScalarType::Float);
    auto fgrad_input_ = checked_tensor_unwrap(fgrad_input,"fgrad_input",10, false, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = output_mask[0] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release() : nullptr;
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_input_));
    auto grad_weight_ = output_mask[1] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release() : nullptr;
    auto grad_weight = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_weight_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_weight_));
    if (grad_weight.defined()) {
        grad_weight.resize_(weight.sizes());
        grad_weight.zero_();
    }
    auto grad_bias_ = output_mask[2] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release() : nullptr;
    auto grad_bias = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_bias_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_bias_));
    if (grad_bias.defined()) {
        grad_bias.resize_({ weight.size(1) });
        grad_bias.zero_();
    }
    if (grad_input_) THNN_CudaVolumetricFullDilatedConvolution_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_ ? grad_input_ : NULL, weight_, finput_, fgrad_input_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1], output_padding_[0], output_padding_[2], output_padding_[1]);
    if (grad_weight_ || grad_bias_) THNN_CudaVolumetricFullDilatedConvolution_accGradParameters(globalContext().getTHCState(), self_, grad_output_, grad_weight_ ? grad_weight_ : NULL, grad_bias_ ? grad_bias_ : NULL, finput_, fgrad_input_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1], output_padding_[0], output_padding_[2], output_padding_[1], 1);
    if (grad_input_) grad_input_->maybe_zero_dim(self_->dim() == 0);
    return std::tuple<Tensor, Tensor, Tensor>(grad_input, grad_weight, grad_bias);
}
std::tuple<Tensor &,Tensor &,Tensor &> CUDAFloatType::_thnn_conv2d_forward_out(Tensor & output, Tensor & finput, Tensor & fgrad_input, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto weight_ = checked_tensor_unwrap(weight,"weight",2, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
    auto bias_ = checked_tensor_unwrap(bias,"bias",4, true, Backend::CUDA, ScalarType::Float);
    auto stride_ = check_intlist<2>(stride, "stride", 5);
    auto padding_ = check_intlist<2>(padding, "padding", 6);
    auto output_ = checked_tensor_unwrap(output,"output",6, false, Backend::CUDA, ScalarType::Float);
    auto finput_ = checked_tensor_unwrap(finput,"finput",6, false, Backend::CUDA, ScalarType::Float);
    auto fgrad_input_ = checked_tensor_unwrap(fgrad_input,"fgrad_input",6, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaSpatialConvolutionMM_updateOutput(globalContext().getTHCState(), self_, output_, weight_, bias_ ? bias_ : NULL, finput_, fgrad_input_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0]);
    bool maybe_scalar = self_->dim() == 0 && weight_->dim() == 0 && (!bias_ || bias_->dim() == 0);
    output_->maybe_zero_dim(maybe_scalar);
    finput_->maybe_zero_dim(maybe_scalar);
    fgrad_input_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor &, Tensor &, Tensor &>(output, finput, fgrad_input);
}
std::tuple<Tensor,Tensor,Tensor> CUDAFloatType::_thnn_conv2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto weight_ = checked_tensor_unwrap(weight,"weight",2, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
    auto bias_ = checked_tensor_unwrap(bias,"bias",4, true, Backend::CUDA, ScalarType::Float);
    auto stride_ = check_intlist<2>(stride, "stride", 5);
    auto padding_ = check_intlist<2>(padding, "padding", 6);
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    auto finput_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto finput = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(finput_));
    auto fgrad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto fgrad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(fgrad_input_));
    THNN_CudaSpatialConvolutionMM_updateOutput(globalContext().getTHCState(), self_, output_, weight_, bias_ ? bias_ : NULL, finput_, fgrad_input_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0]);
    bool maybe_scalar = self_->dim() == 0 && weight_->dim() == 0 && (!bias_ || bias_->dim() == 0);
    output_->maybe_zero_dim(maybe_scalar);
    finput_->maybe_zero_dim(maybe_scalar);
    fgrad_input_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor, Tensor, Tensor>(output, finput, fgrad_input);
}
std::tuple<Tensor &,Tensor &,Tensor &> CUDAFloatType::_thnn_conv2d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto weight_ = checked_tensor_unwrap(weight,"weight",3, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 4);
    auto stride_ = check_intlist<2>(stride, "stride", 5);
    auto padding_ = check_intlist<2>(padding, "padding", 6);
    auto finput_ = checked_tensor_unwrap(finput,"finput",7, false, Backend::CUDA, ScalarType::Float);
    auto fgrad_input_ = checked_tensor_unwrap(fgrad_input,"fgrad_input",8, false, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",8, true, Backend::CUDA, ScalarType::Float);
    auto grad_weight_ = checked_tensor_unwrap(grad_weight,"grad_weight",8, true, Backend::CUDA, ScalarType::Float);
    if (grad_weight.defined()) {
        grad_weight.resize_(weight.sizes());
        grad_weight.zero_();
    }
    auto grad_bias_ = checked_tensor_unwrap(grad_bias,"grad_bias",8, true, Backend::CUDA, ScalarType::Float);
    if (grad_bias.defined()) {
        grad_bias.resize_({ weight.size(0) });
        grad_bias.zero_();
    }
    if (grad_input_) THNN_CudaSpatialConvolutionMM_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_ ? grad_input_ : NULL, weight_, finput_, fgrad_input_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0]);
    if (grad_weight_ || grad_bias_) THNN_CudaSpatialConvolutionMM_accGradParameters(globalContext().getTHCState(), self_, grad_output_, grad_weight_ ? grad_weight_ : NULL, grad_bias_ ? grad_bias_ : NULL, finput_, fgrad_input_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], 1);
    if (grad_input_) grad_input_->maybe_zero_dim(self_->dim() == 0);
    return std::tuple<Tensor &, Tensor &, Tensor &>(grad_input, grad_weight, grad_bias);
}
std::tuple<Tensor,Tensor,Tensor> CUDAFloatType::_thnn_conv2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto weight_ = checked_tensor_unwrap(weight,"weight",3, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 4);
    auto stride_ = check_intlist<2>(stride, "stride", 5);
    auto padding_ = check_intlist<2>(padding, "padding", 6);
    auto finput_ = checked_tensor_unwrap(finput,"finput",7, false, Backend::CUDA, ScalarType::Float);
    auto fgrad_input_ = checked_tensor_unwrap(fgrad_input,"fgrad_input",8, false, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = output_mask[0] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release() : nullptr;
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_input_));
    auto grad_weight_ = output_mask[1] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release() : nullptr;
    auto grad_weight = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_weight_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_weight_));
    if (grad_weight.defined()) {
        grad_weight.resize_(weight.sizes());
        grad_weight.zero_();
    }
    auto grad_bias_ = output_mask[2] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release() : nullptr;
    auto grad_bias = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_bias_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_bias_));
    if (grad_bias.defined()) {
        grad_bias.resize_({ weight.size(0) });
        grad_bias.zero_();
    }
    if (grad_input_) THNN_CudaSpatialConvolutionMM_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_ ? grad_input_ : NULL, weight_, finput_, fgrad_input_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0]);
    if (grad_weight_ || grad_bias_) THNN_CudaSpatialConvolutionMM_accGradParameters(globalContext().getTHCState(), self_, grad_output_, grad_weight_ ? grad_weight_ : NULL, grad_bias_ ? grad_bias_ : NULL, finput_, fgrad_input_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], 1);
    if (grad_input_) grad_input_->maybe_zero_dim(self_->dim() == 0);
    return std::tuple<Tensor, Tensor, Tensor>(grad_input, grad_weight, grad_bias);
}
Tensor & CUDAFloatType::_thnn_conv_depthwise2d_forward_out(Tensor & output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto weight_ = checked_tensor_unwrap(weight,"weight",2, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
    auto bias_ = checked_tensor_unwrap(bias,"bias",4, true, Backend::CUDA, ScalarType::Float);
    auto stride_ = check_intlist<2>(stride, "stride", 5);
    auto padding_ = check_intlist<2>(padding, "padding", 6);
    auto dilation_ = check_intlist<2>(dilation, "dilation", 7);
    auto output_ = checked_tensor_unwrap(output,"output",7, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaSpatialDepthwiseConvolution_updateOutput(globalContext().getTHCState(), self_, output_, weight_, bias_ ? bias_ : NULL, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0]);
    output_->maybe_zero_dim(self_->dim() == 0 && weight_->dim() == 0 && (!bias_ || bias_->dim() == 0));
    return output;
}
Tensor CUDAFloatType::_thnn_conv_depthwise2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto weight_ = checked_tensor_unwrap(weight,"weight",2, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
    auto bias_ = checked_tensor_unwrap(bias,"bias",4, true, Backend::CUDA, ScalarType::Float);
    auto stride_ = check_intlist<2>(stride, "stride", 5);
    auto padding_ = check_intlist<2>(padding, "padding", 6);
    auto dilation_ = check_intlist<2>(dilation, "dilation", 7);
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    THNN_CudaSpatialDepthwiseConvolution_updateOutput(globalContext().getTHCState(), self_, output_, weight_, bias_ ? bias_ : NULL, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0]);
    output_->maybe_zero_dim(self_->dim() == 0 && weight_->dim() == 0 && (!bias_ || bias_->dim() == 0));
    return output;
}
std::tuple<Tensor &,Tensor &> CUDAFloatType::_thnn_conv_depthwise2d_backward_out(Tensor & grad_input, Tensor & grad_weight, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto weight_ = checked_tensor_unwrap(weight,"weight",3, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 4);
    auto stride_ = check_intlist<2>(stride, "stride", 5);
    auto padding_ = check_intlist<2>(padding, "padding", 6);
    auto dilation_ = check_intlist<2>(dilation, "dilation", 7);
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",7, true, Backend::CUDA, ScalarType::Float);
    auto grad_weight_ = checked_tensor_unwrap(grad_weight,"grad_weight",7, true, Backend::CUDA, ScalarType::Float);
    if (grad_weight.defined()) {
        grad_weight.resize_(weight.sizes());
        grad_weight.zero_();
    }
    if (grad_input_) THNN_CudaSpatialDepthwiseConvolution_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_ ? grad_input_ : NULL, weight_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0]);
    if (grad_weight_) THNN_CudaSpatialDepthwiseConvolution_accGradParameters(globalContext().getTHCState(), self_, grad_output_, grad_weight_ ? grad_weight_ : NULL, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0]);
    if (grad_input_) grad_input_->maybe_zero_dim(self_->dim() == 0);
    return std::tuple<Tensor &, Tensor &>(grad_input, grad_weight);
}
std::tuple<Tensor,Tensor> CUDAFloatType::_thnn_conv_depthwise2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,2> output_mask) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto weight_ = checked_tensor_unwrap(weight,"weight",3, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 4);
    auto stride_ = check_intlist<2>(stride, "stride", 5);
    auto padding_ = check_intlist<2>(padding, "padding", 6);
    auto dilation_ = check_intlist<2>(dilation, "dilation", 7);
    auto grad_input_ = output_mask[0] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release() : nullptr;
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_input_));
    auto grad_weight_ = output_mask[1] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release() : nullptr;
    auto grad_weight = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_weight_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_weight_));
    if (grad_weight.defined()) {
        grad_weight.resize_(weight.sizes());
        grad_weight.zero_();
    }
    if (grad_input_) THNN_CudaSpatialDepthwiseConvolution_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_ ? grad_input_ : NULL, weight_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0]);
    if (grad_weight_) THNN_CudaSpatialDepthwiseConvolution_accGradParameters(globalContext().getTHCState(), self_, grad_output_, grad_weight_ ? grad_weight_ : NULL, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0]);
    if (grad_input_) grad_input_->maybe_zero_dim(self_->dim() == 0);
    return std::tuple<Tensor, Tensor>(grad_input, grad_weight);
}
std::tuple<Tensor &,Tensor &,Tensor &> CUDAFloatType::_thnn_conv_dilated2d_forward_out(Tensor & output, Tensor & columns, Tensor & ones, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto weight_ = checked_tensor_unwrap(weight,"weight",2, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
    auto bias_ = checked_tensor_unwrap(bias,"bias",4, true, Backend::CUDA, ScalarType::Float);
    auto stride_ = check_intlist<2>(stride, "stride", 5);
    auto padding_ = check_intlist<2>(padding, "padding", 6);
    auto dilation_ = check_intlist<2>(dilation, "dilation", 7);
    auto output_ = checked_tensor_unwrap(output,"output",7, false, Backend::CUDA, ScalarType::Float);
    auto columns_ = checked_tensor_unwrap(columns,"columns",7, false, Backend::CUDA, ScalarType::Float);
    auto ones_ = checked_tensor_unwrap(ones,"ones",7, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaSpatialDilatedConvolution_updateOutput(globalContext().getTHCState(), self_, output_, weight_, bias_ ? bias_ : NULL, columns_, ones_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0]);
    bool maybe_scalar = self_->dim() == 0 && weight_->dim() == 0 && (!bias_ || bias_->dim() == 0);
    output_->maybe_zero_dim(maybe_scalar);
    columns_->maybe_zero_dim(maybe_scalar);
    ones_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor &, Tensor &, Tensor &>(output, columns, ones);
}
std::tuple<Tensor,Tensor,Tensor> CUDAFloatType::_thnn_conv_dilated2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto weight_ = checked_tensor_unwrap(weight,"weight",2, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
    auto bias_ = checked_tensor_unwrap(bias,"bias",4, true, Backend::CUDA, ScalarType::Float);
    auto stride_ = check_intlist<2>(stride, "stride", 5);
    auto padding_ = check_intlist<2>(padding, "padding", 6);
    auto dilation_ = check_intlist<2>(dilation, "dilation", 7);
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    auto columns_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto columns = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(columns_));
    auto ones_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto ones = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(ones_));
    THNN_CudaSpatialDilatedConvolution_updateOutput(globalContext().getTHCState(), self_, output_, weight_, bias_ ? bias_ : NULL, columns_, ones_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0]);
    bool maybe_scalar = self_->dim() == 0 && weight_->dim() == 0 && (!bias_ || bias_->dim() == 0);
    output_->maybe_zero_dim(maybe_scalar);
    columns_->maybe_zero_dim(maybe_scalar);
    ones_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor, Tensor, Tensor>(output, columns, ones);
}
std::tuple<Tensor &,Tensor &,Tensor &> CUDAFloatType::_thnn_conv_dilated2d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto weight_ = checked_tensor_unwrap(weight,"weight",3, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 4);
    auto stride_ = check_intlist<2>(stride, "stride", 5);
    auto padding_ = check_intlist<2>(padding, "padding", 6);
    auto dilation_ = check_intlist<2>(dilation, "dilation", 7);
    auto columns_ = checked_tensor_unwrap(columns,"columns",8, false, Backend::CUDA, ScalarType::Float);
    auto ones_ = checked_tensor_unwrap(ones,"ones",9, false, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",9, true, Backend::CUDA, ScalarType::Float);
    auto grad_weight_ = checked_tensor_unwrap(grad_weight,"grad_weight",9, true, Backend::CUDA, ScalarType::Float);
    if (grad_weight.defined()) {
        grad_weight.resize_(weight.sizes());
        grad_weight.zero_();
    }
    auto grad_bias_ = checked_tensor_unwrap(grad_bias,"grad_bias",9, true, Backend::CUDA, ScalarType::Float);
    if (grad_bias.defined()) {
        grad_bias.resize_({ weight.size(0) });
        grad_bias.zero_();
    }
    if (grad_input_) THNN_CudaSpatialDilatedConvolution_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_ ? grad_input_ : NULL, weight_, columns_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0]);
    if (grad_weight_ || grad_bias_) THNN_CudaSpatialDilatedConvolution_accGradParameters(globalContext().getTHCState(), self_, grad_output_, grad_weight_ ? grad_weight_ : NULL, grad_bias_ ? grad_bias_ : NULL, columns_, ones_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0], 1);
    if (grad_input_) grad_input_->maybe_zero_dim(self_->dim() == 0);
    return std::tuple<Tensor &, Tensor &, Tensor &>(grad_input, grad_weight, grad_bias);
}
std::tuple<Tensor,Tensor,Tensor> CUDAFloatType::_thnn_conv_dilated2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones, std::array<bool,3> output_mask) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto weight_ = checked_tensor_unwrap(weight,"weight",3, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 4);
    auto stride_ = check_intlist<2>(stride, "stride", 5);
    auto padding_ = check_intlist<2>(padding, "padding", 6);
    auto dilation_ = check_intlist<2>(dilation, "dilation", 7);
    auto columns_ = checked_tensor_unwrap(columns,"columns",8, false, Backend::CUDA, ScalarType::Float);
    auto ones_ = checked_tensor_unwrap(ones,"ones",9, false, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = output_mask[0] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release() : nullptr;
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_input_));
    auto grad_weight_ = output_mask[1] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release() : nullptr;
    auto grad_weight = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_weight_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_weight_));
    if (grad_weight.defined()) {
        grad_weight.resize_(weight.sizes());
        grad_weight.zero_();
    }
    auto grad_bias_ = output_mask[2] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release() : nullptr;
    auto grad_bias = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_bias_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_bias_));
    if (grad_bias.defined()) {
        grad_bias.resize_({ weight.size(0) });
        grad_bias.zero_();
    }
    if (grad_input_) THNN_CudaSpatialDilatedConvolution_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_ ? grad_input_ : NULL, weight_, columns_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0]);
    if (grad_weight_ || grad_bias_) THNN_CudaSpatialDilatedConvolution_accGradParameters(globalContext().getTHCState(), self_, grad_output_, grad_weight_ ? grad_weight_ : NULL, grad_bias_ ? grad_bias_ : NULL, columns_, ones_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0], 1);
    if (grad_input_) grad_input_->maybe_zero_dim(self_->dim() == 0);
    return std::tuple<Tensor, Tensor, Tensor>(grad_input, grad_weight, grad_bias);
}
std::tuple<Tensor &,Tensor &,Tensor &> CUDAFloatType::_thnn_conv_dilated3d_forward_out(Tensor & output, Tensor & columns, Tensor & ones, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto weight_ = checked_tensor_unwrap(weight,"weight",2, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 3);
    auto bias_ = checked_tensor_unwrap(bias,"bias",4, true, Backend::CUDA, ScalarType::Float);
    auto stride_ = check_intlist<3>(stride, "stride", 5);
    auto padding_ = check_intlist<3>(padding, "padding", 6);
    auto dilation_ = check_intlist<3>(dilation, "dilation", 7);
    auto output_ = checked_tensor_unwrap(output,"output",7, false, Backend::CUDA, ScalarType::Float);
    auto columns_ = checked_tensor_unwrap(columns,"columns",7, false, Backend::CUDA, ScalarType::Float);
    auto ones_ = checked_tensor_unwrap(ones,"ones",7, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaVolumetricDilatedConvolution_updateOutput(globalContext().getTHCState(), self_, output_, weight_, bias_ ? bias_ : NULL, columns_, ones_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1]);
    bool maybe_scalar = self_->dim() == 0 && weight_->dim() == 0 && (!bias_ || bias_->dim() == 0);
    output_->maybe_zero_dim(maybe_scalar);
    columns_->maybe_zero_dim(maybe_scalar);
    ones_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor &, Tensor &, Tensor &>(output, columns, ones);
}
std::tuple<Tensor,Tensor,Tensor> CUDAFloatType::_thnn_conv_dilated3d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto weight_ = checked_tensor_unwrap(weight,"weight",2, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 3);
    auto bias_ = checked_tensor_unwrap(bias,"bias",4, true, Backend::CUDA, ScalarType::Float);
    auto stride_ = check_intlist<3>(stride, "stride", 5);
    auto padding_ = check_intlist<3>(padding, "padding", 6);
    auto dilation_ = check_intlist<3>(dilation, "dilation", 7);
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    auto columns_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto columns = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(columns_));
    auto ones_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto ones = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(ones_));
    THNN_CudaVolumetricDilatedConvolution_updateOutput(globalContext().getTHCState(), self_, output_, weight_, bias_ ? bias_ : NULL, columns_, ones_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1]);
    bool maybe_scalar = self_->dim() == 0 && weight_->dim() == 0 && (!bias_ || bias_->dim() == 0);
    output_->maybe_zero_dim(maybe_scalar);
    columns_->maybe_zero_dim(maybe_scalar);
    ones_->maybe_zero_dim(maybe_scalar);
    return std::tuple<Tensor, Tensor, Tensor>(output, columns, ones);
}
std::tuple<Tensor &,Tensor &,Tensor &> CUDAFloatType::_thnn_conv_dilated3d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto weight_ = checked_tensor_unwrap(weight,"weight",3, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 4);
    auto stride_ = check_intlist<3>(stride, "stride", 5);
    auto padding_ = check_intlist<3>(padding, "padding", 6);
    auto dilation_ = check_intlist<3>(dilation, "dilation", 7);
    auto columns_ = checked_tensor_unwrap(columns,"columns",8, false, Backend::CUDA, ScalarType::Float);
    auto ones_ = checked_tensor_unwrap(ones,"ones",9, false, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",9, true, Backend::CUDA, ScalarType::Float);
    auto grad_weight_ = checked_tensor_unwrap(grad_weight,"grad_weight",9, true, Backend::CUDA, ScalarType::Float);
    if (grad_weight.defined()) {
        grad_weight.resize_(weight.sizes());
        grad_weight.zero_();
    }
    auto grad_bias_ = checked_tensor_unwrap(grad_bias,"grad_bias",9, true, Backend::CUDA, ScalarType::Float);
    if (grad_bias.defined()) {
        grad_bias.resize_({ weight.size(0) });
        grad_bias.zero_();
    }
    if (grad_input_) THNN_CudaVolumetricDilatedConvolution_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_ ? grad_input_ : NULL, weight_, columns_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1]);
    if (grad_weight_ || grad_bias_) THNN_CudaVolumetricDilatedConvolution_accGradParameters(globalContext().getTHCState(), self_, grad_output_, grad_weight_ ? grad_weight_ : NULL, grad_bias_ ? grad_bias_ : NULL, columns_, ones_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1], 1);
    if (grad_input_) grad_input_->maybe_zero_dim(self_->dim() == 0);
    return std::tuple<Tensor &, Tensor &, Tensor &>(grad_input, grad_weight, grad_bias);
}
std::tuple<Tensor,Tensor,Tensor> CUDAFloatType::_thnn_conv_dilated3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones, std::array<bool,3> output_mask) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CUDA, ScalarType::Float);
    auto weight_ = checked_tensor_unwrap(weight,"weight",3, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 4);
    auto stride_ = check_intlist<3>(stride, "stride", 5);
    auto padding_ = check_intlist<3>(padding, "padding", 6);
    auto dilation_ = check_intlist<3>(dilation, "dilation", 7);
    auto columns_ = checked_tensor_unwrap(columns,"columns",8, false, Backend::CUDA, ScalarType::Float);
    auto ones_ = checked_tensor_unwrap(ones,"ones",9, false, Backend::CUDA, ScalarType::Float);
    auto grad_input_ = output_mask[0] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release() : nullptr;
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_input_));
    auto grad_weight_ = output_mask[1] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release() : nullptr;
    auto grad_weight = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_weight_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_weight_));
    if (grad_weight.defined()) {
        grad_weight.resize_(weight.sizes());
        grad_weight.zero_();
    }
    auto grad_bias_ = output_mask[2] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release() : nullptr;
    auto grad_bias = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_bias_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_bias_));
    if (grad_bias.defined()) {
        grad_bias.resize_({ weight.size(0) });
        grad_bias.zero_();
    }
    if (grad_input_) THNN_CudaVolumetricDilatedConvolution_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_ ? grad_input_ : NULL, weight_, columns_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1]);
    if (grad_weight_ || grad_bias_) THNN_CudaVolumetricDilatedConvolution_accGradParameters(globalContext().getTHCState(), self_, grad_output_, grad_weight_ ? grad_weight_ : NULL, grad_bias_ ? grad_bias_ : NULL, columns_, ones_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1], 1);
    if (grad_input_) grad_input_->maybe_zero_dim(self_->dim() == 0);
    return std::tuple<Tensor, Tensor, Tensor>(grad_input, grad_weight, grad_bias);
}
Tensor & CUDAFloatType::_thnn_col2im_forward_out(Tensor & output, const Tensor & self, IntArrayRef output_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
    auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
    auto dilation_ = check_intlist<2>(dilation, "dilation", 4);
    auto padding_ = check_intlist<2>(padding, "padding", 5);
    auto stride_ = check_intlist<2>(stride, "stride", 6);
    auto output_ = checked_tensor_unwrap(output,"output",6, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaCol2Im_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[1], kernel_size_[0], kernel_size_[1], dilation_[0], dilation_[1], padding_[0], padding_[1], stride_[0], stride_[1]);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor CUDAFloatType::_thnn_col2im_forward(const Tensor & self, IntArrayRef output_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
    auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
    auto dilation_ = check_intlist<2>(dilation, "dilation", 4);
    auto padding_ = check_intlist<2>(padding, "padding", 5);
    auto stride_ = check_intlist<2>(stride, "stride", 6);
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    THNN_CudaCol2Im_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[1], kernel_size_[0], kernel_size_[1], dilation_[0], dilation_[1], padding_[0], padding_[1], stride_[0], stride_[1]);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor & CUDAFloatType::_thnn_col2im_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) const {
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 2);
    auto dilation_ = check_intlist<2>(dilation, "dilation", 3);
    auto padding_ = check_intlist<2>(padding, "padding", 4);
    auto stride_ = check_intlist<2>(stride, "stride", 5);
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",5, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaCol2Im_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, kernel_size_[0], kernel_size_[1], dilation_[0], dilation_[1], padding_[0], padding_[1], stride_[0], stride_[1]);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor CUDAFloatType::_thnn_col2im_backward(const Tensor & grad_output, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 2);
    auto dilation_ = check_intlist<2>(dilation, "dilation", 3);
    auto padding_ = check_intlist<2>(padding, "padding", 4);
    auto stride_ = check_intlist<2>(stride, "stride", 5);
    auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
    THNN_CudaCol2Im_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, kernel_size_[0], kernel_size_[1], dilation_[0], dilation_[1], padding_[0], padding_[1], stride_[0], stride_[1]);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor & CUDAFloatType::_thnn_im2col_forward_out(Tensor & output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 2);
    auto dilation_ = check_intlist<2>(dilation, "dilation", 3);
    auto padding_ = check_intlist<2>(padding, "padding", 4);
    auto stride_ = check_intlist<2>(stride, "stride", 5);
    auto output_ = checked_tensor_unwrap(output,"output",5, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaIm2Col_updateOutput(globalContext().getTHCState(), self_, output_, kernel_size_[0], kernel_size_[1], dilation_[0], dilation_[1], padding_[0], padding_[1], stride_[0], stride_[1]);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor CUDAFloatType::_thnn_im2col_forward(const Tensor & self, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CUDA, ScalarType::Float);
    auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 2);
    auto dilation_ = check_intlist<2>(dilation, "dilation", 3);
    auto padding_ = check_intlist<2>(padding, "padding", 4);
    auto stride_ = check_intlist<2>(stride, "stride", 5);
    auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
    THNN_CudaIm2Col_updateOutput(globalContext().getTHCState(), self_, output_, kernel_size_[0], kernel_size_[1], dilation_[0], dilation_[1], padding_[0], padding_[1], stride_[0], stride_[1]);
    output_->maybe_zero_dim(false);
    return output;
}
Tensor & CUDAFloatType::_thnn_im2col_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef input_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) const {
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto input_size_ = check_intlist<2>(input_size, "input_size", 2);
    auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
    auto dilation_ = check_intlist<2>(dilation, "dilation", 4);
    auto padding_ = check_intlist<2>(padding, "padding", 5);
    auto stride_ = check_intlist<2>(stride, "stride", 6);
    auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",6, false, Backend::CUDA, ScalarType::Float);
    THNN_CudaIm2Col_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], kernel_size_[0], kernel_size_[1], dilation_[0], dilation_[1], padding_[0], padding_[1], stride_[0], stride_[1]);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
Tensor CUDAFloatType::_thnn_im2col_backward(const Tensor & grad_output, IntArrayRef input_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CUDA, ScalarType::Float);
    auto input_size_ = check_intlist<2>(input_size, "input_size", 2);
    auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
    auto dilation_ = check_intlist<2>(dilation, "dilation", 4);
    auto padding_ = check_intlist<2>(padding, "padding", 5);
    auto stride_ = check_intlist<2>(stride, "stride", 6);
    auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(CUDATensorId(), caffe2::TypeMeta::Make<float>(), allocator(), false).release();
    auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
    THNN_CudaIm2Col_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], kernel_size_[0], kernel_size_[1], dilation_[0], dilation_[1], padding_[0], padding_[1], stride_[0], stride_[1]);
    grad_input_->maybe_zero_dim(false);
    return grad_input;
}
std::tuple<Tensor,Tensor> CUDAFloatType::_cudnn_ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank, bool deterministic, bool zero_infinity) const {
    const OptionalDeviceGuard device_guard(device_of(log_probs));
    return at::native::_cudnn_ctc_loss(/* actuals */ log_probs, targets, input_lengths, target_lengths, blank, deterministic, zero_infinity);
}
Tensor CUDAFloatType::_cudnn_rnn_flatten_weight(TensorList weight_arr, int64_t weight_stride0, int64_t input_size, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, bool bidirectional) const {
    const OptionalDeviceGuard device_guard(device_of(weight_arr));
    return at::native::_cudnn_rnn_flatten_weight(/* actuals */ weight_arr, weight_stride0, input_size, mode, hidden_size, num_layers, batch_first, bidirectional);
}
std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> CUDAFloatType::_cudnn_rnn(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const Tensor & cx, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const Tensor & dropout_state) const {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_cudnn_rnn(/* actuals */ input, weight, weight_stride0, weight_buf, hx, cx, mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state);
}
std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>> CUDAFloatType::_cudnn_rnn_backward(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const Tensor & cx, const Tensor & output, const Tensor & grad_output, const Tensor & grad_hy, const Tensor & grad_cy, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const Tensor & dropout_state, const Tensor & reserve, std::array<bool,4> output_mask) const {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_cudnn_rnn_backward(/* actuals */ input, weight, weight_stride0, weight_buf, hx, cx, output, grad_output, grad_hy, grad_cy, mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state, reserve, output_mask);
}
Tensor CUDAFloatType::_cudnn_init_dropout_state(double dropout, bool train, int64_t dropout_seed, const TensorOptions & options) const {
    const DeviceGuard device_guard(options.device());
    return at::native::_cudnn_init_dropout_state(/* actuals */ dropout, train, dropout_seed, options);
}
std::tuple<Tensor,Tensor> CUDAFloatType::_fused_dropout(const Tensor & self, double p, Generator * generator) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fused_dropout_cuda(/* actuals */ self, p, generator);
}
Tensor CUDAFloatType::_masked_scale(const Tensor & self, const Tensor & mask, double scale) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::masked_scale_cuda(/* actuals */ self, mask, scale);
}
Tensor & CUDAFloatType::abs_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_abs__cuda(/* actuals */ self);
}
Tensor & CUDAFloatType::abs_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_abs_out_cuda(/* actuals */ out, self);
}
Tensor & CUDAFloatType::acos_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_acos__cuda(/* actuals */ self);
}
Tensor & CUDAFloatType::acos_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_acos_out_cuda(/* actuals */ out, self);
}
Tensor & CUDAFloatType::arange_out(Tensor & out, Scalar start, Scalar end, Scalar step) const {
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::arange_cuda_out(/* actuals */ out, start, end, step);
}
Tensor & CUDAFloatType::asin_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_asin__cuda(/* actuals */ self);
}
Tensor & CUDAFloatType::asin_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_asin_out_cuda(/* actuals */ out, self);
}
Tensor & CUDAFloatType::atan_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_atan__cuda(/* actuals */ self);
}
Tensor & CUDAFloatType::atan_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_atan_out_cuda(/* actuals */ out, self);
}
Tensor CUDAFloatType::baddbmm(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::baddbmm_cuda(/* actuals */ self, batch1, batch2, beta, alpha);
}
Tensor & CUDAFloatType::baddbmm_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::baddbmm__cuda(/* actuals */ self, batch1, batch2, beta, alpha);
}
Tensor & CUDAFloatType::baddbmm_out(Tensor & out, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::baddbmm_out_cuda(/* actuals */ out, self, batch1, batch2, beta, alpha);
}
Tensor & CUDAFloatType::bernoulli_(Tensor & self, const Tensor & p, Generator * generator) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bernoulli_tensor_cuda_(/* actuals */ self, p, generator);
}
Tensor & CUDAFloatType::bernoulli_(Tensor & self, double p, Generator * generator) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bernoulli_scalar_cuda_(/* actuals */ self, p, generator);
}
Tensor CUDAFloatType::bincount(const Tensor & self, const Tensor & weights, int64_t minlength) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_bincount_cuda(/* actuals */ self, weights, minlength);
}
Tensor CUDAFloatType::bmm(const Tensor & self, const Tensor & mat2) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bmm_cuda(/* actuals */ self, mat2);
}
Tensor & CUDAFloatType::bmm_out(Tensor & out, const Tensor & self, const Tensor & mat2) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bmm_out_cuda(/* actuals */ out, self, mat2);
}
Tensor & CUDAFloatType::ceil_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_ceil__cuda(/* actuals */ self);
}
Tensor & CUDAFloatType::ceil_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_ceil_out_cuda(/* actuals */ out, self);
}
Tensor & CUDAFloatType::clamp_(Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_clamp__cuda(/* actuals */ self, min, max);
}
Tensor & CUDAFloatType::clamp_out(Tensor & out, const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_clamp_out_cuda(/* actuals */ out, self, min, max);
}
Tensor & CUDAFloatType::clamp_max_(Tensor & self, Scalar max) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_clamp_max__cuda(/* actuals */ self, max);
}
Tensor & CUDAFloatType::clamp_max_out(Tensor & out, const Tensor & self, Scalar max) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_clamp_max_out_cuda(/* actuals */ out, self, max);
}
Tensor & CUDAFloatType::clamp_min_(Tensor & self, Scalar min) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_clamp_min__cuda(/* actuals */ self, min);
}
Tensor & CUDAFloatType::clamp_min_out(Tensor & out, const Tensor & self, Scalar min) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_clamp_min_out_cuda(/* actuals */ out, self, min);
}
Tensor & CUDAFloatType::s_copy_(Tensor & self, const Tensor & src, bool non_blocking) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_s_copy__cuda(/* actuals */ self, src, non_blocking);
}
Tensor CUDAFloatType::_s_copy_from(const Tensor & self, const Tensor & dst, bool non_blocking) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_s_copy_from_cuda(/* actuals */ self, dst, non_blocking);
}
void CUDAFloatType::_copy_same_type_(Tensor & self, const Tensor & src) const {
    AT_ERROR("_copy_same_type_ not supported on CUDAFloatType");
}
Tensor & CUDAFloatType::cos_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cos__cuda(/* actuals */ self);
}
Tensor & CUDAFloatType::cos_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cos_out_cuda(/* actuals */ out, self);
}
Tensor & CUDAFloatType::cosh_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cosh__cuda(/* actuals */ self);
}
Tensor & CUDAFloatType::cosh_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cosh_out_cuda(/* actuals */ out, self);
}
Tensor CUDAFloatType::cudnn_affine_grid_generator(const Tensor & theta, int64_t N, int64_t C, int64_t H, int64_t W) const {
    const OptionalDeviceGuard device_guard(device_of(theta));
    return at::native::cudnn_affine_grid_generator_forward(/* actuals */ theta, N, C, H, W);
}
Tensor CUDAFloatType::cudnn_affine_grid_generator_backward(const Tensor & grad, int64_t N, int64_t C, int64_t H, int64_t W) const {
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::cudnn_affine_grid_generator_backward(/* actuals */ grad, N, C, H, W);
}
std::tuple<Tensor,Tensor,Tensor> CUDAFloatType::cudnn_batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double exponential_average_factor, double epsilon) const {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::cudnn_batch_norm(/* actuals */ input, weight, bias, running_mean, running_var, training, exponential_average_factor, epsilon);
}
std::tuple<Tensor,Tensor,Tensor> CUDAFloatType::cudnn_batch_norm_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_var, double epsilon) const {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::cudnn_batch_norm_backward(/* actuals */ input, grad_output, weight, running_mean, running_var, save_mean, save_var, epsilon);
}
Tensor CUDAFloatType::cudnn_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cudnn_convolution(/* actuals */ self, weight, bias, padding, stride, dilation, groups, benchmark, deterministic);
}
Tensor CUDAFloatType::cudnn_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::cudnn_convolution_backward_input(/* actuals */ self_size, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic);
}
std::tuple<Tensor,Tensor,Tensor> CUDAFloatType::cudnn_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cudnn_convolution_backward(/* actuals */ self, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic, output_mask);
}
Tensor CUDAFloatType::cudnn_convolution_backward_bias(const Tensor & grad_output) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::cudnn_convolution_backward_bias(/* actuals */ grad_output);
}
Tensor CUDAFloatType::cudnn_convolution_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cudnn_convolution_backward_weight(/* actuals */ weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic);
}
Tensor CUDAFloatType::cudnn_convolution_transpose(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cudnn_convolution_transpose(/* actuals */ self, weight, bias, padding, output_padding, stride, dilation, groups, benchmark, deterministic);
}
std::tuple<Tensor,Tensor,Tensor> CUDAFloatType::cudnn_convolution_transpose_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cudnn_convolution_transpose_backward(/* actuals */ self, grad_output, weight, padding, output_padding, stride, dilation, groups, benchmark, deterministic, output_mask);
}
Tensor CUDAFloatType::cudnn_convolution_transpose_backward_bias(const Tensor & grad_output) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::cudnn_convolution_backward_bias(/* actuals */ grad_output);
}
Tensor CUDAFloatType::cudnn_convolution_transpose_backward_input(const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::cudnn_convolution_transpose_backward_input(/* actuals */ grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic);
}
Tensor CUDAFloatType::cudnn_convolution_transpose_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cudnn_convolution_transpose_backward_weight(/* actuals */ weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic);
}
Tensor CUDAFloatType::cudnn_grid_sampler(const Tensor & self, const Tensor & grid) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cudnn_grid_sampler_forward(/* actuals */ self, grid);
}
std::tuple<Tensor,Tensor> CUDAFloatType::cudnn_grid_sampler_backward(const Tensor & self, const Tensor & grid, const Tensor & grad_output) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cudnn_grid_sampler_backward(/* actuals */ self, grid, grad_output);
}
std::tuple<Tensor,Tensor> CUDAFloatType::_ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank, bool zero_infinity) const {
    const OptionalDeviceGuard device_guard(device_of(log_probs));
    return at::native::ctc_loss_gpu(/* actuals */ log_probs, targets, input_lengths, target_lengths, blank, zero_infinity);
}
Tensor CUDAFloatType::_ctc_loss_backward(const Tensor & grad, const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, const Tensor & neg_log_likelihood, const Tensor & log_alpha, int64_t blank, bool zero_infinity) const {
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::ctc_loss_backward_gpu(/* actuals */ grad, log_probs, targets, input_lengths, target_lengths, neg_log_likelihood, log_alpha, blank, zero_infinity);
}
Tensor CUDAFloatType::embedding_dense_backward(const Tensor & grad, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq) const {
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::embedding_dense_backward_cuda(/* actuals */ grad, indices, num_weights, padding_idx, scale_grad_by_freq);
}
Tensor & CUDAFloatType::embedding_renorm_(Tensor & self, const Tensor & indices, double max_norm, double norm_type) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::embedding_renorm_cuda_(/* actuals */ self, indices, max_norm, norm_type);
}
std::tuple<Tensor,Tensor,Tensor,Tensor> CUDAFloatType::_embedding_bag(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse) const {
    const OptionalDeviceGuard device_guard(device_of(weight));
    return at::native::_embedding_bag_cuda(/* actuals */ weight, indices, offsets, scale_grad_by_freq, mode, sparse);
}
Tensor CUDAFloatType::_embedding_bag_dense_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode) const {
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::_embedding_bag_dense_backward_cuda(/* actuals */ grad, indices, offsets, offset2bag, bag_size, maximum_indices, num_weights, scale_grad_by_freq, mode);
}
Tensor CUDAFloatType::empty(IntArrayRef size, const TensorOptions & options) const {
    const DeviceGuard device_guard(options.device());
    return at::native::empty_cuda(/* actuals */ size, options);
}
Tensor & CUDAFloatType::resize_(Tensor & self, IntArrayRef size) const {
    // DeviceGuard omitted
    return at::native::resize_cuda_(/* actuals */ self, size);
}
Tensor CUDAFloatType::empty_strided(IntArrayRef size, IntArrayRef stride, const TensorOptions & options) const {
    const DeviceGuard device_guard(options.device());
    return at::native::empty_strided_cuda(/* actuals */ size, stride, options);
}
Tensor & CUDAFloatType::erf_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_erf__cuda(/* actuals */ self);
}
Tensor & CUDAFloatType::erf_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_erf_out_cuda(/* actuals */ out, self);
}
Tensor & CUDAFloatType::erfc_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_erfc__cuda(/* actuals */ self);
}
Tensor & CUDAFloatType::erfc_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_erfc_out_cuda(/* actuals */ out, self);
}
Tensor & CUDAFloatType::exp_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_exp__cuda(/* actuals */ self);
}
Tensor & CUDAFloatType::exp_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_exp_out_cuda(/* actuals */ out, self);
}
Tensor & CUDAFloatType::expm1_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_expm1__cuda(/* actuals */ self);
}
Tensor & CUDAFloatType::expm1_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_expm1_out_cuda(/* actuals */ out, self);
}
Tensor & CUDAFloatType::eye_out(Tensor & out, int64_t n) const {
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::eye_out_cuda(/* actuals */ out, n);
}
Tensor & CUDAFloatType::eye_out(Tensor & out, int64_t n, int64_t m) const {
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::eye_out_cuda(/* actuals */ out, n, m);
}
Tensor & CUDAFloatType::floor_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_floor__cuda(/* actuals */ self);
}
Tensor & CUDAFloatType::floor_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_floor_out_cuda(/* actuals */ out, self);
}
Tensor CUDAFloatType::grid_sampler_2d(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode) const {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::grid_sampler_2d_cuda(/* actuals */ input, grid, interpolation_mode, padding_mode);
}
std::tuple<Tensor,Tensor> CUDAFloatType::grid_sampler_2d_backward(const Tensor & grad_output, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::grid_sampler_2d_backward_cuda(/* actuals */ grad_output, input, grid, interpolation_mode, padding_mode);
}
Tensor CUDAFloatType::grid_sampler_3d(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode) const {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::grid_sampler_3d_cuda(/* actuals */ input, grid, interpolation_mode, padding_mode);
}
std::tuple<Tensor,Tensor> CUDAFloatType::grid_sampler_3d_backward(const Tensor & grad_output, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::grid_sampler_3d_backward_cuda(/* actuals */ grad_output, input, grid, interpolation_mode, padding_mode);
}
std::tuple<Tensor,Tensor> CUDAFloatType::_gesv_helper(const Tensor & self, const Tensor & A) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_gesv_helper_cuda(/* actuals */ self, A);
}
Tensor CUDAFloatType::_fft_with_size(const Tensor & self, int64_t signal_ndim, bool complex_input, bool complex_output, bool inverse, IntArrayRef checked_signal_sizes, bool normalized, bool onesided, IntArrayRef output_sizes) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_fft_cufft(/* actuals */ self, signal_ndim, complex_input, complex_output, inverse, checked_signal_sizes, normalized, onesided, output_sizes);
}
Tensor CUDAFloatType::_inverse_helper(const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_inverse_helper_cuda(/* actuals */ self);
}
Tensor CUDAFloatType::kl_div_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::kl_div_backward_cuda(/* actuals */ grad_output, self, target, reduction);
}
Tensor & CUDAFloatType::linspace_out(Tensor & out, Scalar start, Scalar end, int64_t steps) const {
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::linspace_cuda_out(/* actuals */ out, start, end, steps);
}
Tensor & CUDAFloatType::log_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_log__cuda(/* actuals */ self);
}
Tensor & CUDAFloatType::log_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_log_out_cuda(/* actuals */ out, self);
}
Tensor & CUDAFloatType::log10_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_log10__cuda(/* actuals */ self);
}
Tensor & CUDAFloatType::log10_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_log10_out_cuda(/* actuals */ out, self);
}
Tensor & CUDAFloatType::log1p_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_log1p__cuda(/* actuals */ self);
}
Tensor & CUDAFloatType::log1p_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_log1p_out_cuda(/* actuals */ out, self);
}
Tensor & CUDAFloatType::log2_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_log2__cuda(/* actuals */ self);
}
Tensor & CUDAFloatType::log2_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_log2_out_cuda(/* actuals */ out, self);
}
Tensor & CUDAFloatType::logspace_out(Tensor & out, Scalar start, Scalar end, int64_t steps) const {
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::logspace_cuda_out(/* actuals */ out, start, end, steps);
}
Tensor CUDAFloatType::_log_softmax(const Tensor & self, int64_t dim, bool half_to_float) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_softmax_cuda(/* actuals */ self, dim, half_to_float);
}
Tensor CUDAFloatType::_log_softmax_backward_data(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_softmax_backward_cuda(/* actuals */ grad_output, output, dim, self);
}
std::tuple<Tensor,Tensor,Tensor> CUDAFloatType::miopen_batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double exponential_average_factor, double epsilon) const {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::miopen_batch_norm(/* actuals */ input, weight, bias, running_mean, running_var, training, exponential_average_factor, epsilon);
}
std::tuple<Tensor,Tensor,Tensor> CUDAFloatType::miopen_batch_norm_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_var, double epsilon) const {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::miopen_batch_norm_backward(/* actuals */ input, grad_output, weight, running_mean, running_var, save_mean, save_var, epsilon);
}
Tensor CUDAFloatType::miopen_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::miopen_convolution(/* actuals */ self, weight, bias, padding, stride, dilation, groups, benchmark, deterministic);
}
Tensor CUDAFloatType::miopen_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::miopen_convolution_backward_input(/* actuals */ self_size, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic);
}
std::tuple<Tensor,Tensor,Tensor> CUDAFloatType::miopen_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::miopen_convolution_backward(/* actuals */ self, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic, output_mask);
}
Tensor CUDAFloatType::miopen_convolution_backward_bias(const Tensor & grad_output) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::miopen_convolution_backward_bias(/* actuals */ grad_output);
}
Tensor CUDAFloatType::miopen_convolution_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::miopen_convolution_backward_weight(/* actuals */ weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic);
}
Tensor CUDAFloatType::miopen_convolution_transpose(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::miopen_convolution_transpose(/* actuals */ self, weight, bias, padding, output_padding, stride, dilation, groups, benchmark, deterministic);
}
std::tuple<Tensor,Tensor,Tensor> CUDAFloatType::miopen_convolution_transpose_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::miopen_convolution_transpose_backward(/* actuals */ self, grad_output, weight, padding, output_padding, stride, dilation, groups, benchmark, deterministic, output_mask);
}
Tensor CUDAFloatType::miopen_convolution_transpose_backward_input(const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::miopen_convolution_transpose_backward_input(/* actuals */ grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic);
}
Tensor CUDAFloatType::miopen_convolution_transpose_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::miopen_convolution_transpose_backward_weight(/* actuals */ weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic);
}
Tensor CUDAFloatType::narrow_copy(const Tensor & self, int64_t dim, int64_t start, int64_t length) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::narrow_copy_dense(/* actuals */ self, dim, start, length);
}
std::tuple<Tensor,Tensor,Tensor> CUDAFloatType::native_batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps) const {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::batch_norm_cuda(/* actuals */ input, weight, bias, running_mean, running_var, training, momentum, eps);
}
std::tuple<Tensor,Tensor,Tensor> CUDAFloatType::native_batch_norm_backward(const Tensor & grad_out, const Tensor & input, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_invstd, bool train, double eps, std::array<bool,3> output_mask) const {
    const OptionalDeviceGuard device_guard(device_of(grad_out));
    return at::native::batch_norm_backward_cuda(/* actuals */ grad_out, input, weight, running_mean, running_var, save_mean, save_invstd, train, eps, output_mask);
}
std::tuple<Tensor,Tensor> CUDAFloatType::batch_norm_update_stats(const Tensor & input, const Tensor & running_mean, const Tensor & running_var, double momentum) const {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::batch_norm_update_stats_cuda(/* actuals */ input, running_mean, running_var, momentum);
}
Tensor & CUDAFloatType::randperm_out(Tensor & out, int64_t n, Generator * generator) const {
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::randperm_out_cuda(/* actuals */ out, n, generator);
}
Tensor & CUDAFloatType::range_out(Tensor & out, Scalar start, Scalar end, Scalar step) const {
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::range_cuda_out(/* actuals */ out, start, end, step);
}
Tensor & CUDAFloatType::round_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_round__cuda(/* actuals */ self);
}
Tensor & CUDAFloatType::round_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_round_out_cuda(/* actuals */ out, self);
}
Tensor CUDAFloatType::prelu(const Tensor & self, const Tensor & weight) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::prelu_cuda(/* actuals */ self, weight);
}
std::tuple<Tensor,Tensor> CUDAFloatType::prelu_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::prelu_backward_cuda(/* actuals */ grad_output, self, weight);
}
Tensor CUDAFloatType::hardshrink(const Tensor & self, Scalar lambd) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hardshrink_cuda(/* actuals */ self, lambd);
}
Tensor CUDAFloatType::hardshrink_backward(const Tensor & grad_out, const Tensor & self, Scalar lambd) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hardshrink_backward_cuda(/* actuals */ grad_out, self, lambd);
}
Tensor & CUDAFloatType::rsqrt_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_rsqrt__cuda(/* actuals */ self);
}
Tensor & CUDAFloatType::rsqrt_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_rsqrt_out_cuda(/* actuals */ out, self);
}
Tensor & CUDAFloatType::sigmoid_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sigmoid__cuda(/* actuals */ self);
}
Tensor & CUDAFloatType::sigmoid_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sigmoid_out_cuda(/* actuals */ out, self);
}
Tensor & CUDAFloatType::sin_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sin__cuda(/* actuals */ self);
}
Tensor & CUDAFloatType::sin_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sin_out_cuda(/* actuals */ out, self);
}
Tensor & CUDAFloatType::sinh_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sinh__cuda(/* actuals */ self);
}
Tensor & CUDAFloatType::sinh_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sinh_out_cuda(/* actuals */ out, self);
}
Tensor CUDAFloatType::_softmax(const Tensor & self, int64_t dim, bool half_to_float) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softmax_cuda(/* actuals */ self, dim, half_to_float);
}
Tensor CUDAFloatType::_softmax_backward_data(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softmax_backward_cuda(/* actuals */ grad_output, output, dim, self);
}
Tensor & CUDAFloatType::_sparse_add_out(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha) const {
    AT_ERROR("_sparse_add_out not supported on CUDAFloatType");
}
Tensor & CUDAFloatType::_sparse_dense_add_out(Tensor & out, const Tensor & self, SparseTensorRef other, Scalar alpha) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::add_out_dense_sparse_cuda(/* actuals */ out, self, other, alpha);
}
Tensor & CUDAFloatType::_sparse_div_zerodim_out(Tensor & out, const Tensor & self, const Tensor & other) const {
    AT_ERROR("_sparse_div_zerodim_out not supported on CUDAFloatType");
}
Tensor & CUDAFloatType::_sparse_div_scalar_out(Tensor & out, const Tensor & self, Scalar other) const {
    AT_ERROR("_sparse_div_scalar_out not supported on CUDAFloatType");
}
Tensor & CUDAFloatType::_sparse_mul_out(Tensor & out, const Tensor & self, const Tensor & other) const {
    AT_ERROR("_sparse_mul_out not supported on CUDAFloatType");
}
Tensor & CUDAFloatType::_sparse_mul_zerodim_out(Tensor & out, const Tensor & self, const Tensor & other) const {
    AT_ERROR("_sparse_mul_zerodim_out not supported on CUDAFloatType");
}
Tensor & CUDAFloatType::_sparse_mul_scalar_out(Tensor & out, const Tensor & self, Scalar other) const {
    AT_ERROR("_sparse_mul_scalar_out not supported on CUDAFloatType");
}
Tensor & CUDAFloatType::sspaddmm_out(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sspaddmm_out_only_sparse_cuda(/* actuals */ out, self, mat1, mat2, beta, alpha);
}
Tensor & CUDAFloatType::sqrt_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sqrt__cuda(/* actuals */ self);
}
Tensor & CUDAFloatType::sqrt_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sqrt_out_cuda(/* actuals */ out, self);
}
Tensor & CUDAFloatType::tan_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_tan__cuda(/* actuals */ self);
}
Tensor & CUDAFloatType::tan_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_tan_out_cuda(/* actuals */ out, self);
}
Tensor & CUDAFloatType::tanh_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_tanh__cuda(/* actuals */ self);
}
Tensor & CUDAFloatType::tanh_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_tanh_out_cuda(/* actuals */ out, self);
}
Tensor CUDAFloatType::flip(const Tensor & self, IntArrayRef dims) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::flip_cuda(/* actuals */ self, dims);
}
Tensor CUDAFloatType::roll(const Tensor & self, IntArrayRef shifts, IntArrayRef dims) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::roll_cuda(/* actuals */ self, shifts, dims);
}
Tensor & CUDAFloatType::trunc_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_trunc__cuda(/* actuals */ self);
}
Tensor & CUDAFloatType::trunc_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_trunc_out_cuda(/* actuals */ out, self);
}
std::tuple<Tensor,Tensor> CUDAFloatType::_unique(const Tensor & self, bool sorted, bool return_inverse) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_unique_cuda(/* actuals */ self, sorted, return_inverse);
}
std::tuple<Tensor,Tensor> CUDAFloatType::_unique_dim(const Tensor & self, int64_t dim, bool sorted, bool return_inverse) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_unique_dim_cuda(/* actuals */ self, dim, sorted, return_inverse);
}
Tensor CUDAFloatType::_s_where(const Tensor & condition, const Tensor & self, const Tensor & other) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_s_where_cuda(/* actuals */ condition, self, other);
}
std::tuple<Tensor,Tensor> CUDAFloatType::_weight_norm_cuda_interface(const Tensor & v, const Tensor & g, int64_t dim) const {
    const OptionalDeviceGuard device_guard(device_of(v));
    return at::native::weight_norm_cuda(/* actuals */ v, g, dim);
}
std::tuple<Tensor,Tensor> CUDAFloatType::_weight_norm_cuda_interface_backward(const Tensor & grad_w, const Tensor & saved_v, const Tensor & saved_g, const Tensor & saved_norms, int64_t dim) const {
    const OptionalDeviceGuard device_guard(device_of(grad_w));
    return at::native::weight_norm_cuda_backward(/* actuals */ grad_w, saved_v, saved_g, saved_norms, dim);
}
Tensor CUDAFloatType::_standard_gamma_grad(const Tensor & self, const Tensor & output) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_standard_gamma_grad_cuda(/* actuals */ self, output);
}
Tensor CUDAFloatType::_standard_gamma(const Tensor & self, Generator * generator) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_s_gamma_cuda(/* actuals */ self, generator);
}
Tensor CUDAFloatType::poisson(const Tensor & self, Generator * generator) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_s_poisson_cuda(/* actuals */ self, generator);
}
Tensor CUDAFloatType::native_norm(const Tensor & self, Scalar p) const {
    AT_ERROR("native_norm not supported on CUDAFloatType");
}
Tensor CUDAFloatType::_sparse_sum_backward(const Tensor & grad, const Tensor & self, IntArrayRef dim) const {
    AT_ERROR("_sparse_sum_backward not supported on CUDAFloatType");
}
Tensor CUDAFloatType::native_clone(const Tensor & self) const {
    AT_ERROR("native_clone not supported on CUDAFloatType");
}
Tensor & CUDAFloatType::native_resize_as_(Tensor & self, const Tensor & the_template) const {
    AT_ERROR("native_resize_as_ not supported on CUDAFloatType");
}
Tensor & CUDAFloatType::native_pow_out(Tensor & out, const Tensor & self, Scalar exponent) const {
    AT_ERROR("native_pow_out not supported on CUDAFloatType");
}
Tensor CUDAFloatType::native_pow(const Tensor & self, Scalar exponent) const {
    AT_ERROR("native_pow not supported on CUDAFloatType");
}
Tensor & CUDAFloatType::native_zero_(Tensor & self) const {
    AT_ERROR("native_zero_ not supported on CUDAFloatType");
}
Tensor & CUDAFloatType::s_native_addmm_out(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::s_addmm_out_sparse_dense_cuda(/* actuals */ out, self, mat1, mat2, beta, alpha);
}
Tensor CUDAFloatType::s_native_addmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::s_addmm_sparse_dense_cuda(/* actuals */ self, mat1, mat2, beta, alpha);
}
Tensor & CUDAFloatType::s_native_addmm_(Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::s_addmm_sparse_dense_cuda_(/* actuals */ self, mat1, mat2, beta, alpha);
}
Tensor CUDAFloatType::_sparse_coo_tensor_with_dims(int64_t sparse_dim, int64_t dense_dim, IntArrayRef size, const TensorOptions & options) const {
    AT_ERROR("_sparse_coo_tensor_with_dims not supported on CUDAFloatType");
}
Tensor CUDAFloatType::_sparse_coo_tensor_with_dims_and_tensors(int64_t sparse_dim, int64_t dense_dim, IntArrayRef size, const Tensor & indices, const Tensor & values, const TensorOptions & options) const {
    AT_ERROR("_sparse_coo_tensor_with_dims_and_tensors not supported on CUDAFloatType");
}
Tensor & CUDAFloatType::sparse_resize_(Tensor & self, IntArrayRef size, int64_t sparse_dim, int64_t dense_dim) const {
    AT_ERROR("sparse_resize_ not supported on CUDAFloatType");
}
Tensor & CUDAFloatType::sparse_resize_and_clear_(Tensor & self, IntArrayRef size, int64_t sparse_dim, int64_t dense_dim) const {
    AT_ERROR("sparse_resize_and_clear_ not supported on CUDAFloatType");
}
Tensor CUDAFloatType::sparse_mask(const Tensor & self, SparseTensorRef mask) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sparse_mask_cuda(/* actuals */ self, mask);
}
Tensor CUDAFloatType::to_dense(const Tensor & self) const {
    AT_ERROR("to_dense not supported on CUDAFloatType");
}
int64_t CUDAFloatType::sparse_dim(const Tensor & self) const {
    AT_ERROR("sparse_dim not supported on CUDAFloatType");
}
int64_t CUDAFloatType::dense_dim(const Tensor & self) const {
    AT_ERROR("dense_dim not supported on CUDAFloatType");
}
int64_t CUDAFloatType::_nnz(const Tensor & self) const {
    AT_ERROR("_nnz not supported on CUDAFloatType");
}
Tensor CUDAFloatType::coalesce(const Tensor & self) const {
    AT_ERROR("coalesce not supported on CUDAFloatType");
}
bool CUDAFloatType::is_coalesced(const Tensor & self) const {
    AT_ERROR("is_coalesced not supported on CUDAFloatType");
}
Tensor CUDAFloatType::_indices(const Tensor & self) const {
    AT_ERROR("_indices not supported on CUDAFloatType");
}
Tensor CUDAFloatType::_values(const Tensor & self) const {
    AT_ERROR("_values not supported on CUDAFloatType");
}
Tensor & CUDAFloatType::_coalesced_(Tensor & self, bool coalesced) const {
    AT_ERROR("_coalesced_ not supported on CUDAFloatType");
}
Tensor CUDAFloatType::indices(const Tensor & self) const {
    AT_ERROR("indices not supported on CUDAFloatType");
}
Tensor CUDAFloatType::values(const Tensor & self) const {
    AT_ERROR("values not supported on CUDAFloatType");
}
Tensor & CUDAFloatType::hspmm_out(Tensor & out, const Tensor & mat1, const Tensor & mat2) const {
    AT_ERROR("hspmm_out not supported on CUDAFloatType");
}
Tensor CUDAFloatType::hspmm(const Tensor & mat1, const Tensor & mat2) const {
    AT_ERROR("hspmm not supported on CUDAFloatType");
}
Tensor & CUDAFloatType::copy_sparse_to_sparse_(Tensor & self, const Tensor & src, bool non_blocking) const {
    AT_ERROR("copy_sparse_to_sparse_ not supported on CUDAFloatType");
}
Tensor CUDAFloatType::to_sparse(const Tensor & self, int64_t sparse_dim) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::dense_to_sparse(/* actuals */ self, sparse_dim);
}
Tensor CUDAFloatType::to_sparse(const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::dense_to_sparse(/* actuals */ self);
}
Scalar CUDAFloatType::_local_scalar_dense(const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_local_scalar_dense_cuda(/* actuals */ self);
}
std::tuple<Tensor,Tensor,Tensor> CUDAFloatType::_thnn_fused_lstm_cell(const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & cx, const Tensor & input_bias, const Tensor & hidden_bias) const {
    const OptionalDeviceGuard device_guard(device_of(input_gates));
    return at::native::_thnn_fused_lstm_cell_cuda(/* actuals */ input_gates, hidden_gates, cx, input_bias, hidden_bias);
}
std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> CUDAFloatType::_thnn_fused_lstm_cell_backward(const Tensor & grad_hy, const Tensor & grad_cy, const Tensor & cx, const Tensor & cy, const Tensor & workspace, bool has_bias) const {
    const OptionalDeviceGuard device_guard(device_of(cx));
    return at::native::_thnn_fused_lstm_cell_backward_cuda(/* actuals */ grad_hy, grad_cy, cx, cy, workspace, has_bias);
}
std::tuple<Tensor,Tensor> CUDAFloatType::_thnn_fused_gru_cell(const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & hx, const Tensor & input_bias, const Tensor & hidden_bias) const {
    const OptionalDeviceGuard device_guard(device_of(input_gates));
    return at::native::_thnn_fused_gru_cell_cuda(/* actuals */ input_gates, hidden_gates, hx, input_bias, hidden_bias);
}
std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> CUDAFloatType::_thnn_fused_gru_cell_backward(const Tensor & grad_hy, const Tensor & workspace, bool has_bias) const {
    const OptionalDeviceGuard device_guard(device_of(grad_hy));
    return at::native::_thnn_fused_gru_cell_backward_cuda(/* actuals */ grad_hy, workspace, has_bias);
}
Tensor & CUDAFloatType::tril_(Tensor & self, int64_t diagonal) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::tril_cuda_(/* actuals */ self, diagonal);
}
Tensor & CUDAFloatType::triu_(Tensor & self, int64_t diagonal) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::triu_cuda_(/* actuals */ self, diagonal);
}
Tensor & CUDAFloatType::triu_out(Tensor & out, const Tensor & self, int64_t diagonal) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::triu_cuda_out(/* actuals */ out, self, diagonal);
}
Tensor & CUDAFloatType::tril_out(Tensor & out, const Tensor & self, int64_t diagonal) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::tril_cuda_out(/* actuals */ out, self, diagonal);
}
Tensor CUDAFloatType::tril_indices(int64_t row, int64_t col, int64_t offset, const TensorOptions & options) const {
    const DeviceGuard device_guard(options.device());
    return at::native::tril_indices_cuda(/* actuals */ row, col, offset, options);
}
Tensor CUDAFloatType::triu_indices(int64_t row, int64_t col, int64_t offset, const TensorOptions & options) const {
    const DeviceGuard device_guard(options.device());
    return at::native::triu_indices_cuda(/* actuals */ row, col, offset, options);
}
Tensor CUDAFloatType::_cholesky_helper(const Tensor & self, bool upper) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cholesky_helper_cuda(/* actuals */ self, upper);
}
Tensor CUDAFloatType::_cholesky_solve_helper(const Tensor & self, const Tensor & A, bool upper) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cholesky_solve_helper_cuda(/* actuals */ self, A, upper);
}
Tensor & CUDAFloatType::histc_out(Tensor & out, const Tensor & self, int64_t bins, Scalar min, Scalar max) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_histc_out_cuda(/* actuals */ out, self, bins, min, max);
}
Tensor CUDAFloatType::histc(const Tensor & self, int64_t bins, Scalar min, Scalar max) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_histc_cuda(/* actuals */ self, bins, min, max);
}
Tensor & CUDAFloatType::adaptive_avg_pool2d_out(Tensor & output, const Tensor & self, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_avg_pool2d_out_cuda(/* actuals */ output, self, output_size);
}
Tensor CUDAFloatType::_adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_avg_pool2d_cuda(/* actuals */ self, output_size);
}
Tensor CUDAFloatType::_adaptive_avg_pool2d_backward(const Tensor & grad_output, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_avg_pool2d_backward_cuda(/* actuals */ grad_output, self);
}
std::tuple<Tensor &,Tensor &> CUDAFloatType::fractional_max_pool2d_out(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fractional_max_pool2d_out_cuda(/* actuals */ output, indices, self, kernel_size, output_size, random_samples);
}
std::tuple<Tensor,Tensor> CUDAFloatType::fractional_max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fractional_max_pool2d_cuda(/* actuals */ self, kernel_size, output_size, random_samples);
}
Tensor & CUDAFloatType::fractional_max_pool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fractional_max_pool2d_backward_out_cuda(/* actuals */ grad_input, grad_output, self, kernel_size, output_size, indices);
}
Tensor CUDAFloatType::fractional_max_pool2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fractional_max_pool2d_backward_cuda(/* actuals */ grad_output, self, kernel_size, output_size, indices);
}
std::tuple<Tensor &,Tensor &> CUDAFloatType::fractional_max_pool3d_out(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fractional_max_pool3d_out_cuda(/* actuals */ output, indices, self, kernel_size, output_size, random_samples);
}
std::tuple<Tensor,Tensor> CUDAFloatType::fractional_max_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fractional_max_pool3d_cuda(/* actuals */ self, kernel_size, output_size, random_samples);
}
Tensor & CUDAFloatType::fractional_max_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fractional_max_pool3d_backward_out_cuda(/* actuals */ grad_input, grad_output, self, kernel_size, output_size, indices);
}
Tensor CUDAFloatType::fractional_max_pool3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fractional_max_pool3d_backward_cuda(/* actuals */ grad_output, self, kernel_size, output_size, indices);
}
Tensor & CUDAFloatType::reflection_pad1d_out(Tensor & output, const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reflection_pad1d_out_cuda(/* actuals */ output, self, padding);
}
Tensor CUDAFloatType::reflection_pad1d(const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reflection_pad1d_cuda(/* actuals */ self, padding);
}
Tensor & CUDAFloatType::reflection_pad1d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reflection_pad1d_backward_out_cuda(/* actuals */ grad_input, grad_output, self, padding);
}
Tensor CUDAFloatType::reflection_pad1d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reflection_pad1d_backward_cuda(/* actuals */ grad_output, self, padding);
}
Tensor & CUDAFloatType::reflection_pad2d_out(Tensor & output, const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reflection_pad2d_out_cuda(/* actuals */ output, self, padding);
}
Tensor CUDAFloatType::reflection_pad2d(const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reflection_pad2d_cuda(/* actuals */ self, padding);
}
Tensor & CUDAFloatType::reflection_pad2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reflection_pad2d_backward_out_cuda(/* actuals */ grad_input, grad_output, self, padding);
}
Tensor CUDAFloatType::reflection_pad2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reflection_pad2d_backward_cuda(/* actuals */ grad_output, self, padding);
}
Tensor & CUDAFloatType::replication_pad1d_out(Tensor & output, const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad1d_out_cuda(/* actuals */ output, self, padding);
}
Tensor CUDAFloatType::replication_pad1d(const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad1d_cuda(/* actuals */ self, padding);
}
Tensor & CUDAFloatType::replication_pad1d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad1d_backward_out_cuda(/* actuals */ grad_input, grad_output, self, padding);
}
Tensor CUDAFloatType::replication_pad1d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad1d_backward_cuda(/* actuals */ grad_output, self, padding);
}
Tensor & CUDAFloatType::replication_pad2d_out(Tensor & output, const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad2d_out_cuda(/* actuals */ output, self, padding);
}
Tensor CUDAFloatType::replication_pad2d(const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad2d_cuda(/* actuals */ self, padding);
}
Tensor & CUDAFloatType::replication_pad2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad2d_backward_out_cuda(/* actuals */ grad_input, grad_output, self, padding);
}
Tensor CUDAFloatType::replication_pad2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad2d_backward_cuda(/* actuals */ grad_output, self, padding);
}
Tensor & CUDAFloatType::replication_pad3d_out(Tensor & output, const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad3d_out_cuda(/* actuals */ output, self, padding);
}
Tensor CUDAFloatType::replication_pad3d(const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad3d_cuda(/* actuals */ self, padding);
}
Tensor & CUDAFloatType::replication_pad3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad3d_backward_out_cuda(/* actuals */ grad_input, grad_output, self, padding);
}
Tensor CUDAFloatType::replication_pad3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad3d_backward_cuda(/* actuals */ grad_output, self, padding);
}

}
