// required for old g++ to compile PRId64 macros, see
// https://github.com/pytorch/pytorch/issues/3571
// for context
#define __STDC_FORMAT_MACROS

#include <ATen/CPUType.h>

// @generated by aten/src/ATen/gen.py

#include <TH/TH.h>
#include <TH/THTensor.hpp>
#include <THNN/THNN.h>
#undef THNN_
#include <c10/core/TensorImpl.h>
#include <ATen/CPUGenerator.h>
#include <c10/core/Allocator.h>
#include <ATen/DeviceGuard.h>
#include <ATen/NativeFunctions.h>
#include <ATen/Utils.h>
#include <ATen/WrapDimUtils.h>
#include <ATen/Dispatch.h>
#include <c10/util/Half.h>
#include <c10/core/TensorImpl.h>
#include <c10/core/UndefinedTensorImpl.h>
#include <c10/util/Optional.h>

#include <cstddef>
#include <functional>
#include <memory>
#include <utility>

#include <ATen/Config.h>


namespace at {

CPUType::CPUType()
  : CPUTypeDefault(CPUTensorId(), /*is_variable=*/false, /*is_undefined=*/false) {}

Backend CPUType::backend() const {
  return Backend::CPU;
}

const char * CPUType::toString() const {
  return "CPUType";
}

TypeID CPUType::ID() const {
  return TypeID::CPU;
}

/* example
Tensor * CPUType::add(Tensor & a, Tensor & b) {
  std::cout << "add Tensor with backend CPU\n";
  return &a;
}
*/

Tensor & CPUType::_th_set_(Tensor & self, Storage source) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto source_ = checked_storage(source,"source",2, DeviceType::CPU, at::scalarTypeToTypeMeta(ScalarType::Bool));
            THBoolTensor_setStorage(self_, source_.unsafeGetStorageImpl(), 0, {static_cast<int64_t>(source.size())}, {});
            self_->maybe_zero_dim(false);
            return self;
            break;
        }
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto source_ = checked_storage(source,"source",2, DeviceType::CPU, at::scalarTypeToTypeMeta(ScalarType::Byte));
            THByteTensor_setStorage(self_, source_.unsafeGetStorageImpl(), 0, {static_cast<int64_t>(source.size())}, {});
            self_->maybe_zero_dim(false);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto source_ = checked_storage(source,"source",2, DeviceType::CPU, at::scalarTypeToTypeMeta(ScalarType::Char));
            THCharTensor_setStorage(self_, source_.unsafeGetStorageImpl(), 0, {static_cast<int64_t>(source.size())}, {});
            self_->maybe_zero_dim(false);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto source_ = checked_storage(source,"source",2, DeviceType::CPU, at::scalarTypeToTypeMeta(ScalarType::Double));
            THDoubleTensor_setStorage(self_, source_.unsafeGetStorageImpl(), 0, {static_cast<int64_t>(source.size())}, {});
            self_->maybe_zero_dim(false);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto source_ = checked_storage(source,"source",2, DeviceType::CPU, at::scalarTypeToTypeMeta(ScalarType::Float));
            THFloatTensor_setStorage(self_, source_.unsafeGetStorageImpl(), 0, {static_cast<int64_t>(source.size())}, {});
            self_->maybe_zero_dim(false);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto source_ = checked_storage(source,"source",2, DeviceType::CPU, at::scalarTypeToTypeMeta(ScalarType::Int));
            THIntTensor_setStorage(self_, source_.unsafeGetStorageImpl(), 0, {static_cast<int64_t>(source.size())}, {});
            self_->maybe_zero_dim(false);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto source_ = checked_storage(source,"source",2, DeviceType::CPU, at::scalarTypeToTypeMeta(ScalarType::Long));
            THLongTensor_setStorage(self_, source_.unsafeGetStorageImpl(), 0, {static_cast<int64_t>(source.size())}, {});
            self_->maybe_zero_dim(false);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto source_ = checked_storage(source,"source",2, DeviceType::CPU, at::scalarTypeToTypeMeta(ScalarType::Short));
            THShortTensor_setStorage(self_, source_.unsafeGetStorageImpl(), 0, {static_cast<int64_t>(source.size())}, {});
            self_->maybe_zero_dim(false);
            return self;
            break;
        }
        case ScalarType::Half: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Half);
            auto source_ = checked_storage(source,"source",2, DeviceType::CPU, at::scalarTypeToTypeMeta(ScalarType::Half));
            THHalfTensor_setStorage(self_, source_.unsafeGetStorageImpl(), 0, {static_cast<int64_t>(source.size())}, {});
            self_->maybe_zero_dim(false);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_set_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_set_(Tensor & self, Storage source, int64_t storage_offset, IntArrayRef size, IntArrayRef stride) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto source_ = checked_storage(source,"source",2, DeviceType::CPU, at::scalarTypeToTypeMeta(ScalarType::Bool));
            THBoolTensor_setStorage(self_, source_.unsafeGetStorageImpl(), storage_offset, size, stride);
            self_->maybe_zero_dim(size.size() == 0);
            return self;
            break;
        }
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto source_ = checked_storage(source,"source",2, DeviceType::CPU, at::scalarTypeToTypeMeta(ScalarType::Byte));
            THByteTensor_setStorage(self_, source_.unsafeGetStorageImpl(), storage_offset, size, stride);
            self_->maybe_zero_dim(size.size() == 0);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto source_ = checked_storage(source,"source",2, DeviceType::CPU, at::scalarTypeToTypeMeta(ScalarType::Char));
            THCharTensor_setStorage(self_, source_.unsafeGetStorageImpl(), storage_offset, size, stride);
            self_->maybe_zero_dim(size.size() == 0);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto source_ = checked_storage(source,"source",2, DeviceType::CPU, at::scalarTypeToTypeMeta(ScalarType::Double));
            THDoubleTensor_setStorage(self_, source_.unsafeGetStorageImpl(), storage_offset, size, stride);
            self_->maybe_zero_dim(size.size() == 0);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto source_ = checked_storage(source,"source",2, DeviceType::CPU, at::scalarTypeToTypeMeta(ScalarType::Float));
            THFloatTensor_setStorage(self_, source_.unsafeGetStorageImpl(), storage_offset, size, stride);
            self_->maybe_zero_dim(size.size() == 0);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto source_ = checked_storage(source,"source",2, DeviceType::CPU, at::scalarTypeToTypeMeta(ScalarType::Int));
            THIntTensor_setStorage(self_, source_.unsafeGetStorageImpl(), storage_offset, size, stride);
            self_->maybe_zero_dim(size.size() == 0);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto source_ = checked_storage(source,"source",2, DeviceType::CPU, at::scalarTypeToTypeMeta(ScalarType::Long));
            THLongTensor_setStorage(self_, source_.unsafeGetStorageImpl(), storage_offset, size, stride);
            self_->maybe_zero_dim(size.size() == 0);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto source_ = checked_storage(source,"source",2, DeviceType::CPU, at::scalarTypeToTypeMeta(ScalarType::Short));
            THShortTensor_setStorage(self_, source_.unsafeGetStorageImpl(), storage_offset, size, stride);
            self_->maybe_zero_dim(size.size() == 0);
            return self;
            break;
        }
        case ScalarType::Half: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Half);
            auto source_ = checked_storage(source,"source",2, DeviceType::CPU, at::scalarTypeToTypeMeta(ScalarType::Half));
            THHalfTensor_setStorage(self_, source_.unsafeGetStorageImpl(), storage_offset, size, stride);
            self_->maybe_zero_dim(size.size() == 0);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_set_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_set_(Tensor & self, const Tensor & source) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto source_ = checked_tensor_unwrap(source,"source",2, false, Backend::CPU, ScalarType::Bool);
            THBoolTensor_set(self_, source_);
            self_->maybe_zero_dim(source_->dim() == 0);
            return self;
            break;
        }
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto source_ = checked_tensor_unwrap(source,"source",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_set(self_, source_);
            self_->maybe_zero_dim(source_->dim() == 0);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto source_ = checked_tensor_unwrap(source,"source",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_set(self_, source_);
            self_->maybe_zero_dim(source_->dim() == 0);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto source_ = checked_tensor_unwrap(source,"source",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_set(self_, source_);
            self_->maybe_zero_dim(source_->dim() == 0);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto source_ = checked_tensor_unwrap(source,"source",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_set(self_, source_);
            self_->maybe_zero_dim(source_->dim() == 0);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto source_ = checked_tensor_unwrap(source,"source",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_set(self_, source_);
            self_->maybe_zero_dim(source_->dim() == 0);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto source_ = checked_tensor_unwrap(source,"source",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_set(self_, source_);
            self_->maybe_zero_dim(source_->dim() == 0);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto source_ = checked_tensor_unwrap(source,"source",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_set(self_, source_);
            self_->maybe_zero_dim(source_->dim() == 0);
            return self;
            break;
        }
        case ScalarType::Half: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Half);
            auto source_ = checked_tensor_unwrap(source,"source",2, false, Backend::CPU, ScalarType::Half);
            THHalfTensor_set(self_, source_);
            self_->maybe_zero_dim(source_->dim() == 0);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_set_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_set_(Tensor & self) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            THBoolTensor_setStorage(self_, NULL, 0, {0}, {});
            self_->maybe_zero_dim(false);
            return self;
            break;
        }
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_setStorage(self_, NULL, 0, {0}, {});
            self_->maybe_zero_dim(false);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            THCharTensor_setStorage(self_, NULL, 0, {0}, {});
            self_->maybe_zero_dim(false);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_setStorage(self_, NULL, 0, {0}, {});
            self_->maybe_zero_dim(false);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_setStorage(self_, NULL, 0, {0}, {});
            self_->maybe_zero_dim(false);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            THIntTensor_setStorage(self_, NULL, 0, {0}, {});
            self_->maybe_zero_dim(false);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            THLongTensor_setStorage(self_, NULL, 0, {0}, {});
            self_->maybe_zero_dim(false);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            THShortTensor_setStorage(self_, NULL, 0, {0}, {});
            self_->maybe_zero_dim(false);
            return self;
            break;
        }
        case ScalarType::Half: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Half);
            THHalfTensor_setStorage(self_, NULL, 0, {0}, {});
            self_->maybe_zero_dim(false);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_set_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_fill_(Tensor & self, Scalar value) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto value_ = value.toBool();
            THBoolTensor_fill(self_, value_);
            return self;
            break;
        }
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto value_ = value.toByte();
            THByteTensor_fill(self_, value_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto value_ = value.toChar();
            THCharTensor_fill(self_, value_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto value_ = value.toDouble();
            THDoubleTensor_fill(self_, value_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto value_ = value.toFloat();
            THFloatTensor_fill(self_, value_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto value_ = value.toInt();
            THIntTensor_fill(self_, value_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto value_ = value.toLong();
            THLongTensor_fill(self_, value_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto value_ = value.toShort();
            THShortTensor_fill(self_, value_);
            return self;
            break;
        }
        case ScalarType::Half: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Half);
            auto value_ = value.toHalf();
            THHalfTensor_fill(self_, value_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_fill_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_fill_(Tensor & self, const Tensor & value) const {
    // DeviceGuard omitted
    if (value.dim() == 0) {
        return static_cast<const TypeExtendedInterface*>(this)->_th_fill_(self, value.item());
    }
    AT_ERROR("_th_fill_ only supports a 0-dimensional value tensor, but got tensor "
        "with ", value.dim(), " dimension(s).");
}
bool CPUType::_th_is_set_to(const Tensor & self, const Tensor & tensor) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto tensor_ = checked_tensor_unwrap(tensor,"tensor",2, false, Backend::CPU, ScalarType::Bool);
            return THBoolTensor_isSetTo(self_, tensor_);
            break;
        }
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto tensor_ = checked_tensor_unwrap(tensor,"tensor",2, false, Backend::CPU, ScalarType::Byte);
            return THByteTensor_isSetTo(self_, tensor_);
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto tensor_ = checked_tensor_unwrap(tensor,"tensor",2, false, Backend::CPU, ScalarType::Char);
            return THCharTensor_isSetTo(self_, tensor_);
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto tensor_ = checked_tensor_unwrap(tensor,"tensor",2, false, Backend::CPU, ScalarType::Double);
            return THDoubleTensor_isSetTo(self_, tensor_);
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto tensor_ = checked_tensor_unwrap(tensor,"tensor",2, false, Backend::CPU, ScalarType::Float);
            return THFloatTensor_isSetTo(self_, tensor_);
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto tensor_ = checked_tensor_unwrap(tensor,"tensor",2, false, Backend::CPU, ScalarType::Int);
            return THIntTensor_isSetTo(self_, tensor_);
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto tensor_ = checked_tensor_unwrap(tensor,"tensor",2, false, Backend::CPU, ScalarType::Long);
            return THLongTensor_isSetTo(self_, tensor_);
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto tensor_ = checked_tensor_unwrap(tensor,"tensor",2, false, Backend::CPU, ScalarType::Short);
            return THShortTensor_isSetTo(self_, tensor_);
            break;
        }
        case ScalarType::Half: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Half);
            auto tensor_ = checked_tensor_unwrap(tensor,"tensor",2, false, Backend::CPU, ScalarType::Half);
            return THHalfTensor_isSetTo(self_, tensor_);
            break;
        }
        default:
            AT_ERROR("_th_is_set_to not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_masked_fill_(Tensor & self, const Tensor & mask, Scalar value) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Byte);
            auto value_ = value.toByte();
            THByteTensor_maskedFill(self_, mask_, value_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Byte);
            auto value_ = value.toChar();
            THCharTensor_maskedFill(self_, mask_, value_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Byte);
            auto value_ = value.toDouble();
            THDoubleTensor_maskedFill(self_, mask_, value_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Byte);
            auto value_ = value.toFloat();
            THFloatTensor_maskedFill(self_, mask_, value_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Byte);
            auto value_ = value.toInt();
            THIntTensor_maskedFill(self_, mask_, value_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Byte);
            auto value_ = value.toLong();
            THLongTensor_maskedFill(self_, mask_, value_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Byte);
            auto value_ = value.toShort();
            THShortTensor_maskedFill(self_, mask_, value_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_masked_fill_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_masked_fill_(Tensor & self, const Tensor & mask, const Tensor & value) const {
    // DeviceGuard omitted
    if (value.dim() == 0) {
        return static_cast<const TypeExtendedInterface*>(this)->_th_masked_fill_(self, mask, value.item());
    }
    AT_ERROR("_th_masked_fill_ only supports a 0-dimensional value tensor, but got tensor "
        "with ", value.dim(), " dimension(s).");
}
Tensor & CPUType::_th_masked_fill_bool_(Tensor & self, const Tensor & mask, Scalar value) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Bool);
            auto value_ = value.toByte();
            THByteTensor_maskedFillBool(self_, mask_, value_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Bool);
            auto value_ = value.toChar();
            THCharTensor_maskedFillBool(self_, mask_, value_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Bool);
            auto value_ = value.toDouble();
            THDoubleTensor_maskedFillBool(self_, mask_, value_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Bool);
            auto value_ = value.toFloat();
            THFloatTensor_maskedFillBool(self_, mask_, value_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Bool);
            auto value_ = value.toInt();
            THIntTensor_maskedFillBool(self_, mask_, value_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Bool);
            auto value_ = value.toLong();
            THLongTensor_maskedFillBool(self_, mask_, value_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Bool);
            auto value_ = value.toShort();
            THShortTensor_maskedFillBool(self_, mask_, value_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_masked_fill_bool_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_masked_fill_bool_(Tensor & self, const Tensor & mask, const Tensor & value) const {
    // DeviceGuard omitted
    if (value.dim() == 0) {
        return static_cast<const TypeExtendedInterface*>(this)->_th_masked_fill_bool_(self, mask, value.item());
    }
    AT_ERROR("_th_masked_fill_bool_ only supports a 0-dimensional value tensor, but got tensor "
        "with ", value.dim(), " dimension(s).");
}
Tensor & CPUType::s__th_masked_scatter_(Tensor & self, const Tensor & mask, const Tensor & source) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Byte);
            auto source_ = checked_tensor_unwrap(source,"source",3, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_maskedCopy(self_, mask_, source_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Byte);
            auto source_ = checked_tensor_unwrap(source,"source",3, false, Backend::CPU, ScalarType::Char);
            THCharTensor_maskedCopy(self_, mask_, source_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Byte);
            auto source_ = checked_tensor_unwrap(source,"source",3, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_maskedCopy(self_, mask_, source_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Byte);
            auto source_ = checked_tensor_unwrap(source,"source",3, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_maskedCopy(self_, mask_, source_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Byte);
            auto source_ = checked_tensor_unwrap(source,"source",3, false, Backend::CPU, ScalarType::Int);
            THIntTensor_maskedCopy(self_, mask_, source_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Byte);
            auto source_ = checked_tensor_unwrap(source,"source",3, false, Backend::CPU, ScalarType::Long);
            THLongTensor_maskedCopy(self_, mask_, source_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Byte);
            auto source_ = checked_tensor_unwrap(source,"source",3, false, Backend::CPU, ScalarType::Short);
            THShortTensor_maskedCopy(self_, mask_, source_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_masked_scatter_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_masked_scatter_bool_(Tensor & self, const Tensor & mask, const Tensor & source) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Bool);
            auto source_ = checked_tensor_unwrap(source,"source",3, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_maskedCopyBool(self_, mask_, source_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Bool);
            auto source_ = checked_tensor_unwrap(source,"source",3, false, Backend::CPU, ScalarType::Char);
            THCharTensor_maskedCopyBool(self_, mask_, source_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Bool);
            auto source_ = checked_tensor_unwrap(source,"source",3, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_maskedCopyBool(self_, mask_, source_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Bool);
            auto source_ = checked_tensor_unwrap(source,"source",3, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_maskedCopyBool(self_, mask_, source_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Bool);
            auto source_ = checked_tensor_unwrap(source,"source",3, false, Backend::CPU, ScalarType::Int);
            THIntTensor_maskedCopyBool(self_, mask_, source_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Bool);
            auto source_ = checked_tensor_unwrap(source,"source",3, false, Backend::CPU, ScalarType::Long);
            THLongTensor_maskedCopyBool(self_, mask_, source_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Bool);
            auto source_ = checked_tensor_unwrap(source,"source",3, false, Backend::CPU, ScalarType::Short);
            THShortTensor_maskedCopyBool(self_, mask_, source_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_masked_scatter_bool_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_masked_select_out(Tensor & result, const Tensor & self, const Tensor & mask) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_maskedSelect(result_, self_, mask_);
            result_->maybe_zero_dim(self_->dim() == 0 && mask_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Byte);
            THCharTensor_maskedSelect(result_, self_, mask_);
            result_->maybe_zero_dim(self_->dim() == 0 && mask_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Byte);
            THDoubleTensor_maskedSelect(result_, self_, mask_);
            result_->maybe_zero_dim(self_->dim() == 0 && mask_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Byte);
            THFloatTensor_maskedSelect(result_, self_, mask_);
            result_->maybe_zero_dim(self_->dim() == 0 && mask_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Byte);
            THIntTensor_maskedSelect(result_, self_, mask_);
            result_->maybe_zero_dim(self_->dim() == 0 && mask_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Byte);
            THLongTensor_maskedSelect(result_, self_, mask_);
            result_->maybe_zero_dim(self_->dim() == 0 && mask_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Byte);
            THShortTensor_maskedSelect(result_, self_, mask_);
            result_->maybe_zero_dim(self_->dim() == 0 && mask_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_masked_select_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::s__th_masked_select(const Tensor & self, const Tensor & mask) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_maskedSelect(result_, self_, mask_);
            result_->maybe_zero_dim(self_->dim() == 0 && mask_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Byte);
            THCharTensor_maskedSelect(result_, self_, mask_);
            result_->maybe_zero_dim(self_->dim() == 0 && mask_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Byte);
            THDoubleTensor_maskedSelect(result_, self_, mask_);
            result_->maybe_zero_dim(self_->dim() == 0 && mask_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Byte);
            THFloatTensor_maskedSelect(result_, self_, mask_);
            result_->maybe_zero_dim(self_->dim() == 0 && mask_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Byte);
            THIntTensor_maskedSelect(result_, self_, mask_);
            result_->maybe_zero_dim(self_->dim() == 0 && mask_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Byte);
            THLongTensor_maskedSelect(result_, self_, mask_);
            result_->maybe_zero_dim(self_->dim() == 0 && mask_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Byte);
            THShortTensor_maskedSelect(result_, self_, mask_);
            result_->maybe_zero_dim(self_->dim() == 0 && mask_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_masked_select not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_masked_select_bool_out(Tensor & result, const Tensor & self, const Tensor & mask) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Bool);
            THByteTensor_maskedSelectBool(result_, self_, mask_);
            result_->maybe_zero_dim(self_->dim() == 0 && mask_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Bool);
            THCharTensor_maskedSelectBool(result_, self_, mask_);
            result_->maybe_zero_dim(self_->dim() == 0 && mask_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Bool);
            THDoubleTensor_maskedSelectBool(result_, self_, mask_);
            result_->maybe_zero_dim(self_->dim() == 0 && mask_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Bool);
            THFloatTensor_maskedSelectBool(result_, self_, mask_);
            result_->maybe_zero_dim(self_->dim() == 0 && mask_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Bool);
            THIntTensor_maskedSelectBool(result_, self_, mask_);
            result_->maybe_zero_dim(self_->dim() == 0 && mask_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Bool);
            THLongTensor_maskedSelectBool(result_, self_, mask_);
            result_->maybe_zero_dim(self_->dim() == 0 && mask_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Bool);
            THShortTensor_maskedSelectBool(result_, self_, mask_);
            result_->maybe_zero_dim(self_->dim() == 0 && mask_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_masked_select_bool_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_masked_select_bool(const Tensor & self, const Tensor & mask) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Bool);
            THByteTensor_maskedSelectBool(result_, self_, mask_);
            result_->maybe_zero_dim(self_->dim() == 0 && mask_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Bool);
            THCharTensor_maskedSelectBool(result_, self_, mask_);
            result_->maybe_zero_dim(self_->dim() == 0 && mask_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Bool);
            THDoubleTensor_maskedSelectBool(result_, self_, mask_);
            result_->maybe_zero_dim(self_->dim() == 0 && mask_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Bool);
            THFloatTensor_maskedSelectBool(result_, self_, mask_);
            result_->maybe_zero_dim(self_->dim() == 0 && mask_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Bool);
            THIntTensor_maskedSelectBool(result_, self_, mask_);
            result_->maybe_zero_dim(self_->dim() == 0 && mask_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Bool);
            THLongTensor_maskedSelectBool(result_, self_, mask_);
            result_->maybe_zero_dim(self_->dim() == 0 && mask_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto mask_ = checked_tensor_unwrap(mask,"mask",2, false, Backend::CPU, ScalarType::Bool);
            THShortTensor_maskedSelectBool(result_, self_, mask_);
            result_->maybe_zero_dim(self_->dim() == 0 && mask_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_masked_select_bool not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_nonzero_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            THBoolTensor_nonzero(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_nonzero(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            THCharTensor_nonzero(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_nonzero(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_nonzero(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            THIntTensor_nonzero(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            THLongTensor_nonzero(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            THShortTensor_nonzero(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_nonzero_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_nonzero(const Tensor & self) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            THBoolTensor_nonzero(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_nonzero(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            THCharTensor_nonzero(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_nonzero(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_nonzero(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            THIntTensor_nonzero(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            THLongTensor_nonzero(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            THShortTensor_nonzero(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_nonzero not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_clone(const Tensor & self) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            return Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim((THBoolTensor_newClone(self_))->maybe_zero_dim(self_->dim() == 0)));
            break;
        }
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            return Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim((THByteTensor_newClone(self_))->maybe_zero_dim(self_->dim() == 0)));
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            return Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim((THCharTensor_newClone(self_))->maybe_zero_dim(self_->dim() == 0)));
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            return Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim((THDoubleTensor_newClone(self_))->maybe_zero_dim(self_->dim() == 0)));
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            return Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim((THFloatTensor_newClone(self_))->maybe_zero_dim(self_->dim() == 0)));
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            return Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim((THIntTensor_newClone(self_))->maybe_zero_dim(self_->dim() == 0)));
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            return Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim((THLongTensor_newClone(self_))->maybe_zero_dim(self_->dim() == 0)));
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            return Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim((THShortTensor_newClone(self_))->maybe_zero_dim(self_->dim() == 0)));
            break;
        }
        case ScalarType::Half: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Half);
            return Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim((THHalfTensor_newClone(self_))->maybe_zero_dim(self_->dim() == 0)));
            break;
        }
        default:
            AT_ERROR("_th_clone not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_view(const Tensor & self, IntArrayRef size) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            return Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim((THBoolTensor_newView(self_, size))->maybe_zero_dim(size.size() == 0)));
            break;
        }
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            return Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim((THByteTensor_newView(self_, size))->maybe_zero_dim(size.size() == 0)));
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            return Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim((THCharTensor_newView(self_, size))->maybe_zero_dim(size.size() == 0)));
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            return Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim((THDoubleTensor_newView(self_, size))->maybe_zero_dim(size.size() == 0)));
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            return Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim((THFloatTensor_newView(self_, size))->maybe_zero_dim(size.size() == 0)));
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            return Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim((THIntTensor_newView(self_, size))->maybe_zero_dim(size.size() == 0)));
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            return Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim((THLongTensor_newView(self_, size))->maybe_zero_dim(size.size() == 0)));
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            return Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim((THShortTensor_newView(self_, size))->maybe_zero_dim(size.size() == 0)));
            break;
        }
        case ScalarType::Half: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Half);
            return Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim((THHalfTensor_newView(self_, size))->maybe_zero_dim(size.size() == 0)));
            break;
        }
        default:
            AT_ERROR("_th_view not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_resize_as_(Tensor & self, const Tensor & the_template) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto the_template_ = checked_tensor_unwrap(the_template,"the_template",2, false, Backend::CPU, ScalarType::Bool);
            THBoolTensor_resizeAs(self_, the_template_);
            self_->maybe_zero_dim(the_template_->dim() == 0);
            return self;
            break;
        }
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto the_template_ = checked_tensor_unwrap(the_template,"the_template",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_resizeAs(self_, the_template_);
            self_->maybe_zero_dim(the_template_->dim() == 0);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto the_template_ = checked_tensor_unwrap(the_template,"the_template",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_resizeAs(self_, the_template_);
            self_->maybe_zero_dim(the_template_->dim() == 0);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto the_template_ = checked_tensor_unwrap(the_template,"the_template",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_resizeAs(self_, the_template_);
            self_->maybe_zero_dim(the_template_->dim() == 0);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto the_template_ = checked_tensor_unwrap(the_template,"the_template",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_resizeAs(self_, the_template_);
            self_->maybe_zero_dim(the_template_->dim() == 0);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto the_template_ = checked_tensor_unwrap(the_template,"the_template",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_resizeAs(self_, the_template_);
            self_->maybe_zero_dim(the_template_->dim() == 0);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto the_template_ = checked_tensor_unwrap(the_template,"the_template",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_resizeAs(self_, the_template_);
            self_->maybe_zero_dim(the_template_->dim() == 0);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto the_template_ = checked_tensor_unwrap(the_template,"the_template",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_resizeAs(self_, the_template_);
            self_->maybe_zero_dim(the_template_->dim() == 0);
            return self;
            break;
        }
        case ScalarType::Half: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Half);
            auto the_template_ = checked_tensor_unwrap(the_template,"the_template",2, false, Backend::CPU, ScalarType::Half);
            THHalfTensor_resizeAs(self_, the_template_);
            self_->maybe_zero_dim(the_template_->dim() == 0);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_resize_as_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_index_select_out(Tensor & result, const Tensor & self, int64_t dim, const Tensor & index) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            THByteTensor_indexSelect(result_, self_, dim, index_);
            result_->maybe_zero_dim(self_->dim() == 0 && index_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            THCharTensor_indexSelect(result_, self_, dim, index_);
            result_->maybe_zero_dim(self_->dim() == 0 && index_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            THDoubleTensor_indexSelect(result_, self_, dim, index_);
            result_->maybe_zero_dim(self_->dim() == 0 && index_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            THFloatTensor_indexSelect(result_, self_, dim, index_);
            result_->maybe_zero_dim(self_->dim() == 0 && index_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            THIntTensor_indexSelect(result_, self_, dim, index_);
            result_->maybe_zero_dim(self_->dim() == 0 && index_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            THLongTensor_indexSelect(result_, self_, dim, index_);
            result_->maybe_zero_dim(self_->dim() == 0 && index_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            THShortTensor_indexSelect(result_, self_, dim, index_);
            result_->maybe_zero_dim(self_->dim() == 0 && index_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_index_select_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_index_select(const Tensor & self, int64_t dim, const Tensor & index) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            THByteTensor_indexSelect(result_, self_, dim, index_);
            result_->maybe_zero_dim(self_->dim() == 0 && index_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            THCharTensor_indexSelect(result_, self_, dim, index_);
            result_->maybe_zero_dim(self_->dim() == 0 && index_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            THDoubleTensor_indexSelect(result_, self_, dim, index_);
            result_->maybe_zero_dim(self_->dim() == 0 && index_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            THFloatTensor_indexSelect(result_, self_, dim, index_);
            result_->maybe_zero_dim(self_->dim() == 0 && index_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            THIntTensor_indexSelect(result_, self_, dim, index_);
            result_->maybe_zero_dim(self_->dim() == 0 && index_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            THLongTensor_indexSelect(result_, self_, dim, index_);
            result_->maybe_zero_dim(self_->dim() == 0 && index_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            THShortTensor_indexSelect(result_, self_, dim, index_);
            result_->maybe_zero_dim(self_->dim() == 0 && index_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_index_select not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_index_copy_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto source_ = checked_tensor_unwrap(source,"source",4, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_indexCopy(self_, dim, index_, source_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto source_ = checked_tensor_unwrap(source,"source",4, false, Backend::CPU, ScalarType::Char);
            THCharTensor_indexCopy(self_, dim, index_, source_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto source_ = checked_tensor_unwrap(source,"source",4, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_indexCopy(self_, dim, index_, source_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto source_ = checked_tensor_unwrap(source,"source",4, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_indexCopy(self_, dim, index_, source_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto source_ = checked_tensor_unwrap(source,"source",4, false, Backend::CPU, ScalarType::Int);
            THIntTensor_indexCopy(self_, dim, index_, source_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto source_ = checked_tensor_unwrap(source,"source",4, false, Backend::CPU, ScalarType::Long);
            THLongTensor_indexCopy(self_, dim, index_, source_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto source_ = checked_tensor_unwrap(source,"source",4, false, Backend::CPU, ScalarType::Short);
            THShortTensor_indexCopy(self_, dim, index_, source_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_index_copy_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_take_out(Tensor & result, const Tensor & self, const Tensor & index) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto index_ = checked_tensor_unwrap(index,"index",2, false, Backend::CPU, ScalarType::Long);
            THByteTensor_take(result_, self_, index_);
            result_->maybe_zero_dim(index_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto index_ = checked_tensor_unwrap(index,"index",2, false, Backend::CPU, ScalarType::Long);
            THCharTensor_take(result_, self_, index_);
            result_->maybe_zero_dim(index_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto index_ = checked_tensor_unwrap(index,"index",2, false, Backend::CPU, ScalarType::Long);
            THDoubleTensor_take(result_, self_, index_);
            result_->maybe_zero_dim(index_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto index_ = checked_tensor_unwrap(index,"index",2, false, Backend::CPU, ScalarType::Long);
            THFloatTensor_take(result_, self_, index_);
            result_->maybe_zero_dim(index_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto index_ = checked_tensor_unwrap(index,"index",2, false, Backend::CPU, ScalarType::Long);
            THIntTensor_take(result_, self_, index_);
            result_->maybe_zero_dim(index_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto index_ = checked_tensor_unwrap(index,"index",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_take(result_, self_, index_);
            result_->maybe_zero_dim(index_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto index_ = checked_tensor_unwrap(index,"index",2, false, Backend::CPU, ScalarType::Long);
            THShortTensor_take(result_, self_, index_);
            result_->maybe_zero_dim(index_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_take_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_take(const Tensor & self, const Tensor & index) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto index_ = checked_tensor_unwrap(index,"index",2, false, Backend::CPU, ScalarType::Long);
            THByteTensor_take(result_, self_, index_);
            result_->maybe_zero_dim(index_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto index_ = checked_tensor_unwrap(index,"index",2, false, Backend::CPU, ScalarType::Long);
            THCharTensor_take(result_, self_, index_);
            result_->maybe_zero_dim(index_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto index_ = checked_tensor_unwrap(index,"index",2, false, Backend::CPU, ScalarType::Long);
            THDoubleTensor_take(result_, self_, index_);
            result_->maybe_zero_dim(index_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto index_ = checked_tensor_unwrap(index,"index",2, false, Backend::CPU, ScalarType::Long);
            THFloatTensor_take(result_, self_, index_);
            result_->maybe_zero_dim(index_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto index_ = checked_tensor_unwrap(index,"index",2, false, Backend::CPU, ScalarType::Long);
            THIntTensor_take(result_, self_, index_);
            result_->maybe_zero_dim(index_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto index_ = checked_tensor_unwrap(index,"index",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_take(result_, self_, index_);
            result_->maybe_zero_dim(index_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto index_ = checked_tensor_unwrap(index,"index",2, false, Backend::CPU, ScalarType::Long);
            THShortTensor_take(result_, self_, index_);
            result_->maybe_zero_dim(index_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_take not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_put_(Tensor & self, const Tensor & index, const Tensor & source, bool accumulate) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto index_ = checked_tensor_unwrap(index,"index",2, false, Backend::CPU, ScalarType::Long);
            auto source_ = checked_tensor_unwrap(source,"source",3, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_put(self_, index_, source_, accumulate);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto index_ = checked_tensor_unwrap(index,"index",2, false, Backend::CPU, ScalarType::Long);
            auto source_ = checked_tensor_unwrap(source,"source",3, false, Backend::CPU, ScalarType::Char);
            THCharTensor_put(self_, index_, source_, accumulate);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto index_ = checked_tensor_unwrap(index,"index",2, false, Backend::CPU, ScalarType::Long);
            auto source_ = checked_tensor_unwrap(source,"source",3, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_put(self_, index_, source_, accumulate);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto index_ = checked_tensor_unwrap(index,"index",2, false, Backend::CPU, ScalarType::Long);
            auto source_ = checked_tensor_unwrap(source,"source",3, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_put(self_, index_, source_, accumulate);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto index_ = checked_tensor_unwrap(index,"index",2, false, Backend::CPU, ScalarType::Long);
            auto source_ = checked_tensor_unwrap(source,"source",3, false, Backend::CPU, ScalarType::Int);
            THIntTensor_put(self_, index_, source_, accumulate);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto index_ = checked_tensor_unwrap(index,"index",2, false, Backend::CPU, ScalarType::Long);
            auto source_ = checked_tensor_unwrap(source,"source",3, false, Backend::CPU, ScalarType::Long);
            THLongTensor_put(self_, index_, source_, accumulate);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto index_ = checked_tensor_unwrap(index,"index",2, false, Backend::CPU, ScalarType::Long);
            auto source_ = checked_tensor_unwrap(source,"source",3, false, Backend::CPU, ScalarType::Short);
            THShortTensor_put(self_, index_, source_, accumulate);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_put_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_index_add_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto source_ = checked_tensor_unwrap(source,"source",4, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_indexAdd(self_, dim, index_, source_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto source_ = checked_tensor_unwrap(source,"source",4, false, Backend::CPU, ScalarType::Char);
            THCharTensor_indexAdd(self_, dim, index_, source_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto source_ = checked_tensor_unwrap(source,"source",4, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_indexAdd(self_, dim, index_, source_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto source_ = checked_tensor_unwrap(source,"source",4, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_indexAdd(self_, dim, index_, source_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto source_ = checked_tensor_unwrap(source,"source",4, false, Backend::CPU, ScalarType::Int);
            THIntTensor_indexAdd(self_, dim, index_, source_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto source_ = checked_tensor_unwrap(source,"source",4, false, Backend::CPU, ScalarType::Long);
            THLongTensor_indexAdd(self_, dim, index_, source_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto source_ = checked_tensor_unwrap(source,"source",4, false, Backend::CPU, ScalarType::Short);
            THShortTensor_indexAdd(self_, dim, index_, source_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_index_add_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_index_fill_(Tensor & self, int64_t dim, const Tensor & index, Scalar value) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto value_ = value.toByte();
            THByteTensor_indexFill(self_, dim, index_, value_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto value_ = value.toChar();
            THCharTensor_indexFill(self_, dim, index_, value_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto value_ = value.toDouble();
            THDoubleTensor_indexFill(self_, dim, index_, value_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto value_ = value.toFloat();
            THFloatTensor_indexFill(self_, dim, index_, value_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto value_ = value.toInt();
            THIntTensor_indexFill(self_, dim, index_, value_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto value_ = value.toLong();
            THLongTensor_indexFill(self_, dim, index_, value_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto value_ = value.toShort();
            THShortTensor_indexFill(self_, dim, index_, value_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_index_fill_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_index_fill_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & value) const {
    // DeviceGuard omitted
    if (value.dim() == 0) {
        return static_cast<const TypeExtendedInterface*>(this)->_th_index_fill_(self, dim, index, value.item());
    }
    AT_ERROR("_th_index_fill_ only supports a 0-dimensional value tensor, but got tensor "
        "with ", value.dim(), " dimension(s).");
}
Tensor & CPUType::_th_unfold_out(Tensor & result, const Tensor & self, int64_t dimension, int64_t size, int64_t step) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Bool);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            dimension = maybe_wrap_dim(dimension, self_);
            THBoolTensor_unfold(result_, self_, dimension, size, step);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            dimension = maybe_wrap_dim(dimension, self_);
            THByteTensor_unfold(result_, self_, dimension, size, step);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            dimension = maybe_wrap_dim(dimension, self_);
            THCharTensor_unfold(result_, self_, dimension, size, step);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            dimension = maybe_wrap_dim(dimension, self_);
            THDoubleTensor_unfold(result_, self_, dimension, size, step);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            dimension = maybe_wrap_dim(dimension, self_);
            THFloatTensor_unfold(result_, self_, dimension, size, step);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            dimension = maybe_wrap_dim(dimension, self_);
            THIntTensor_unfold(result_, self_, dimension, size, step);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            dimension = maybe_wrap_dim(dimension, self_);
            THLongTensor_unfold(result_, self_, dimension, size, step);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            dimension = maybe_wrap_dim(dimension, self_);
            THShortTensor_unfold(result_, self_, dimension, size, step);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Half: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Half);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Half);
            dimension = maybe_wrap_dim(dimension, self_);
            THHalfTensor_unfold(result_, self_, dimension, size, step);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_unfold_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_unfold(const Tensor & self, int64_t dimension, int64_t size, int64_t step) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<bool>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            dimension = maybe_wrap_dim(dimension, self_);
            THBoolTensor_unfold(result_, self_, dimension, size, step);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            dimension = maybe_wrap_dim(dimension, self_);
            THByteTensor_unfold(result_, self_, dimension, size, step);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            dimension = maybe_wrap_dim(dimension, self_);
            THCharTensor_unfold(result_, self_, dimension, size, step);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            dimension = maybe_wrap_dim(dimension, self_);
            THDoubleTensor_unfold(result_, self_, dimension, size, step);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            dimension = maybe_wrap_dim(dimension, self_);
            THFloatTensor_unfold(result_, self_, dimension, size, step);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            dimension = maybe_wrap_dim(dimension, self_);
            THIntTensor_unfold(result_, self_, dimension, size, step);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            dimension = maybe_wrap_dim(dimension, self_);
            THLongTensor_unfold(result_, self_, dimension, size, step);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            dimension = maybe_wrap_dim(dimension, self_);
            THShortTensor_unfold(result_, self_, dimension, size, step);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Half: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<Half>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Half);
            dimension = maybe_wrap_dim(dimension, self_);
            THHalfTensor_unfold(result_, self_, dimension, size, step);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_unfold not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_scatter_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) const {
    // DeviceGuard omitted
    if (src.dim() == 0) {
        return static_cast<const TypeExtendedInterface*>(this)->_th_scatter_(self, dim, index, src.item());
    }
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto src_ = checked_tensor_unwrap(src,"src",4, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_scatter(self_, dim, index_, src_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto src_ = checked_tensor_unwrap(src,"src",4, false, Backend::CPU, ScalarType::Char);
            THCharTensor_scatter(self_, dim, index_, src_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto src_ = checked_tensor_unwrap(src,"src",4, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_scatter(self_, dim, index_, src_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto src_ = checked_tensor_unwrap(src,"src",4, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_scatter(self_, dim, index_, src_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto src_ = checked_tensor_unwrap(src,"src",4, false, Backend::CPU, ScalarType::Int);
            THIntTensor_scatter(self_, dim, index_, src_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto src_ = checked_tensor_unwrap(src,"src",4, false, Backend::CPU, ScalarType::Long);
            THLongTensor_scatter(self_, dim, index_, src_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto src_ = checked_tensor_unwrap(src,"src",4, false, Backend::CPU, ScalarType::Short);
            THShortTensor_scatter(self_, dim, index_, src_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_scatter_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_scatter_(Tensor & self, int64_t dim, const Tensor & index, Scalar value) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto value_ = value.toByte();
            THByteTensor_scatterFill(self_, dim, index_, value_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto value_ = value.toChar();
            THCharTensor_scatterFill(self_, dim, index_, value_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto value_ = value.toDouble();
            THDoubleTensor_scatterFill(self_, dim, index_, value_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto value_ = value.toFloat();
            THFloatTensor_scatterFill(self_, dim, index_, value_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto value_ = value.toInt();
            THIntTensor_scatterFill(self_, dim, index_, value_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto value_ = value.toLong();
            THLongTensor_scatterFill(self_, dim, index_, value_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto value_ = value.toShort();
            THShortTensor_scatterFill(self_, dim, index_, value_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_scatter_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_scatter_add_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto src_ = checked_tensor_unwrap(src,"src",4, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_scatterAdd(self_, dim, index_, src_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto src_ = checked_tensor_unwrap(src,"src",4, false, Backend::CPU, ScalarType::Char);
            THCharTensor_scatterAdd(self_, dim, index_, src_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto src_ = checked_tensor_unwrap(src,"src",4, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_scatterAdd(self_, dim, index_, src_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto src_ = checked_tensor_unwrap(src,"src",4, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_scatterAdd(self_, dim, index_, src_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto src_ = checked_tensor_unwrap(src,"src",4, false, Backend::CPU, ScalarType::Int);
            THIntTensor_scatterAdd(self_, dim, index_, src_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto src_ = checked_tensor_unwrap(src,"src",4, false, Backend::CPU, ScalarType::Long);
            THLongTensor_scatterAdd(self_, dim, index_, src_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            auto src_ = checked_tensor_unwrap(src,"src",4, false, Backend::CPU, ScalarType::Short);
            THShortTensor_scatterAdd(self_, dim, index_, src_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_scatter_add_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_gather_out(Tensor & result, const Tensor & self, int64_t dim, const Tensor & index) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            result.resize_(index.sizes());
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            THByteTensor_gather(result_, self_, dim, index_);
            result_->maybe_zero_dim(self_->dim() == 0 && index_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            result.resize_(index.sizes());
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            THCharTensor_gather(result_, self_, dim, index_);
            result_->maybe_zero_dim(self_->dim() == 0 && index_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            result.resize_(index.sizes());
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            THDoubleTensor_gather(result_, self_, dim, index_);
            result_->maybe_zero_dim(self_->dim() == 0 && index_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            result.resize_(index.sizes());
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            THFloatTensor_gather(result_, self_, dim, index_);
            result_->maybe_zero_dim(self_->dim() == 0 && index_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            result.resize_(index.sizes());
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            THIntTensor_gather(result_, self_, dim, index_);
            result_->maybe_zero_dim(self_->dim() == 0 && index_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            result.resize_(index.sizes());
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            THLongTensor_gather(result_, self_, dim, index_);
            result_->maybe_zero_dim(self_->dim() == 0 && index_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            result.resize_(index.sizes());
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            THShortTensor_gather(result_, self_, dim, index_);
            result_->maybe_zero_dim(self_->dim() == 0 && index_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_gather_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_gather(const Tensor & self, int64_t dim, const Tensor & index) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            result.resize_(index.sizes());
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            THByteTensor_gather(result_, self_, dim, index_);
            result_->maybe_zero_dim(self_->dim() == 0 && index_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            result.resize_(index.sizes());
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            THCharTensor_gather(result_, self_, dim, index_);
            result_->maybe_zero_dim(self_->dim() == 0 && index_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            result.resize_(index.sizes());
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            THDoubleTensor_gather(result_, self_, dim, index_);
            result_->maybe_zero_dim(self_->dim() == 0 && index_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            result.resize_(index.sizes());
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            THFloatTensor_gather(result_, self_, dim, index_);
            result_->maybe_zero_dim(self_->dim() == 0 && index_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            result.resize_(index.sizes());
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            THIntTensor_gather(result_, self_, dim, index_);
            result_->maybe_zero_dim(self_->dim() == 0 && index_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            result.resize_(index.sizes());
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            THLongTensor_gather(result_, self_, dim, index_);
            result_->maybe_zero_dim(self_->dim() == 0 && index_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            result.resize_(index.sizes());
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            dim = maybe_wrap_dim(dim, self_);
            auto index_ = checked_tensor_unwrap(index,"index",3, false, Backend::CPU, ScalarType::Long);
            THShortTensor_gather(result_, self_, dim, index_);
            result_->maybe_zero_dim(self_->dim() == 0 && index_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_gather not supported on CPUType for ", dispatch_scalar_type);
    }
}
bool CPUType::_th_equal(const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Bool);
            return THBoolTensor_equal(self_, other_);
            break;
        }
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Byte);
            return THByteTensor_equal(self_, other_);
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Char);
            return THCharTensor_equal(self_, other_);
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Double);
            return THDoubleTensor_equal(self_, other_);
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Float);
            return THFloatTensor_equal(self_, other_);
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Int);
            return THIntTensor_equal(self_, other_);
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Long);
            return THLongTensor_equal(self_, other_);
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Short);
            return THShortTensor_equal(self_, other_);
            break;
        }
        default:
            AT_ERROR("_th_equal not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_and_out(Tensor & result, const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = other.toByte();
            THByteTensor_bitand(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = other.toChar();
            THCharTensor_bitand(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = other.toDouble();
            THDoubleTensor_bitand(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = other.toFloat();
            THFloatTensor_bitand(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = other.toInt();
            THIntTensor_bitand(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = other.toLong();
            THLongTensor_bitand(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = other.toShort();
            THShortTensor_bitand(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_and_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_and(const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = other.toByte();
            THByteTensor_bitand(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = other.toChar();
            THCharTensor_bitand(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = other.toDouble();
            THDoubleTensor_bitand(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = other.toFloat();
            THFloatTensor_bitand(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = other.toInt();
            THIntTensor_bitand(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = other.toLong();
            THLongTensor_bitand(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = other.toShort();
            THShortTensor_bitand(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_and not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_and_out(Tensor & result, const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_cbitand(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_cbitand(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_cbitand(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_cbitand(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_cbitand(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_cbitand(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_cbitand(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_and_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::s__th_and(const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_cbitand(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_cbitand(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_cbitand(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_cbitand(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_cbitand(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_cbitand(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_cbitand(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_and not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_iand_(Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = other.toByte();
            THByteTensor_bitand(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = other.toChar();
            THCharTensor_bitand(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = other.toDouble();
            THDoubleTensor_bitand(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = other.toFloat();
            THFloatTensor_bitand(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = other.toInt();
            THIntTensor_bitand(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = other.toLong();
            THLongTensor_bitand(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = other.toShort();
            THShortTensor_bitand(self_, self_, other_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_iand_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_iand_(Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_cbitand(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Char);
            THCharTensor_cbitand(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_cbitand(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_cbitand(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Int);
            THIntTensor_cbitand(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Long);
            THLongTensor_cbitand(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Short);
            THShortTensor_cbitand(self_, self_, other_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_iand_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_or_out(Tensor & result, const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = other.toByte();
            THByteTensor_bitor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = other.toChar();
            THCharTensor_bitor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = other.toDouble();
            THDoubleTensor_bitor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = other.toFloat();
            THFloatTensor_bitor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = other.toInt();
            THIntTensor_bitor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = other.toLong();
            THLongTensor_bitor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = other.toShort();
            THShortTensor_bitor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_or_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_or(const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = other.toByte();
            THByteTensor_bitor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = other.toChar();
            THCharTensor_bitor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = other.toDouble();
            THDoubleTensor_bitor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = other.toFloat();
            THFloatTensor_bitor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = other.toInt();
            THIntTensor_bitor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = other.toLong();
            THLongTensor_bitor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = other.toShort();
            THShortTensor_bitor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_or not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_or_out(Tensor & result, const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_cbitor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_cbitor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_cbitor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_cbitor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_cbitor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_cbitor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_cbitor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_or_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::s__th_or(const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_cbitor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_cbitor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_cbitor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_cbitor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_cbitor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_cbitor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_cbitor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_or not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_ior_(Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = other.toByte();
            THByteTensor_bitor(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = other.toChar();
            THCharTensor_bitor(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = other.toDouble();
            THDoubleTensor_bitor(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = other.toFloat();
            THFloatTensor_bitor(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = other.toInt();
            THIntTensor_bitor(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = other.toLong();
            THLongTensor_bitor(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = other.toShort();
            THShortTensor_bitor(self_, self_, other_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_ior_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_ior_(Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_cbitor(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Char);
            THCharTensor_cbitor(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_cbitor(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_cbitor(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Int);
            THIntTensor_cbitor(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Long);
            THLongTensor_cbitor(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Short);
            THShortTensor_cbitor(self_, self_, other_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_ior_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_xor_out(Tensor & result, const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = other.toByte();
            THByteTensor_bitxor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = other.toChar();
            THCharTensor_bitxor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = other.toDouble();
            THDoubleTensor_bitxor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = other.toFloat();
            THFloatTensor_bitxor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = other.toInt();
            THIntTensor_bitxor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = other.toLong();
            THLongTensor_bitxor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = other.toShort();
            THShortTensor_bitxor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_xor_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_xor(const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = other.toByte();
            THByteTensor_bitxor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = other.toChar();
            THCharTensor_bitxor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = other.toDouble();
            THDoubleTensor_bitxor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = other.toFloat();
            THFloatTensor_bitxor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = other.toInt();
            THIntTensor_bitxor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = other.toLong();
            THLongTensor_bitxor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = other.toShort();
            THShortTensor_bitxor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_xor not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_xor_out(Tensor & result, const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_cbitxor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_cbitxor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_cbitxor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_cbitxor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_cbitxor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_cbitxor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_cbitxor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_xor_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::s__th_xor(const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_cbitxor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_cbitxor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_cbitxor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_cbitxor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_cbitxor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_cbitxor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_cbitxor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_xor not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_ixor_(Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = other.toByte();
            THByteTensor_bitxor(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = other.toChar();
            THCharTensor_bitxor(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = other.toDouble();
            THDoubleTensor_bitxor(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = other.toFloat();
            THFloatTensor_bitxor(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = other.toInt();
            THIntTensor_bitxor(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = other.toLong();
            THLongTensor_bitxor(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = other.toShort();
            THShortTensor_bitxor(self_, self_, other_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_ixor_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_ixor_(Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_cbitxor(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Char);
            THCharTensor_cbitxor(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_cbitxor(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_cbitxor(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Int);
            THIntTensor_cbitxor(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Long);
            THLongTensor_cbitxor(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Short);
            THShortTensor_cbitxor(self_, self_, other_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_ixor_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_lshift_out(Tensor & result, const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = other.toByte();
            THByteTensor_lshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = other.toChar();
            THCharTensor_lshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = other.toDouble();
            THDoubleTensor_lshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = other.toFloat();
            THFloatTensor_lshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = other.toInt();
            THIntTensor_lshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = other.toLong();
            THLongTensor_lshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = other.toShort();
            THShortTensor_lshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_lshift_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_lshift(const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = other.toByte();
            THByteTensor_lshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = other.toChar();
            THCharTensor_lshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = other.toDouble();
            THDoubleTensor_lshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = other.toFloat();
            THFloatTensor_lshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = other.toInt();
            THIntTensor_lshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = other.toLong();
            THLongTensor_lshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = other.toShort();
            THShortTensor_lshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_lshift not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_lshift_out(Tensor & result, const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_clshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_clshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_clshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_clshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_clshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_clshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_clshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_lshift_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::s__th_lshift(const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_clshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_clshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_clshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_clshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_clshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_clshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_clshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_lshift not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_ilshift_(Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = other.toByte();
            THByteTensor_lshift(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = other.toChar();
            THCharTensor_lshift(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = other.toDouble();
            THDoubleTensor_lshift(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = other.toFloat();
            THFloatTensor_lshift(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = other.toInt();
            THIntTensor_lshift(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = other.toLong();
            THLongTensor_lshift(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = other.toShort();
            THShortTensor_lshift(self_, self_, other_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_ilshift_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_ilshift_(Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_clshift(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Char);
            THCharTensor_clshift(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_clshift(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_clshift(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Int);
            THIntTensor_clshift(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Long);
            THLongTensor_clshift(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Short);
            THShortTensor_clshift(self_, self_, other_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_ilshift_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_rshift_out(Tensor & result, const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = other.toByte();
            THByteTensor_rshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = other.toChar();
            THCharTensor_rshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = other.toDouble();
            THDoubleTensor_rshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = other.toFloat();
            THFloatTensor_rshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = other.toInt();
            THIntTensor_rshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = other.toLong();
            THLongTensor_rshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = other.toShort();
            THShortTensor_rshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_rshift_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_rshift(const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = other.toByte();
            THByteTensor_rshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = other.toChar();
            THCharTensor_rshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = other.toDouble();
            THDoubleTensor_rshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = other.toFloat();
            THFloatTensor_rshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = other.toInt();
            THIntTensor_rshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = other.toLong();
            THLongTensor_rshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = other.toShort();
            THShortTensor_rshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_rshift not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_rshift_out(Tensor & result, const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_crshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_crshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_crshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_crshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_crshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_crshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_crshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_rshift_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::s__th_rshift(const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_crshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_crshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_crshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_crshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_crshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_crshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_crshift(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_rshift not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_irshift_(Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = other.toByte();
            THByteTensor_rshift(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = other.toChar();
            THCharTensor_rshift(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = other.toDouble();
            THDoubleTensor_rshift(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = other.toFloat();
            THFloatTensor_rshift(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = other.toInt();
            THIntTensor_rshift(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = other.toLong();
            THLongTensor_rshift(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = other.toShort();
            THShortTensor_rshift(self_, self_, other_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_irshift_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_irshift_(Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_crshift(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Char);
            THCharTensor_crshift(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_crshift(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_crshift(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Int);
            THIntTensor_crshift(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Long);
            THLongTensor_crshift(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Short);
            THShortTensor_crshift(self_, self_, other_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_irshift_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_lt_out(Tensor & result, const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto other_ = other.toBool();
            THBoolTensor_ltValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = other.toByte();
            THByteTensor_ltValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = other.toChar();
            THCharTensor_ltValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = other.toDouble();
            THDoubleTensor_ltValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = other.toFloat();
            THFloatTensor_ltValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = other.toInt();
            THIntTensor_ltValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = other.toLong();
            THLongTensor_ltValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = other.toShort();
            THShortTensor_ltValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_lt_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_lt(const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto other_ = other.toBool();
            THBoolTensor_ltValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = other.toByte();
            THByteTensor_ltValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = other.toChar();
            THCharTensor_ltValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = other.toDouble();
            THDoubleTensor_ltValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = other.toFloat();
            THFloatTensor_ltValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = other.toInt();
            THIntTensor_ltValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = other.toLong();
            THLongTensor_ltValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = other.toShort();
            THShortTensor_ltValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_lt not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_lt_out(Tensor & result, const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Bool);
            THBoolTensor_ltTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_ltTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_ltTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_ltTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_ltTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_ltTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_ltTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_ltTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_lt_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::s__th_lt(const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Bool);
            THBoolTensor_ltTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_ltTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_ltTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_ltTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_ltTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_ltTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_ltTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_ltTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_lt not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_lt_(Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto other_ = other.toBool();
            THBoolTensor_ltValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = other.toByte();
            THByteTensor_ltValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = other.toChar();
            THCharTensor_ltValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = other.toDouble();
            THDoubleTensor_ltValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = other.toFloat();
            THFloatTensor_ltValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = other.toInt();
            THIntTensor_ltValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = other.toLong();
            THLongTensor_ltValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = other.toShort();
            THShortTensor_ltValueT(self_, self_, other_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_lt_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_lt_(Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Bool);
            THBoolTensor_ltTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_ltTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Char);
            THCharTensor_ltTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_ltTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_ltTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Int);
            THIntTensor_ltTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Long);
            THLongTensor_ltTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Short);
            THShortTensor_ltTensorT(self_, self_, other_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_lt_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_gt_out(Tensor & result, const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto other_ = other.toBool();
            THBoolTensor_gtValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = other.toByte();
            THByteTensor_gtValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = other.toChar();
            THCharTensor_gtValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = other.toDouble();
            THDoubleTensor_gtValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = other.toFloat();
            THFloatTensor_gtValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = other.toInt();
            THIntTensor_gtValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = other.toLong();
            THLongTensor_gtValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = other.toShort();
            THShortTensor_gtValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_gt_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_gt(const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto other_ = other.toBool();
            THBoolTensor_gtValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = other.toByte();
            THByteTensor_gtValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = other.toChar();
            THCharTensor_gtValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = other.toDouble();
            THDoubleTensor_gtValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = other.toFloat();
            THFloatTensor_gtValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = other.toInt();
            THIntTensor_gtValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = other.toLong();
            THLongTensor_gtValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = other.toShort();
            THShortTensor_gtValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_gt not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_gt_out(Tensor & result, const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Bool);
            THBoolTensor_gtTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_gtTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_gtTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_gtTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_gtTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_gtTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_gtTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_gtTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_gt_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::s__th_gt(const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Bool);
            THBoolTensor_gtTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_gtTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_gtTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_gtTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_gtTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_gtTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_gtTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_gtTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_gt not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_gt_(Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto other_ = other.toBool();
            THBoolTensor_gtValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = other.toByte();
            THByteTensor_gtValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = other.toChar();
            THCharTensor_gtValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = other.toDouble();
            THDoubleTensor_gtValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = other.toFloat();
            THFloatTensor_gtValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = other.toInt();
            THIntTensor_gtValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = other.toLong();
            THLongTensor_gtValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = other.toShort();
            THShortTensor_gtValueT(self_, self_, other_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_gt_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_gt_(Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Bool);
            THBoolTensor_gtTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_gtTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Char);
            THCharTensor_gtTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_gtTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_gtTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Int);
            THIntTensor_gtTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Long);
            THLongTensor_gtTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Short);
            THShortTensor_gtTensorT(self_, self_, other_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_gt_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_le_out(Tensor & result, const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto other_ = other.toBool();
            THBoolTensor_leValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = other.toByte();
            THByteTensor_leValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = other.toChar();
            THCharTensor_leValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = other.toDouble();
            THDoubleTensor_leValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = other.toFloat();
            THFloatTensor_leValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = other.toInt();
            THIntTensor_leValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = other.toLong();
            THLongTensor_leValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = other.toShort();
            THShortTensor_leValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_le_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_le(const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto other_ = other.toBool();
            THBoolTensor_leValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = other.toByte();
            THByteTensor_leValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = other.toChar();
            THCharTensor_leValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = other.toDouble();
            THDoubleTensor_leValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = other.toFloat();
            THFloatTensor_leValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = other.toInt();
            THIntTensor_leValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = other.toLong();
            THLongTensor_leValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = other.toShort();
            THShortTensor_leValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_le not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_le_out(Tensor & result, const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Bool);
            THBoolTensor_leTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_leTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_leTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_leTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_leTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_leTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_leTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_leTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_le_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::s__th_le(const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Bool);
            THBoolTensor_leTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_leTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_leTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_leTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_leTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_leTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_leTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_leTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_le not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_le_(Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto other_ = other.toBool();
            THBoolTensor_leValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = other.toByte();
            THByteTensor_leValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = other.toChar();
            THCharTensor_leValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = other.toDouble();
            THDoubleTensor_leValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = other.toFloat();
            THFloatTensor_leValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = other.toInt();
            THIntTensor_leValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = other.toLong();
            THLongTensor_leValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = other.toShort();
            THShortTensor_leValueT(self_, self_, other_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_le_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_le_(Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Bool);
            THBoolTensor_leTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_leTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Char);
            THCharTensor_leTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_leTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_leTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Int);
            THIntTensor_leTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Long);
            THLongTensor_leTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Short);
            THShortTensor_leTensorT(self_, self_, other_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_le_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_ge_out(Tensor & result, const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto other_ = other.toBool();
            THBoolTensor_geValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = other.toByte();
            THByteTensor_geValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = other.toChar();
            THCharTensor_geValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = other.toDouble();
            THDoubleTensor_geValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = other.toFloat();
            THFloatTensor_geValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = other.toInt();
            THIntTensor_geValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = other.toLong();
            THLongTensor_geValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = other.toShort();
            THShortTensor_geValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_ge_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_ge(const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto other_ = other.toBool();
            THBoolTensor_geValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = other.toByte();
            THByteTensor_geValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = other.toChar();
            THCharTensor_geValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = other.toDouble();
            THDoubleTensor_geValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = other.toFloat();
            THFloatTensor_geValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = other.toInt();
            THIntTensor_geValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = other.toLong();
            THLongTensor_geValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = other.toShort();
            THShortTensor_geValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_ge not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_ge_out(Tensor & result, const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Bool);
            THBoolTensor_geTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_geTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_geTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_geTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_geTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_geTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_geTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_geTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_ge_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::s__th_ge(const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Bool);
            THBoolTensor_geTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_geTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_geTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_geTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_geTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_geTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_geTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_geTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_ge not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_ge_(Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto other_ = other.toBool();
            THBoolTensor_geValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = other.toByte();
            THByteTensor_geValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = other.toChar();
            THCharTensor_geValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = other.toDouble();
            THDoubleTensor_geValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = other.toFloat();
            THFloatTensor_geValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = other.toInt();
            THIntTensor_geValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = other.toLong();
            THLongTensor_geValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = other.toShort();
            THShortTensor_geValueT(self_, self_, other_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_ge_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_ge_(Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Bool);
            THBoolTensor_geTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_geTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Char);
            THCharTensor_geTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_geTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_geTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Int);
            THIntTensor_geTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Long);
            THLongTensor_geTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Short);
            THShortTensor_geTensorT(self_, self_, other_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_ge_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_eq_out(Tensor & result, const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto other_ = other.toBool();
            THBoolTensor_eqValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = other.toByte();
            THByteTensor_eqValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = other.toChar();
            THCharTensor_eqValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = other.toDouble();
            THDoubleTensor_eqValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = other.toFloat();
            THFloatTensor_eqValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = other.toInt();
            THIntTensor_eqValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = other.toLong();
            THLongTensor_eqValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = other.toShort();
            THShortTensor_eqValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_eq_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_eq(const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto other_ = other.toBool();
            THBoolTensor_eqValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = other.toByte();
            THByteTensor_eqValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = other.toChar();
            THCharTensor_eqValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = other.toDouble();
            THDoubleTensor_eqValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = other.toFloat();
            THFloatTensor_eqValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = other.toInt();
            THIntTensor_eqValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = other.toLong();
            THLongTensor_eqValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = other.toShort();
            THShortTensor_eqValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_eq not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_eq_out(Tensor & result, const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Bool);
            THBoolTensor_eqTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_eqTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_eqTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_eqTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_eqTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_eqTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_eqTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_eqTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_eq_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::s__th_eq(const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Bool);
            THBoolTensor_eqTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_eqTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_eqTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_eqTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_eqTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_eqTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_eqTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_eqTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_eq not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_eq_(Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto other_ = other.toBool();
            THBoolTensor_eqValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = other.toByte();
            THByteTensor_eqValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = other.toChar();
            THCharTensor_eqValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = other.toDouble();
            THDoubleTensor_eqValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = other.toFloat();
            THFloatTensor_eqValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = other.toInt();
            THIntTensor_eqValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = other.toLong();
            THLongTensor_eqValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = other.toShort();
            THShortTensor_eqValueT(self_, self_, other_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_eq_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_eq_(Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Bool);
            THBoolTensor_eqTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_eqTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Char);
            THCharTensor_eqTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_eqTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_eqTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Int);
            THIntTensor_eqTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Long);
            THLongTensor_eqTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Short);
            THShortTensor_eqTensorT(self_, self_, other_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_eq_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_ne_out(Tensor & result, const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto other_ = other.toBool();
            THBoolTensor_neValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = other.toByte();
            THByteTensor_neValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = other.toChar();
            THCharTensor_neValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = other.toDouble();
            THDoubleTensor_neValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = other.toFloat();
            THFloatTensor_neValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = other.toInt();
            THIntTensor_neValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = other.toLong();
            THLongTensor_neValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = other.toShort();
            THShortTensor_neValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_ne_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_ne(const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto other_ = other.toBool();
            THBoolTensor_neValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = other.toByte();
            THByteTensor_neValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = other.toChar();
            THCharTensor_neValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = other.toDouble();
            THDoubleTensor_neValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = other.toFloat();
            THFloatTensor_neValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = other.toInt();
            THIntTensor_neValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = other.toLong();
            THLongTensor_neValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = other.toShort();
            THShortTensor_neValue(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_ne not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_ne_out(Tensor & result, const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Bool);
            THBoolTensor_neTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_neTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_neTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_neTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_neTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_neTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_neTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_neTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_ne_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::s__th_ne(const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Bool);
            THBoolTensor_neTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_neTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_neTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_neTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_neTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_neTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_neTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Byte), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_neTensor(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_ne not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_ne_(Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto other_ = other.toBool();
            THBoolTensor_neValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = other.toByte();
            THByteTensor_neValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = other.toChar();
            THCharTensor_neValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = other.toDouble();
            THDoubleTensor_neValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = other.toFloat();
            THFloatTensor_neValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = other.toInt();
            THIntTensor_neValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = other.toLong();
            THLongTensor_neValueT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = other.toShort();
            THShortTensor_neValueT(self_, self_, other_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_ne_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_ne_(Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Bool);
            THBoolTensor_neTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_neTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Char);
            THCharTensor_neTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_neTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_neTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Int);
            THIntTensor_neTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Long);
            THLongTensor_neTensorT(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Short);
            THShortTensor_neTensorT(self_, self_, other_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_ne_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_min_out(Tensor & result, const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_cmin(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_cmin(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_cmin(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_cmin(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_cmin(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_cmin(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_cmin(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_min_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::s__th_min(const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_cmin(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_cmin(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_cmin(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_cmin(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_cmin(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_cmin(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_cmin(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_min not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_min(const Tensor & self) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            return at::scalar_tensor(convert<uint8_t>(THByteTensor_minall(self_)), options(ScalarType::Byte));
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            return at::scalar_tensor(convert<int8_t>(THCharTensor_minall(self_)), options(ScalarType::Char));
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            return at::scalar_tensor(convert<double>(THDoubleTensor_minall(self_)), options(ScalarType::Double));
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            return at::scalar_tensor(convert<float>(THFloatTensor_minall(self_)), options(ScalarType::Float));
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            return at::scalar_tensor(convert<int>(THIntTensor_minall(self_)), options(ScalarType::Int));
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            return at::scalar_tensor(convert<int64_t>(THLongTensor_minall(self_)), options(ScalarType::Long));
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            return at::scalar_tensor(convert<int16_t>(THShortTensor_minall(self_)), options(ScalarType::Short));
            break;
        }
        default:
            AT_ERROR("_th_min not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor &,Tensor &> CPUType::_th_min_out(Tensor & min, Tensor & min_indices, const Tensor & self, int64_t dim, bool keepdim) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto min_ = checked_tensor_unwrap(min,"min",0, false, Backend::CPU, ScalarType::Byte);
            auto min_indices_ = checked_tensor_unwrap(min_indices,"min_indices",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            dim = maybe_wrap_dim(dim, self_);
            THByteTensor_min(min_, min_indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0 || (keepdim == false && self_->dim() == 1);
            min_->maybe_zero_dim(maybe_scalar);
            min_indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(min, min_indices);
            break;
        }
        case ScalarType::Char: {
            auto min_ = checked_tensor_unwrap(min,"min",0, false, Backend::CPU, ScalarType::Char);
            auto min_indices_ = checked_tensor_unwrap(min_indices,"min_indices",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            dim = maybe_wrap_dim(dim, self_);
            THCharTensor_min(min_, min_indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0 || (keepdim == false && self_->dim() == 1);
            min_->maybe_zero_dim(maybe_scalar);
            min_indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(min, min_indices);
            break;
        }
        case ScalarType::Double: {
            auto min_ = checked_tensor_unwrap(min,"min",0, false, Backend::CPU, ScalarType::Double);
            auto min_indices_ = checked_tensor_unwrap(min_indices,"min_indices",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            dim = maybe_wrap_dim(dim, self_);
            THDoubleTensor_min(min_, min_indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0 || (keepdim == false && self_->dim() == 1);
            min_->maybe_zero_dim(maybe_scalar);
            min_indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(min, min_indices);
            break;
        }
        case ScalarType::Float: {
            auto min_ = checked_tensor_unwrap(min,"min",0, false, Backend::CPU, ScalarType::Float);
            auto min_indices_ = checked_tensor_unwrap(min_indices,"min_indices",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            dim = maybe_wrap_dim(dim, self_);
            THFloatTensor_min(min_, min_indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0 || (keepdim == false && self_->dim() == 1);
            min_->maybe_zero_dim(maybe_scalar);
            min_indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(min, min_indices);
            break;
        }
        case ScalarType::Int: {
            auto min_ = checked_tensor_unwrap(min,"min",0, false, Backend::CPU, ScalarType::Int);
            auto min_indices_ = checked_tensor_unwrap(min_indices,"min_indices",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            dim = maybe_wrap_dim(dim, self_);
            THIntTensor_min(min_, min_indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0 || (keepdim == false && self_->dim() == 1);
            min_->maybe_zero_dim(maybe_scalar);
            min_indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(min, min_indices);
            break;
        }
        case ScalarType::Long: {
            auto min_ = checked_tensor_unwrap(min,"min",0, false, Backend::CPU, ScalarType::Long);
            auto min_indices_ = checked_tensor_unwrap(min_indices,"min_indices",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            dim = maybe_wrap_dim(dim, self_);
            THLongTensor_min(min_, min_indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0 || (keepdim == false && self_->dim() == 1);
            min_->maybe_zero_dim(maybe_scalar);
            min_indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(min, min_indices);
            break;
        }
        case ScalarType::Short: {
            auto min_ = checked_tensor_unwrap(min,"min",0, false, Backend::CPU, ScalarType::Short);
            auto min_indices_ = checked_tensor_unwrap(min_indices,"min_indices",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            dim = maybe_wrap_dim(dim, self_);
            THShortTensor_min(min_, min_indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0 || (keepdim == false && self_->dim() == 1);
            min_->maybe_zero_dim(maybe_scalar);
            min_indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(min, min_indices);
            break;
        }
        default:
            AT_ERROR("_th_min_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor> CPUType::_th_min(const Tensor & self, int64_t dim, bool keepdim) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto min_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto min = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(min_));
            auto min_indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto min_indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(min_indices_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            dim = maybe_wrap_dim(dim, self_);
            THByteTensor_min(min_, min_indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0 || (keepdim == false && self_->dim() == 1);
            min_->maybe_zero_dim(maybe_scalar);
            min_indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(min, min_indices);
            break;
        }
        case ScalarType::Char: {
            auto min_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto min = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(min_));
            auto min_indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto min_indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(min_indices_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            dim = maybe_wrap_dim(dim, self_);
            THCharTensor_min(min_, min_indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0 || (keepdim == false && self_->dim() == 1);
            min_->maybe_zero_dim(maybe_scalar);
            min_indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(min, min_indices);
            break;
        }
        case ScalarType::Double: {
            auto min_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto min = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(min_));
            auto min_indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto min_indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(min_indices_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            dim = maybe_wrap_dim(dim, self_);
            THDoubleTensor_min(min_, min_indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0 || (keepdim == false && self_->dim() == 1);
            min_->maybe_zero_dim(maybe_scalar);
            min_indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(min, min_indices);
            break;
        }
        case ScalarType::Float: {
            auto min_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto min = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(min_));
            auto min_indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto min_indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(min_indices_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            dim = maybe_wrap_dim(dim, self_);
            THFloatTensor_min(min_, min_indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0 || (keepdim == false && self_->dim() == 1);
            min_->maybe_zero_dim(maybe_scalar);
            min_indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(min, min_indices);
            break;
        }
        case ScalarType::Int: {
            auto min_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto min = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(min_));
            auto min_indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto min_indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(min_indices_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            dim = maybe_wrap_dim(dim, self_);
            THIntTensor_min(min_, min_indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0 || (keepdim == false && self_->dim() == 1);
            min_->maybe_zero_dim(maybe_scalar);
            min_indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(min, min_indices);
            break;
        }
        case ScalarType::Long: {
            auto min_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto min = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(min_));
            auto min_indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto min_indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(min_indices_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            dim = maybe_wrap_dim(dim, self_);
            THLongTensor_min(min_, min_indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0 || (keepdim == false && self_->dim() == 1);
            min_->maybe_zero_dim(maybe_scalar);
            min_indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(min, min_indices);
            break;
        }
        case ScalarType::Short: {
            auto min_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto min = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(min_));
            auto min_indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto min_indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(min_indices_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            dim = maybe_wrap_dim(dim, self_);
            THShortTensor_min(min_, min_indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0 || (keepdim == false && self_->dim() == 1);
            min_->maybe_zero_dim(maybe_scalar);
            min_indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(min, min_indices);
            break;
        }
        default:
            AT_ERROR("_th_min not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_max_out(Tensor & result, const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_cmax(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_cmax(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_cmax(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_cmax(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_cmax(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_cmax(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_cmax(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_max_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::s__th_max(const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_cmax(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_cmax(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_cmax(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_cmax(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_cmax(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_cmax(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_cmax(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_max not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_max(const Tensor & self) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            return at::scalar_tensor(convert<uint8_t>(THByteTensor_maxall(self_)), options(ScalarType::Byte));
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            return at::scalar_tensor(convert<int8_t>(THCharTensor_maxall(self_)), options(ScalarType::Char));
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            return at::scalar_tensor(convert<double>(THDoubleTensor_maxall(self_)), options(ScalarType::Double));
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            return at::scalar_tensor(convert<float>(THFloatTensor_maxall(self_)), options(ScalarType::Float));
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            return at::scalar_tensor(convert<int>(THIntTensor_maxall(self_)), options(ScalarType::Int));
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            return at::scalar_tensor(convert<int64_t>(THLongTensor_maxall(self_)), options(ScalarType::Long));
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            return at::scalar_tensor(convert<int16_t>(THShortTensor_maxall(self_)), options(ScalarType::Short));
            break;
        }
        default:
            AT_ERROR("_th_max not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor &,Tensor &> CPUType::_th_max_out(Tensor & max, Tensor & max_indices, const Tensor & self, int64_t dim, bool keepdim) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto max_ = checked_tensor_unwrap(max,"max",0, false, Backend::CPU, ScalarType::Byte);
            auto max_indices_ = checked_tensor_unwrap(max_indices,"max_indices",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            dim = maybe_wrap_dim(dim, self_);
            THByteTensor_max(max_, max_indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0 || (keepdim == false && self_->dim() == 1);
            max_->maybe_zero_dim(maybe_scalar);
            max_indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(max, max_indices);
            break;
        }
        case ScalarType::Char: {
            auto max_ = checked_tensor_unwrap(max,"max",0, false, Backend::CPU, ScalarType::Char);
            auto max_indices_ = checked_tensor_unwrap(max_indices,"max_indices",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            dim = maybe_wrap_dim(dim, self_);
            THCharTensor_max(max_, max_indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0 || (keepdim == false && self_->dim() == 1);
            max_->maybe_zero_dim(maybe_scalar);
            max_indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(max, max_indices);
            break;
        }
        case ScalarType::Double: {
            auto max_ = checked_tensor_unwrap(max,"max",0, false, Backend::CPU, ScalarType::Double);
            auto max_indices_ = checked_tensor_unwrap(max_indices,"max_indices",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            dim = maybe_wrap_dim(dim, self_);
            THDoubleTensor_max(max_, max_indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0 || (keepdim == false && self_->dim() == 1);
            max_->maybe_zero_dim(maybe_scalar);
            max_indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(max, max_indices);
            break;
        }
        case ScalarType::Float: {
            auto max_ = checked_tensor_unwrap(max,"max",0, false, Backend::CPU, ScalarType::Float);
            auto max_indices_ = checked_tensor_unwrap(max_indices,"max_indices",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            dim = maybe_wrap_dim(dim, self_);
            THFloatTensor_max(max_, max_indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0 || (keepdim == false && self_->dim() == 1);
            max_->maybe_zero_dim(maybe_scalar);
            max_indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(max, max_indices);
            break;
        }
        case ScalarType::Int: {
            auto max_ = checked_tensor_unwrap(max,"max",0, false, Backend::CPU, ScalarType::Int);
            auto max_indices_ = checked_tensor_unwrap(max_indices,"max_indices",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            dim = maybe_wrap_dim(dim, self_);
            THIntTensor_max(max_, max_indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0 || (keepdim == false && self_->dim() == 1);
            max_->maybe_zero_dim(maybe_scalar);
            max_indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(max, max_indices);
            break;
        }
        case ScalarType::Long: {
            auto max_ = checked_tensor_unwrap(max,"max",0, false, Backend::CPU, ScalarType::Long);
            auto max_indices_ = checked_tensor_unwrap(max_indices,"max_indices",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            dim = maybe_wrap_dim(dim, self_);
            THLongTensor_max(max_, max_indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0 || (keepdim == false && self_->dim() == 1);
            max_->maybe_zero_dim(maybe_scalar);
            max_indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(max, max_indices);
            break;
        }
        case ScalarType::Short: {
            auto max_ = checked_tensor_unwrap(max,"max",0, false, Backend::CPU, ScalarType::Short);
            auto max_indices_ = checked_tensor_unwrap(max_indices,"max_indices",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            dim = maybe_wrap_dim(dim, self_);
            THShortTensor_max(max_, max_indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0 || (keepdim == false && self_->dim() == 1);
            max_->maybe_zero_dim(maybe_scalar);
            max_indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(max, max_indices);
            break;
        }
        default:
            AT_ERROR("_th_max_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor> CPUType::_th_max(const Tensor & self, int64_t dim, bool keepdim) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto max_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto max = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(max_));
            auto max_indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto max_indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(max_indices_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            dim = maybe_wrap_dim(dim, self_);
            THByteTensor_max(max_, max_indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0 || (keepdim == false && self_->dim() == 1);
            max_->maybe_zero_dim(maybe_scalar);
            max_indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(max, max_indices);
            break;
        }
        case ScalarType::Char: {
            auto max_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto max = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(max_));
            auto max_indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto max_indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(max_indices_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            dim = maybe_wrap_dim(dim, self_);
            THCharTensor_max(max_, max_indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0 || (keepdim == false && self_->dim() == 1);
            max_->maybe_zero_dim(maybe_scalar);
            max_indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(max, max_indices);
            break;
        }
        case ScalarType::Double: {
            auto max_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto max = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(max_));
            auto max_indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto max_indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(max_indices_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            dim = maybe_wrap_dim(dim, self_);
            THDoubleTensor_max(max_, max_indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0 || (keepdim == false && self_->dim() == 1);
            max_->maybe_zero_dim(maybe_scalar);
            max_indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(max, max_indices);
            break;
        }
        case ScalarType::Float: {
            auto max_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto max = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(max_));
            auto max_indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto max_indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(max_indices_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            dim = maybe_wrap_dim(dim, self_);
            THFloatTensor_max(max_, max_indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0 || (keepdim == false && self_->dim() == 1);
            max_->maybe_zero_dim(maybe_scalar);
            max_indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(max, max_indices);
            break;
        }
        case ScalarType::Int: {
            auto max_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto max = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(max_));
            auto max_indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto max_indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(max_indices_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            dim = maybe_wrap_dim(dim, self_);
            THIntTensor_max(max_, max_indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0 || (keepdim == false && self_->dim() == 1);
            max_->maybe_zero_dim(maybe_scalar);
            max_indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(max, max_indices);
            break;
        }
        case ScalarType::Long: {
            auto max_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto max = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(max_));
            auto max_indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto max_indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(max_indices_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            dim = maybe_wrap_dim(dim, self_);
            THLongTensor_max(max_, max_indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0 || (keepdim == false && self_->dim() == 1);
            max_->maybe_zero_dim(maybe_scalar);
            max_indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(max, max_indices);
            break;
        }
        case ScalarType::Short: {
            auto max_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto max = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(max_));
            auto max_indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto max_indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(max_indices_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            dim = maybe_wrap_dim(dim, self_);
            THShortTensor_max(max_, max_indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0 || (keepdim == false && self_->dim() == 1);
            max_->maybe_zero_dim(maybe_scalar);
            max_indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(max, max_indices);
            break;
        }
        default:
            AT_ERROR("_th_max not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor &,Tensor &> CPUType::_th_mode_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto values_ = checked_tensor_unwrap(values,"values",0, false, Backend::CPU, ScalarType::Byte);
            auto indices_ = checked_tensor_unwrap(indices,"indices",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            dim = maybe_wrap_dim(dim, self_);
            THByteTensor_mode(values_, indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0|| (keepdim == false && self_->dim() == 1);
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(values, indices);
            break;
        }
        case ScalarType::Char: {
            auto values_ = checked_tensor_unwrap(values,"values",0, false, Backend::CPU, ScalarType::Char);
            auto indices_ = checked_tensor_unwrap(indices,"indices",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            dim = maybe_wrap_dim(dim, self_);
            THCharTensor_mode(values_, indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0|| (keepdim == false && self_->dim() == 1);
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(values, indices);
            break;
        }
        case ScalarType::Double: {
            auto values_ = checked_tensor_unwrap(values,"values",0, false, Backend::CPU, ScalarType::Double);
            auto indices_ = checked_tensor_unwrap(indices,"indices",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            dim = maybe_wrap_dim(dim, self_);
            THDoubleTensor_mode(values_, indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0|| (keepdim == false && self_->dim() == 1);
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(values, indices);
            break;
        }
        case ScalarType::Float: {
            auto values_ = checked_tensor_unwrap(values,"values",0, false, Backend::CPU, ScalarType::Float);
            auto indices_ = checked_tensor_unwrap(indices,"indices",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            dim = maybe_wrap_dim(dim, self_);
            THFloatTensor_mode(values_, indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0|| (keepdim == false && self_->dim() == 1);
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(values, indices);
            break;
        }
        case ScalarType::Int: {
            auto values_ = checked_tensor_unwrap(values,"values",0, false, Backend::CPU, ScalarType::Int);
            auto indices_ = checked_tensor_unwrap(indices,"indices",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            dim = maybe_wrap_dim(dim, self_);
            THIntTensor_mode(values_, indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0|| (keepdim == false && self_->dim() == 1);
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(values, indices);
            break;
        }
        case ScalarType::Long: {
            auto values_ = checked_tensor_unwrap(values,"values",0, false, Backend::CPU, ScalarType::Long);
            auto indices_ = checked_tensor_unwrap(indices,"indices",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            dim = maybe_wrap_dim(dim, self_);
            THLongTensor_mode(values_, indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0|| (keepdim == false && self_->dim() == 1);
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(values, indices);
            break;
        }
        case ScalarType::Short: {
            auto values_ = checked_tensor_unwrap(values,"values",0, false, Backend::CPU, ScalarType::Short);
            auto indices_ = checked_tensor_unwrap(indices,"indices",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            dim = maybe_wrap_dim(dim, self_);
            THShortTensor_mode(values_, indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0|| (keepdim == false && self_->dim() == 1);
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(values, indices);
            break;
        }
        default:
            AT_ERROR("_th_mode_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor> CPUType::_th_mode(const Tensor & self, int64_t dim, bool keepdim) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto values_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto values = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(values_));
            auto indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(indices_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            dim = maybe_wrap_dim(dim, self_);
            THByteTensor_mode(values_, indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0|| (keepdim == false && self_->dim() == 1);
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(values, indices);
            break;
        }
        case ScalarType::Char: {
            auto values_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto values = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(values_));
            auto indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(indices_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            dim = maybe_wrap_dim(dim, self_);
            THCharTensor_mode(values_, indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0|| (keepdim == false && self_->dim() == 1);
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(values, indices);
            break;
        }
        case ScalarType::Double: {
            auto values_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto values = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(values_));
            auto indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(indices_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            dim = maybe_wrap_dim(dim, self_);
            THDoubleTensor_mode(values_, indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0|| (keepdim == false && self_->dim() == 1);
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(values, indices);
            break;
        }
        case ScalarType::Float: {
            auto values_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto values = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(values_));
            auto indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(indices_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            dim = maybe_wrap_dim(dim, self_);
            THFloatTensor_mode(values_, indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0|| (keepdim == false && self_->dim() == 1);
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(values, indices);
            break;
        }
        case ScalarType::Int: {
            auto values_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto values = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(values_));
            auto indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(indices_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            dim = maybe_wrap_dim(dim, self_);
            THIntTensor_mode(values_, indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0|| (keepdim == false && self_->dim() == 1);
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(values, indices);
            break;
        }
        case ScalarType::Long: {
            auto values_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto values = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(values_));
            auto indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(indices_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            dim = maybe_wrap_dim(dim, self_);
            THLongTensor_mode(values_, indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0|| (keepdim == false && self_->dim() == 1);
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(values, indices);
            break;
        }
        case ScalarType::Short: {
            auto values_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto values = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(values_));
            auto indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(indices_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            dim = maybe_wrap_dim(dim, self_);
            THShortTensor_mode(values_, indices_, self_, dim, keepdim);
            bool maybe_scalar = self_->dim() == 0|| (keepdim == false && self_->dim() == 1);
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(values, indices);
            break;
        }
        default:
            AT_ERROR("_th_mode not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor &,Tensor &> CPUType::_th_sort_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool descending) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto values_ = checked_tensor_unwrap(values,"values",0, false, Backend::CPU, ScalarType::Byte);
            auto indices_ = checked_tensor_unwrap(indices,"indices",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            dim = maybe_wrap_dim(dim, self_);
            THByteTensor_sort(values_, indices_, self_, dim, descending);
            bool maybe_scalar = self_->dim() == 0;
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(values, indices);
            break;
        }
        case ScalarType::Char: {
            auto values_ = checked_tensor_unwrap(values,"values",0, false, Backend::CPU, ScalarType::Char);
            auto indices_ = checked_tensor_unwrap(indices,"indices",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            dim = maybe_wrap_dim(dim, self_);
            THCharTensor_sort(values_, indices_, self_, dim, descending);
            bool maybe_scalar = self_->dim() == 0;
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(values, indices);
            break;
        }
        case ScalarType::Double: {
            auto values_ = checked_tensor_unwrap(values,"values",0, false, Backend::CPU, ScalarType::Double);
            auto indices_ = checked_tensor_unwrap(indices,"indices",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            dim = maybe_wrap_dim(dim, self_);
            THDoubleTensor_sort(values_, indices_, self_, dim, descending);
            bool maybe_scalar = self_->dim() == 0;
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(values, indices);
            break;
        }
        case ScalarType::Float: {
            auto values_ = checked_tensor_unwrap(values,"values",0, false, Backend::CPU, ScalarType::Float);
            auto indices_ = checked_tensor_unwrap(indices,"indices",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            dim = maybe_wrap_dim(dim, self_);
            THFloatTensor_sort(values_, indices_, self_, dim, descending);
            bool maybe_scalar = self_->dim() == 0;
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(values, indices);
            break;
        }
        case ScalarType::Int: {
            auto values_ = checked_tensor_unwrap(values,"values",0, false, Backend::CPU, ScalarType::Int);
            auto indices_ = checked_tensor_unwrap(indices,"indices",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            dim = maybe_wrap_dim(dim, self_);
            THIntTensor_sort(values_, indices_, self_, dim, descending);
            bool maybe_scalar = self_->dim() == 0;
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(values, indices);
            break;
        }
        case ScalarType::Long: {
            auto values_ = checked_tensor_unwrap(values,"values",0, false, Backend::CPU, ScalarType::Long);
            auto indices_ = checked_tensor_unwrap(indices,"indices",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            dim = maybe_wrap_dim(dim, self_);
            THLongTensor_sort(values_, indices_, self_, dim, descending);
            bool maybe_scalar = self_->dim() == 0;
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(values, indices);
            break;
        }
        case ScalarType::Short: {
            auto values_ = checked_tensor_unwrap(values,"values",0, false, Backend::CPU, ScalarType::Short);
            auto indices_ = checked_tensor_unwrap(indices,"indices",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            dim = maybe_wrap_dim(dim, self_);
            THShortTensor_sort(values_, indices_, self_, dim, descending);
            bool maybe_scalar = self_->dim() == 0;
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(values, indices);
            break;
        }
        default:
            AT_ERROR("_th_sort_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor> CPUType::_th_sort(const Tensor & self, int64_t dim, bool descending) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto values_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto values = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(values_));
            auto indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(indices_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            dim = maybe_wrap_dim(dim, self_);
            THByteTensor_sort(values_, indices_, self_, dim, descending);
            bool maybe_scalar = self_->dim() == 0;
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(values, indices);
            break;
        }
        case ScalarType::Char: {
            auto values_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto values = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(values_));
            auto indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(indices_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            dim = maybe_wrap_dim(dim, self_);
            THCharTensor_sort(values_, indices_, self_, dim, descending);
            bool maybe_scalar = self_->dim() == 0;
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(values, indices);
            break;
        }
        case ScalarType::Double: {
            auto values_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto values = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(values_));
            auto indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(indices_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            dim = maybe_wrap_dim(dim, self_);
            THDoubleTensor_sort(values_, indices_, self_, dim, descending);
            bool maybe_scalar = self_->dim() == 0;
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(values, indices);
            break;
        }
        case ScalarType::Float: {
            auto values_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto values = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(values_));
            auto indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(indices_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            dim = maybe_wrap_dim(dim, self_);
            THFloatTensor_sort(values_, indices_, self_, dim, descending);
            bool maybe_scalar = self_->dim() == 0;
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(values, indices);
            break;
        }
        case ScalarType::Int: {
            auto values_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto values = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(values_));
            auto indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(indices_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            dim = maybe_wrap_dim(dim, self_);
            THIntTensor_sort(values_, indices_, self_, dim, descending);
            bool maybe_scalar = self_->dim() == 0;
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(values, indices);
            break;
        }
        case ScalarType::Long: {
            auto values_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto values = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(values_));
            auto indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(indices_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            dim = maybe_wrap_dim(dim, self_);
            THLongTensor_sort(values_, indices_, self_, dim, descending);
            bool maybe_scalar = self_->dim() == 0;
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(values, indices);
            break;
        }
        case ScalarType::Short: {
            auto values_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto values = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(values_));
            auto indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(indices_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            dim = maybe_wrap_dim(dim, self_);
            THShortTensor_sort(values_, indices_, self_, dim, descending);
            bool maybe_scalar = self_->dim() == 0;
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(values, indices);
            break;
        }
        default:
            AT_ERROR("_th_sort not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor &,Tensor &> CPUType::_th_topk_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto values_ = checked_tensor_unwrap(values,"values",0, false, Backend::CPU, ScalarType::Byte);
            auto indices_ = checked_tensor_unwrap(indices,"indices",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            dim = maybe_wrap_dim(dim, self_);
            THByteTensor_topk(values_, indices_, self_, k, dim, largest, sorted);
            bool maybe_scalar = self_->dim() == 0;
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(values, indices);
            break;
        }
        case ScalarType::Char: {
            auto values_ = checked_tensor_unwrap(values,"values",0, false, Backend::CPU, ScalarType::Char);
            auto indices_ = checked_tensor_unwrap(indices,"indices",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            dim = maybe_wrap_dim(dim, self_);
            THCharTensor_topk(values_, indices_, self_, k, dim, largest, sorted);
            bool maybe_scalar = self_->dim() == 0;
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(values, indices);
            break;
        }
        case ScalarType::Double: {
            auto values_ = checked_tensor_unwrap(values,"values",0, false, Backend::CPU, ScalarType::Double);
            auto indices_ = checked_tensor_unwrap(indices,"indices",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            dim = maybe_wrap_dim(dim, self_);
            THDoubleTensor_topk(values_, indices_, self_, k, dim, largest, sorted);
            bool maybe_scalar = self_->dim() == 0;
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(values, indices);
            break;
        }
        case ScalarType::Float: {
            auto values_ = checked_tensor_unwrap(values,"values",0, false, Backend::CPU, ScalarType::Float);
            auto indices_ = checked_tensor_unwrap(indices,"indices",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            dim = maybe_wrap_dim(dim, self_);
            THFloatTensor_topk(values_, indices_, self_, k, dim, largest, sorted);
            bool maybe_scalar = self_->dim() == 0;
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(values, indices);
            break;
        }
        case ScalarType::Int: {
            auto values_ = checked_tensor_unwrap(values,"values",0, false, Backend::CPU, ScalarType::Int);
            auto indices_ = checked_tensor_unwrap(indices,"indices",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            dim = maybe_wrap_dim(dim, self_);
            THIntTensor_topk(values_, indices_, self_, k, dim, largest, sorted);
            bool maybe_scalar = self_->dim() == 0;
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(values, indices);
            break;
        }
        case ScalarType::Long: {
            auto values_ = checked_tensor_unwrap(values,"values",0, false, Backend::CPU, ScalarType::Long);
            auto indices_ = checked_tensor_unwrap(indices,"indices",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            dim = maybe_wrap_dim(dim, self_);
            THLongTensor_topk(values_, indices_, self_, k, dim, largest, sorted);
            bool maybe_scalar = self_->dim() == 0;
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(values, indices);
            break;
        }
        case ScalarType::Short: {
            auto values_ = checked_tensor_unwrap(values,"values",0, false, Backend::CPU, ScalarType::Short);
            auto indices_ = checked_tensor_unwrap(indices,"indices",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            dim = maybe_wrap_dim(dim, self_);
            THShortTensor_topk(values_, indices_, self_, k, dim, largest, sorted);
            bool maybe_scalar = self_->dim() == 0;
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(values, indices);
            break;
        }
        default:
            AT_ERROR("_th_topk_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor> CPUType::_th_topk(const Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto values_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto values = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(values_));
            auto indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(indices_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            dim = maybe_wrap_dim(dim, self_);
            THByteTensor_topk(values_, indices_, self_, k, dim, largest, sorted);
            bool maybe_scalar = self_->dim() == 0;
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(values, indices);
            break;
        }
        case ScalarType::Char: {
            auto values_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto values = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(values_));
            auto indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(indices_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            dim = maybe_wrap_dim(dim, self_);
            THCharTensor_topk(values_, indices_, self_, k, dim, largest, sorted);
            bool maybe_scalar = self_->dim() == 0;
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(values, indices);
            break;
        }
        case ScalarType::Double: {
            auto values_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto values = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(values_));
            auto indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(indices_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            dim = maybe_wrap_dim(dim, self_);
            THDoubleTensor_topk(values_, indices_, self_, k, dim, largest, sorted);
            bool maybe_scalar = self_->dim() == 0;
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(values, indices);
            break;
        }
        case ScalarType::Float: {
            auto values_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto values = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(values_));
            auto indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(indices_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            dim = maybe_wrap_dim(dim, self_);
            THFloatTensor_topk(values_, indices_, self_, k, dim, largest, sorted);
            bool maybe_scalar = self_->dim() == 0;
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(values, indices);
            break;
        }
        case ScalarType::Int: {
            auto values_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto values = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(values_));
            auto indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(indices_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            dim = maybe_wrap_dim(dim, self_);
            THIntTensor_topk(values_, indices_, self_, k, dim, largest, sorted);
            bool maybe_scalar = self_->dim() == 0;
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(values, indices);
            break;
        }
        case ScalarType::Long: {
            auto values_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto values = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(values_));
            auto indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(indices_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            dim = maybe_wrap_dim(dim, self_);
            THLongTensor_topk(values_, indices_, self_, k, dim, largest, sorted);
            bool maybe_scalar = self_->dim() == 0;
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(values, indices);
            break;
        }
        case ScalarType::Short: {
            auto values_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto values = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(values_));
            auto indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(indices_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            dim = maybe_wrap_dim(dim, self_);
            THShortTensor_topk(values_, indices_, self_, k, dim, largest, sorted);
            bool maybe_scalar = self_->dim() == 0;
            values_->maybe_zero_dim(maybe_scalar);
            indices_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(values, indices);
            break;
        }
        default:
            AT_ERROR("_th_topk not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_lgamma_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_lgamma(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_lgamma(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_lgamma_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_lgamma(const Tensor & self) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_lgamma(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_lgamma(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_lgamma not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_lgamma_(Tensor & self) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_lgamma(self_, self_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_lgamma(self_, self_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_lgamma_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_digamma_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_digamma(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_digamma(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_digamma_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_digamma(const Tensor & self) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_digamma(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_digamma(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_digamma not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_digamma_(Tensor & self) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_digamma(self_, self_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_digamma(self_, self_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_digamma_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_polygamma_out(Tensor & result, int64_t n, const Tensor & self) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_polygamma(result_, n, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_polygamma(result_, n, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_polygamma_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_polygamma(int64_t n, const Tensor & self) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_polygamma(result_, n, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_polygamma(result_, n, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_polygamma not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_polygamma_(Tensor & self, int64_t n) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_polygamma(self_, n, self_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_polygamma(self_, n, self_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_polygamma_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_cosh_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_cosh(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_cosh(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_cosh_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_cosh(const Tensor & self) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_cosh(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_cosh(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_cosh not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_sinh_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_sinh(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_sinh(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_sinh_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_sinh(const Tensor & self) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_sinh(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_sinh(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_sinh not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_erfinv_(Tensor & self) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_erfinv(self_, self_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_erfinv(self_, self_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_erfinv_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_erfinv_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_erfinv(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_erfinv(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_erfinv_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_erfinv(const Tensor & self) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_erfinv(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_erfinv(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_erfinv not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_var_out(Tensor & result, const Tensor & self, int64_t dim, bool unbiased, bool keepdim) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            dim = maybe_wrap_dim(dim, self_);
            THDoubleTensor_var(result_, self_, dim, (unbiased) ? 0 : 1, keepdim);
            result_->maybe_zero_dim(self_->dim() == 0 || (keepdim == false && self_->dim() == 1));
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            dim = maybe_wrap_dim(dim, self_);
            THFloatTensor_var(result_, self_, dim, (unbiased) ? 0 : 1, keepdim);
            result_->maybe_zero_dim(self_->dim() == 0 || (keepdim == false && self_->dim() == 1));
            return result;
            break;
        }
        default:
            AT_ERROR("_th_var_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_var(const Tensor & self, int64_t dim, bool unbiased, bool keepdim) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            dim = maybe_wrap_dim(dim, self_);
            THDoubleTensor_var(result_, self_, dim, (unbiased) ? 0 : 1, keepdim);
            result_->maybe_zero_dim(self_->dim() == 0 || (keepdim == false && self_->dim() == 1));
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            dim = maybe_wrap_dim(dim, self_);
            THFloatTensor_var(result_, self_, dim, (unbiased) ? 0 : 1, keepdim);
            result_->maybe_zero_dim(self_->dim() == 0 || (keepdim == false && self_->dim() == 1));
            return result;
            break;
        }
        default:
            AT_ERROR("_th_var not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_var(const Tensor & self, bool unbiased) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            return at::scalar_tensor(convert<double>(THDoubleTensor_varall(self_, (unbiased) ? 0 : 1)), options(ScalarType::Double));
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            return at::scalar_tensor(convert<float>(THFloatTensor_varall(self_, (unbiased) ? 0 : 1)), options(ScalarType::Float));
            break;
        }
        default:
            AT_ERROR("_th_var not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_std_out(Tensor & result, const Tensor & self, int64_t dim, bool unbiased, bool keepdim) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            dim = maybe_wrap_dim(dim, self_);
            THDoubleTensor_std(result_, self_, dim, (unbiased) ? 0 : 1, keepdim);
            result_->maybe_zero_dim(self_->dim() == 0 || (keepdim == false && self_->dim() == 1));
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            dim = maybe_wrap_dim(dim, self_);
            THFloatTensor_std(result_, self_, dim, (unbiased) ? 0 : 1, keepdim);
            result_->maybe_zero_dim(self_->dim() == 0 || (keepdim == false && self_->dim() == 1));
            return result;
            break;
        }
        default:
            AT_ERROR("_th_std_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_std(const Tensor & self, int64_t dim, bool unbiased, bool keepdim) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            dim = maybe_wrap_dim(dim, self_);
            THDoubleTensor_std(result_, self_, dim, (unbiased) ? 0 : 1, keepdim);
            result_->maybe_zero_dim(self_->dim() == 0 || (keepdim == false && self_->dim() == 1));
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            dim = maybe_wrap_dim(dim, self_);
            THFloatTensor_std(result_, self_, dim, (unbiased) ? 0 : 1, keepdim);
            result_->maybe_zero_dim(self_->dim() == 0 || (keepdim == false && self_->dim() == 1));
            return result;
            break;
        }
        default:
            AT_ERROR("_th_std not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_std(const Tensor & self, bool unbiased) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            return at::scalar_tensor(convert<double>(THDoubleTensor_stdall(self_, (unbiased) ? 0 : 1)), options(ScalarType::Double));
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            return at::scalar_tensor(convert<float>(THFloatTensor_stdall(self_, (unbiased) ? 0 : 1)), options(ScalarType::Float));
            break;
        }
        default:
            AT_ERROR("_th_std not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_renorm_out(Tensor & result, const Tensor & self, Scalar p, int64_t dim, Scalar maxnorm) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto p_ = p.toDouble();
            dim = maybe_wrap_dim(dim, self_);
            auto maxnorm_ = maxnorm.toDouble();
            THDoubleTensor_renorm(result_, self_, p_, dim, maxnorm_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto p_ = p.toFloat();
            dim = maybe_wrap_dim(dim, self_);
            auto maxnorm_ = maxnorm.toFloat();
            THFloatTensor_renorm(result_, self_, p_, dim, maxnorm_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_renorm_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_renorm(const Tensor & self, Scalar p, int64_t dim, Scalar maxnorm) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto p_ = p.toDouble();
            dim = maybe_wrap_dim(dim, self_);
            auto maxnorm_ = maxnorm.toDouble();
            THDoubleTensor_renorm(result_, self_, p_, dim, maxnorm_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto p_ = p.toFloat();
            dim = maybe_wrap_dim(dim, self_);
            auto maxnorm_ = maxnorm.toFloat();
            THFloatTensor_renorm(result_, self_, p_, dim, maxnorm_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_renorm not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_renorm_(Tensor & self, Scalar p, int64_t dim, Scalar maxnorm) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto p_ = p.toDouble();
            dim = maybe_wrap_dim(dim, self_);
            auto maxnorm_ = maxnorm.toDouble();
            THDoubleTensor_renorm(self_, self_, p_, dim, maxnorm_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto p_ = p.toFloat();
            dim = maybe_wrap_dim(dim, self_);
            auto maxnorm_ = maxnorm.toFloat();
            THFloatTensor_renorm(self_, self_, p_, dim, maxnorm_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_renorm_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::s__th_dist(const Tensor & self, const Tensor & other, Scalar p) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Double);
            auto p_ = p.toDouble();
            return at::scalar_tensor(convert<double>(THDoubleTensor_dist(self_, other_, p_)), options(ScalarType::Double));
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Float);
            auto p_ = p.toFloat();
            return at::scalar_tensor(convert<float>(THFloatTensor_dist(self_, other_, p_)), options(ScalarType::Float));
            break;
        }
        default:
            AT_ERROR("_th_dist not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_atan2_out(Tensor & result, const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_atan2(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_atan2(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_atan2_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::s__th_atan2(const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_atan2(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_atan2(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_atan2 not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_atan2_(Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_atan2(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_atan2(self_, self_, other_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_atan2_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_pow_out(Tensor & result, const Tensor & self, Scalar exponent) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto exponent_ = exponent.toByte();
            THByteTensor_pow(result_, self_, exponent_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto exponent_ = exponent.toChar();
            THCharTensor_pow(result_, self_, exponent_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto exponent_ = exponent.toDouble();
            THDoubleTensor_pow(result_, self_, exponent_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto exponent_ = exponent.toFloat();
            THFloatTensor_pow(result_, self_, exponent_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto exponent_ = exponent.toInt();
            THIntTensor_pow(result_, self_, exponent_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto exponent_ = exponent.toLong();
            THLongTensor_pow(result_, self_, exponent_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto exponent_ = exponent.toShort();
            THShortTensor_pow(result_, self_, exponent_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_pow_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_pow(const Tensor & self, Scalar exponent) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto exponent_ = exponent.toByte();
            THByteTensor_pow(result_, self_, exponent_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto exponent_ = exponent.toChar();
            THCharTensor_pow(result_, self_, exponent_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto exponent_ = exponent.toDouble();
            THDoubleTensor_pow(result_, self_, exponent_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto exponent_ = exponent.toFloat();
            THFloatTensor_pow(result_, self_, exponent_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto exponent_ = exponent.toInt();
            THIntTensor_pow(result_, self_, exponent_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto exponent_ = exponent.toLong();
            THLongTensor_pow(result_, self_, exponent_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto exponent_ = exponent.toShort();
            THShortTensor_pow(result_, self_, exponent_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_pow not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_pow_out(Tensor & result, const Tensor & self, const Tensor & exponent) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto exponent_ = checked_tensor_unwrap(exponent,"exponent",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_cpow(result_, self_, exponent_);
            result_->maybe_zero_dim(self_->dim() == 0 && exponent_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto exponent_ = checked_tensor_unwrap(exponent,"exponent",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_cpow(result_, self_, exponent_);
            result_->maybe_zero_dim(self_->dim() == 0 && exponent_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto exponent_ = checked_tensor_unwrap(exponent,"exponent",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_cpow(result_, self_, exponent_);
            result_->maybe_zero_dim(self_->dim() == 0 && exponent_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto exponent_ = checked_tensor_unwrap(exponent,"exponent",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_cpow(result_, self_, exponent_);
            result_->maybe_zero_dim(self_->dim() == 0 && exponent_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto exponent_ = checked_tensor_unwrap(exponent,"exponent",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_cpow(result_, self_, exponent_);
            result_->maybe_zero_dim(self_->dim() == 0 && exponent_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto exponent_ = checked_tensor_unwrap(exponent,"exponent",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_cpow(result_, self_, exponent_);
            result_->maybe_zero_dim(self_->dim() == 0 && exponent_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto exponent_ = checked_tensor_unwrap(exponent,"exponent",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_cpow(result_, self_, exponent_);
            result_->maybe_zero_dim(self_->dim() == 0 && exponent_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_pow_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::s__th_pow(const Tensor & self, const Tensor & exponent) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto exponent_ = checked_tensor_unwrap(exponent,"exponent",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_cpow(result_, self_, exponent_);
            result_->maybe_zero_dim(self_->dim() == 0 && exponent_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto exponent_ = checked_tensor_unwrap(exponent,"exponent",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_cpow(result_, self_, exponent_);
            result_->maybe_zero_dim(self_->dim() == 0 && exponent_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto exponent_ = checked_tensor_unwrap(exponent,"exponent",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_cpow(result_, self_, exponent_);
            result_->maybe_zero_dim(self_->dim() == 0 && exponent_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto exponent_ = checked_tensor_unwrap(exponent,"exponent",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_cpow(result_, self_, exponent_);
            result_->maybe_zero_dim(self_->dim() == 0 && exponent_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto exponent_ = checked_tensor_unwrap(exponent,"exponent",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_cpow(result_, self_, exponent_);
            result_->maybe_zero_dim(self_->dim() == 0 && exponent_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto exponent_ = checked_tensor_unwrap(exponent,"exponent",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_cpow(result_, self_, exponent_);
            result_->maybe_zero_dim(self_->dim() == 0 && exponent_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto exponent_ = checked_tensor_unwrap(exponent,"exponent",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_cpow(result_, self_, exponent_);
            result_->maybe_zero_dim(self_->dim() == 0 && exponent_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_pow not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_pow_out(Tensor & result, Scalar self, const Tensor & exponent) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(result);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = self.toByte();
            auto exponent_ = checked_tensor_unwrap(exponent,"exponent",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_tpow(result_, self_, exponent_);
            result_->maybe_zero_dim(exponent_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            auto self_ = self.toChar();
            auto exponent_ = checked_tensor_unwrap(exponent,"exponent",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_tpow(result_, self_, exponent_);
            result_->maybe_zero_dim(exponent_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = self.toDouble();
            auto exponent_ = checked_tensor_unwrap(exponent,"exponent",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_tpow(result_, self_, exponent_);
            result_->maybe_zero_dim(exponent_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = self.toFloat();
            auto exponent_ = checked_tensor_unwrap(exponent,"exponent",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_tpow(result_, self_, exponent_);
            result_->maybe_zero_dim(exponent_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            auto self_ = self.toInt();
            auto exponent_ = checked_tensor_unwrap(exponent,"exponent",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_tpow(result_, self_, exponent_);
            result_->maybe_zero_dim(exponent_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = self.toLong();
            auto exponent_ = checked_tensor_unwrap(exponent,"exponent",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_tpow(result_, self_, exponent_);
            result_->maybe_zero_dim(exponent_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            auto self_ = self.toShort();
            auto exponent_ = checked_tensor_unwrap(exponent,"exponent",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_tpow(result_, self_, exponent_);
            result_->maybe_zero_dim(exponent_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_pow_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_pow(Scalar self, const Tensor & exponent) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(exponent);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = self.toByte();
            auto exponent_ = checked_tensor_unwrap(exponent,"exponent",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_tpow(result_, self_, exponent_);
            result_->maybe_zero_dim(exponent_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = self.toChar();
            auto exponent_ = checked_tensor_unwrap(exponent,"exponent",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_tpow(result_, self_, exponent_);
            result_->maybe_zero_dim(exponent_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = self.toDouble();
            auto exponent_ = checked_tensor_unwrap(exponent,"exponent",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_tpow(result_, self_, exponent_);
            result_->maybe_zero_dim(exponent_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = self.toFloat();
            auto exponent_ = checked_tensor_unwrap(exponent,"exponent",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_tpow(result_, self_, exponent_);
            result_->maybe_zero_dim(exponent_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = self.toInt();
            auto exponent_ = checked_tensor_unwrap(exponent,"exponent",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_tpow(result_, self_, exponent_);
            result_->maybe_zero_dim(exponent_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = self.toLong();
            auto exponent_ = checked_tensor_unwrap(exponent,"exponent",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_tpow(result_, self_, exponent_);
            result_->maybe_zero_dim(exponent_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = self.toShort();
            auto exponent_ = checked_tensor_unwrap(exponent,"exponent",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_tpow(result_, self_, exponent_);
            result_->maybe_zero_dim(exponent_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_pow not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_pow_(Tensor & self, Scalar exponent) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto exponent_ = exponent.toByte();
            THByteTensor_pow(self_, self_, exponent_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto exponent_ = exponent.toChar();
            THCharTensor_pow(self_, self_, exponent_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto exponent_ = exponent.toDouble();
            THDoubleTensor_pow(self_, self_, exponent_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto exponent_ = exponent.toFloat();
            THFloatTensor_pow(self_, self_, exponent_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto exponent_ = exponent.toInt();
            THIntTensor_pow(self_, self_, exponent_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto exponent_ = exponent.toLong();
            THLongTensor_pow(self_, self_, exponent_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto exponent_ = exponent.toShort();
            THShortTensor_pow(self_, self_, exponent_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_pow_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_pow_(Tensor & self, const Tensor & exponent) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto exponent_ = checked_tensor_unwrap(exponent,"exponent",3, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_cpow(self_, self_, exponent_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto exponent_ = checked_tensor_unwrap(exponent,"exponent",3, false, Backend::CPU, ScalarType::Char);
            THCharTensor_cpow(self_, self_, exponent_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto exponent_ = checked_tensor_unwrap(exponent,"exponent",3, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_cpow(self_, self_, exponent_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto exponent_ = checked_tensor_unwrap(exponent,"exponent",3, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_cpow(self_, self_, exponent_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto exponent_ = checked_tensor_unwrap(exponent,"exponent",3, false, Backend::CPU, ScalarType::Int);
            THIntTensor_cpow(self_, self_, exponent_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto exponent_ = checked_tensor_unwrap(exponent,"exponent",3, false, Backend::CPU, ScalarType::Long);
            THLongTensor_cpow(self_, self_, exponent_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto exponent_ = checked_tensor_unwrap(exponent,"exponent",3, false, Backend::CPU, ScalarType::Short);
            THShortTensor_cpow(self_, self_, exponent_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_pow_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_histc_out(Tensor & result, const Tensor & self, int64_t bins, Scalar min, Scalar max) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto min_ = min.toDouble();
            auto max_ = max.toDouble();
            THDoubleTensor_histc(result_, self_, bins, min_, max_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto min_ = min.toFloat();
            auto max_ = max.toFloat();
            THFloatTensor_histc(result_, self_, bins, min_, max_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_histc_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_histc(const Tensor & self, int64_t bins, Scalar min, Scalar max) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto min_ = min.toDouble();
            auto max_ = max.toDouble();
            THDoubleTensor_histc(result_, self_, bins, min_, max_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto min_ = min.toFloat();
            auto max_ = max.toFloat();
            THFloatTensor_histc(result_, self_, bins, min_, max_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_histc not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_zero_(Tensor & self) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            THBoolTensor_zero(self_);
            return self;
            break;
        }
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_zero(self_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            THCharTensor_zero(self_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_zero(self_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_zero(self_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            THIntTensor_zero(self_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            THLongTensor_zero(self_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            THShortTensor_zero(self_);
            return self;
            break;
        }
        case ScalarType::Half: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Half);
            THHalfTensor_zero(self_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_zero_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_cumsum_out(Tensor & result, const Tensor & self, int64_t dim) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            dim = maybe_wrap_dim(dim, self_);
            THByteTensor_cumsum(result_, self_, dim);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            dim = maybe_wrap_dim(dim, self_);
            THCharTensor_cumsum(result_, self_, dim);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            dim = maybe_wrap_dim(dim, self_);
            THDoubleTensor_cumsum(result_, self_, dim);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            dim = maybe_wrap_dim(dim, self_);
            THFloatTensor_cumsum(result_, self_, dim);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            dim = maybe_wrap_dim(dim, self_);
            THIntTensor_cumsum(result_, self_, dim);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            dim = maybe_wrap_dim(dim, self_);
            THLongTensor_cumsum(result_, self_, dim);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            dim = maybe_wrap_dim(dim, self_);
            THShortTensor_cumsum(result_, self_, dim);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_cumsum_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_cumsum(const Tensor & self, int64_t dim) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            dim = maybe_wrap_dim(dim, self_);
            THByteTensor_cumsum(result_, self_, dim);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            dim = maybe_wrap_dim(dim, self_);
            THCharTensor_cumsum(result_, self_, dim);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            dim = maybe_wrap_dim(dim, self_);
            THDoubleTensor_cumsum(result_, self_, dim);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            dim = maybe_wrap_dim(dim, self_);
            THFloatTensor_cumsum(result_, self_, dim);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            dim = maybe_wrap_dim(dim, self_);
            THIntTensor_cumsum(result_, self_, dim);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            dim = maybe_wrap_dim(dim, self_);
            THLongTensor_cumsum(result_, self_, dim);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            dim = maybe_wrap_dim(dim, self_);
            THShortTensor_cumsum(result_, self_, dim);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_cumsum not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_cumprod_out(Tensor & result, const Tensor & self, int64_t dim) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            dim = maybe_wrap_dim(dim, self_);
            THByteTensor_cumprod(result_, self_, dim);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            dim = maybe_wrap_dim(dim, self_);
            THCharTensor_cumprod(result_, self_, dim);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            dim = maybe_wrap_dim(dim, self_);
            THDoubleTensor_cumprod(result_, self_, dim);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            dim = maybe_wrap_dim(dim, self_);
            THFloatTensor_cumprod(result_, self_, dim);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            dim = maybe_wrap_dim(dim, self_);
            THIntTensor_cumprod(result_, self_, dim);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            dim = maybe_wrap_dim(dim, self_);
            THLongTensor_cumprod(result_, self_, dim);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            dim = maybe_wrap_dim(dim, self_);
            THShortTensor_cumprod(result_, self_, dim);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_cumprod_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_cumprod(const Tensor & self, int64_t dim) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            dim = maybe_wrap_dim(dim, self_);
            THByteTensor_cumprod(result_, self_, dim);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            dim = maybe_wrap_dim(dim, self_);
            THCharTensor_cumprod(result_, self_, dim);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            dim = maybe_wrap_dim(dim, self_);
            THDoubleTensor_cumprod(result_, self_, dim);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            dim = maybe_wrap_dim(dim, self_);
            THFloatTensor_cumprod(result_, self_, dim);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            dim = maybe_wrap_dim(dim, self_);
            THIntTensor_cumprod(result_, self_, dim);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            dim = maybe_wrap_dim(dim, self_);
            THLongTensor_cumprod(result_, self_, dim);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            dim = maybe_wrap_dim(dim, self_);
            THShortTensor_cumprod(result_, self_, dim);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_cumprod not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_sign_out(Tensor & result, const Tensor & self) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_sign(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            THCharTensor_sign(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_sign(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_sign(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            THIntTensor_sign(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            THLongTensor_sign(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            THShortTensor_sign(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_sign_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_sign(const Tensor & self) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_sign(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            THCharTensor_sign(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_sign(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_sign(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            THIntTensor_sign(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            THLongTensor_sign(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            THShortTensor_sign(result_, self_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_sign not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_sign_(Tensor & self) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_sign(self_, self_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            THCharTensor_sign(self_, self_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_sign(self_, self_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_sign(self_, self_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            THIntTensor_sign(self_, self_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            THLongTensor_sign(self_, self_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            THShortTensor_sign(self_, self_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_sign_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_trace(const Tensor & self) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            return at::scalar_tensor(convert<uint8_t>(THByteTensor_trace(self_)), options(ScalarType::Byte));
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            return at::scalar_tensor(convert<int8_t>(THCharTensor_trace(self_)), options(ScalarType::Char));
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            return at::scalar_tensor(convert<double>(THDoubleTensor_trace(self_)), options(ScalarType::Double));
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            return at::scalar_tensor(convert<float>(THFloatTensor_trace(self_)), options(ScalarType::Float));
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            return at::scalar_tensor(convert<int>(THIntTensor_trace(self_)), options(ScalarType::Int));
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            return at::scalar_tensor(convert<int64_t>(THLongTensor_trace(self_)), options(ScalarType::Long));
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            return at::scalar_tensor(convert<int16_t>(THShortTensor_trace(self_)), options(ScalarType::Short));
            break;
        }
        default:
            AT_ERROR("_th_trace not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_fmod_out(Tensor & result, const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = other.toByte();
            THByteTensor_fmod(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = other.toChar();
            THCharTensor_fmod(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = other.toDouble();
            THDoubleTensor_fmod(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = other.toFloat();
            THFloatTensor_fmod(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = other.toInt();
            THIntTensor_fmod(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = other.toLong();
            THLongTensor_fmod(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = other.toShort();
            THShortTensor_fmod(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_fmod_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_fmod(const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = other.toByte();
            THByteTensor_fmod(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = other.toChar();
            THCharTensor_fmod(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = other.toDouble();
            THDoubleTensor_fmod(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = other.toFloat();
            THFloatTensor_fmod(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = other.toInt();
            THIntTensor_fmod(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = other.toLong();
            THLongTensor_fmod(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = other.toShort();
            THShortTensor_fmod(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_fmod not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_fmod_out(Tensor & result, const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_cfmod(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_cfmod(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_cfmod(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_cfmod(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_cfmod(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_cfmod(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_cfmod(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_fmod_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::s__th_fmod(const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_cfmod(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_cfmod(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_cfmod(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_cfmod(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_cfmod(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_cfmod(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_cfmod(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_fmod not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_fmod_(Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = other.toByte();
            THByteTensor_fmod(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = other.toChar();
            THCharTensor_fmod(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = other.toDouble();
            THDoubleTensor_fmod(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = other.toFloat();
            THFloatTensor_fmod(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = other.toInt();
            THIntTensor_fmod(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = other.toLong();
            THLongTensor_fmod(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = other.toShort();
            THShortTensor_fmod(self_, self_, other_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_fmod_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_fmod_(Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_cfmod(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Char);
            THCharTensor_cfmod(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_cfmod(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_cfmod(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Int);
            THIntTensor_cfmod(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Long);
            THLongTensor_cfmod(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Short);
            THShortTensor_cfmod(self_, self_, other_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_fmod_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_remainder_out(Tensor & result, const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = other.toByte();
            THByteTensor_remainder(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = other.toChar();
            THCharTensor_remainder(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = other.toDouble();
            THDoubleTensor_remainder(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = other.toFloat();
            THFloatTensor_remainder(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = other.toInt();
            THIntTensor_remainder(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = other.toLong();
            THLongTensor_remainder(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = other.toShort();
            THShortTensor_remainder(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_remainder_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_remainder(const Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = other.toByte();
            THByteTensor_remainder(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = other.toChar();
            THCharTensor_remainder(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = other.toDouble();
            THDoubleTensor_remainder(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = other.toFloat();
            THFloatTensor_remainder(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = other.toInt();
            THIntTensor_remainder(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = other.toLong();
            THLongTensor_remainder(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = other.toShort();
            THShortTensor_remainder(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_remainder not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_remainder_out(Tensor & result, const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_cremainder(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_cremainder(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_cremainder(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_cremainder(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_cremainder(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_cremainder(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_cremainder(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_remainder_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::s__th_remainder(const Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_cremainder(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_cremainder(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_cremainder(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_cremainder(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_cremainder(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_cremainder(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_cremainder(result_, self_, other_);
            result_->maybe_zero_dim(self_->dim() == 0 && other_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_remainder not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_remainder_(Tensor & self, Scalar other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = other.toByte();
            THByteTensor_remainder(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = other.toChar();
            THCharTensor_remainder(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = other.toDouble();
            THDoubleTensor_remainder(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = other.toFloat();
            THFloatTensor_remainder(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = other.toInt();
            THIntTensor_remainder(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = other.toLong();
            THLongTensor_remainder(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = other.toShort();
            THShortTensor_remainder(self_, self_, other_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_remainder_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_remainder_(Tensor & self, const Tensor & other) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_cremainder(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Char);
            THCharTensor_cremainder(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_cremainder(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_cremainder(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Int);
            THIntTensor_cremainder(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Long);
            THLongTensor_cremainder(self_, self_, other_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto other_ = checked_tensor_unwrap(other,"other",3, false, Backend::CPU, ScalarType::Short);
            THShortTensor_cremainder(self_, self_, other_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_remainder_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_clamp_out(Tensor & result, const Tensor & self, Scalar min, Scalar max) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto min_ = min.toByte();
            auto max_ = max.toByte();
            THByteTensor_clamp(result_, self_, min_, max_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto min_ = min.toChar();
            auto max_ = max.toChar();
            THCharTensor_clamp(result_, self_, min_, max_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto min_ = min.toDouble();
            auto max_ = max.toDouble();
            THDoubleTensor_clamp(result_, self_, min_, max_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto min_ = min.toFloat();
            auto max_ = max.toFloat();
            THFloatTensor_clamp(result_, self_, min_, max_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto min_ = min.toInt();
            auto max_ = max.toInt();
            THIntTensor_clamp(result_, self_, min_, max_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto min_ = min.toLong();
            auto max_ = max.toLong();
            THLongTensor_clamp(result_, self_, min_, max_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto min_ = min.toShort();
            auto max_ = max.toShort();
            THShortTensor_clamp(result_, self_, min_, max_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_clamp_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_clamp(const Tensor & self, Scalar min, Scalar max) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto min_ = min.toByte();
            auto max_ = max.toByte();
            THByteTensor_clamp(result_, self_, min_, max_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto min_ = min.toChar();
            auto max_ = max.toChar();
            THCharTensor_clamp(result_, self_, min_, max_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto min_ = min.toDouble();
            auto max_ = max.toDouble();
            THDoubleTensor_clamp(result_, self_, min_, max_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto min_ = min.toFloat();
            auto max_ = max.toFloat();
            THFloatTensor_clamp(result_, self_, min_, max_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto min_ = min.toInt();
            auto max_ = max.toInt();
            THIntTensor_clamp(result_, self_, min_, max_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto min_ = min.toLong();
            auto max_ = max.toLong();
            THLongTensor_clamp(result_, self_, min_, max_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto min_ = min.toShort();
            auto max_ = max.toShort();
            THShortTensor_clamp(result_, self_, min_, max_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_clamp not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_clamp_min_out(Tensor & result, const Tensor & self, Scalar min) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto min_ = min.toByte();
            THByteTensor_cmaxValue(result_, self_, min_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto min_ = min.toChar();
            THCharTensor_cmaxValue(result_, self_, min_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto min_ = min.toDouble();
            THDoubleTensor_cmaxValue(result_, self_, min_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto min_ = min.toFloat();
            THFloatTensor_cmaxValue(result_, self_, min_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto min_ = min.toInt();
            THIntTensor_cmaxValue(result_, self_, min_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto min_ = min.toLong();
            THLongTensor_cmaxValue(result_, self_, min_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto min_ = min.toShort();
            THShortTensor_cmaxValue(result_, self_, min_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_clamp_min_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_clamp_min(const Tensor & self, Scalar min) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto min_ = min.toByte();
            THByteTensor_cmaxValue(result_, self_, min_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto min_ = min.toChar();
            THCharTensor_cmaxValue(result_, self_, min_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto min_ = min.toDouble();
            THDoubleTensor_cmaxValue(result_, self_, min_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto min_ = min.toFloat();
            THFloatTensor_cmaxValue(result_, self_, min_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto min_ = min.toInt();
            THIntTensor_cmaxValue(result_, self_, min_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto min_ = min.toLong();
            THLongTensor_cmaxValue(result_, self_, min_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto min_ = min.toShort();
            THShortTensor_cmaxValue(result_, self_, min_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_clamp_min not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_clamp_max_out(Tensor & result, const Tensor & self, Scalar max) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto max_ = max.toByte();
            THByteTensor_cminValue(result_, self_, max_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto max_ = max.toChar();
            THCharTensor_cminValue(result_, self_, max_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto max_ = max.toDouble();
            THDoubleTensor_cminValue(result_, self_, max_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto max_ = max.toFloat();
            THFloatTensor_cminValue(result_, self_, max_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto max_ = max.toInt();
            THIntTensor_cminValue(result_, self_, max_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto max_ = max.toLong();
            THLongTensor_cminValue(result_, self_, max_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto max_ = max.toShort();
            THShortTensor_cminValue(result_, self_, max_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_clamp_max_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_clamp_max(const Tensor & self, Scalar max) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto max_ = max.toByte();
            THByteTensor_cminValue(result_, self_, max_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto max_ = max.toChar();
            THCharTensor_cminValue(result_, self_, max_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto max_ = max.toDouble();
            THDoubleTensor_cminValue(result_, self_, max_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto max_ = max.toFloat();
            THFloatTensor_cminValue(result_, self_, max_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto max_ = max.toInt();
            THIntTensor_cminValue(result_, self_, max_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto max_ = max.toLong();
            THLongTensor_cminValue(result_, self_, max_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto max_ = max.toShort();
            THShortTensor_cminValue(result_, self_, max_);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_clamp_max not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_dot(const Tensor & self, const Tensor & tensor) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto tensor_ = checked_tensor_unwrap(tensor,"tensor",2, false, Backend::CPU, ScalarType::Byte);
            return at::scalar_tensor(convert<uint8_t>(THByteTensor_dot(self_, tensor_)), options(ScalarType::Byte));
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto tensor_ = checked_tensor_unwrap(tensor,"tensor",2, false, Backend::CPU, ScalarType::Char);
            return at::scalar_tensor(convert<int8_t>(THCharTensor_dot(self_, tensor_)), options(ScalarType::Char));
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto tensor_ = checked_tensor_unwrap(tensor,"tensor",2, false, Backend::CPU, ScalarType::Double);
            return at::scalar_tensor(convert<double>(THDoubleTensor_dot(self_, tensor_)), options(ScalarType::Double));
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto tensor_ = checked_tensor_unwrap(tensor,"tensor",2, false, Backend::CPU, ScalarType::Float);
            return at::scalar_tensor(convert<float>(THFloatTensor_dot(self_, tensor_)), options(ScalarType::Float));
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto tensor_ = checked_tensor_unwrap(tensor,"tensor",2, false, Backend::CPU, ScalarType::Int);
            return at::scalar_tensor(convert<int>(THIntTensor_dot(self_, tensor_)), options(ScalarType::Int));
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto tensor_ = checked_tensor_unwrap(tensor,"tensor",2, false, Backend::CPU, ScalarType::Long);
            return at::scalar_tensor(convert<int64_t>(THLongTensor_dot(self_, tensor_)), options(ScalarType::Long));
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto tensor_ = checked_tensor_unwrap(tensor,"tensor",2, false, Backend::CPU, ScalarType::Short);
            return at::scalar_tensor(convert<int16_t>(THShortTensor_dot(self_, tensor_)), options(ScalarType::Short));
            break;
        }
        default:
            AT_ERROR("_th_dot not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_diag_out(Tensor & result, const Tensor & self, int64_t diagonal) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            if (self_->dim() == 0) {
              throw std::runtime_error("Input must be 1-d or 2-d");
            }
            THByteTensor_diag(result_, self_, diagonal);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            if (self_->dim() == 0) {
              throw std::runtime_error("Input must be 1-d or 2-d");
            }
            THCharTensor_diag(result_, self_, diagonal);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            if (self_->dim() == 0) {
              throw std::runtime_error("Input must be 1-d or 2-d");
            }
            THDoubleTensor_diag(result_, self_, diagonal);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            if (self_->dim() == 0) {
              throw std::runtime_error("Input must be 1-d or 2-d");
            }
            THFloatTensor_diag(result_, self_, diagonal);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            if (self_->dim() == 0) {
              throw std::runtime_error("Input must be 1-d or 2-d");
            }
            THIntTensor_diag(result_, self_, diagonal);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            if (self_->dim() == 0) {
              throw std::runtime_error("Input must be 1-d or 2-d");
            }
            THLongTensor_diag(result_, self_, diagonal);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            if (self_->dim() == 0) {
              throw std::runtime_error("Input must be 1-d or 2-d");
            }
            THShortTensor_diag(result_, self_, diagonal);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_diag_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_diag(const Tensor & self, int64_t diagonal) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            if (self_->dim() == 0) {
              throw std::runtime_error("Input must be 1-d or 2-d");
            }
            THByteTensor_diag(result_, self_, diagonal);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            if (self_->dim() == 0) {
              throw std::runtime_error("Input must be 1-d or 2-d");
            }
            THCharTensor_diag(result_, self_, diagonal);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            if (self_->dim() == 0) {
              throw std::runtime_error("Input must be 1-d or 2-d");
            }
            THDoubleTensor_diag(result_, self_, diagonal);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            if (self_->dim() == 0) {
              throw std::runtime_error("Input must be 1-d or 2-d");
            }
            THFloatTensor_diag(result_, self_, diagonal);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            if (self_->dim() == 0) {
              throw std::runtime_error("Input must be 1-d or 2-d");
            }
            THIntTensor_diag(result_, self_, diagonal);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            if (self_->dim() == 0) {
              throw std::runtime_error("Input must be 1-d or 2-d");
            }
            THLongTensor_diag(result_, self_, diagonal);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            if (self_->dim() == 0) {
              throw std::runtime_error("Input must be 1-d or 2-d");
            }
            THShortTensor_diag(result_, self_, diagonal);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_diag not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_addmm_out(Tensor & result, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto beta_ = beta.toByte();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Byte);
            auto alpha_ = alpha.toByte();
            auto mat1_ = checked_tensor_unwrap(mat1,"mat1",4, false, Backend::CPU, ScalarType::Byte);
            auto mat2_ = checked_tensor_unwrap(mat2,"mat2",5, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_addmm(result_, beta_, self_, alpha_, mat1_, mat2_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat1_->dim() == 0 && mat2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            auto beta_ = beta.toChar();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Char);
            auto alpha_ = alpha.toChar();
            auto mat1_ = checked_tensor_unwrap(mat1,"mat1",4, false, Backend::CPU, ScalarType::Char);
            auto mat2_ = checked_tensor_unwrap(mat2,"mat2",5, false, Backend::CPU, ScalarType::Char);
            THCharTensor_addmm(result_, beta_, self_, alpha_, mat1_, mat2_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat1_->dim() == 0 && mat2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto beta_ = beta.toDouble();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto alpha_ = alpha.toDouble();
            auto mat1_ = checked_tensor_unwrap(mat1,"mat1",4, false, Backend::CPU, ScalarType::Double);
            auto mat2_ = checked_tensor_unwrap(mat2,"mat2",5, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_addmm(result_, beta_, self_, alpha_, mat1_, mat2_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat1_->dim() == 0 && mat2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto beta_ = beta.toFloat();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto alpha_ = alpha.toFloat();
            auto mat1_ = checked_tensor_unwrap(mat1,"mat1",4, false, Backend::CPU, ScalarType::Float);
            auto mat2_ = checked_tensor_unwrap(mat2,"mat2",5, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_addmm(result_, beta_, self_, alpha_, mat1_, mat2_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat1_->dim() == 0 && mat2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            auto beta_ = beta.toInt();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Int);
            auto alpha_ = alpha.toInt();
            auto mat1_ = checked_tensor_unwrap(mat1,"mat1",4, false, Backend::CPU, ScalarType::Int);
            auto mat2_ = checked_tensor_unwrap(mat2,"mat2",5, false, Backend::CPU, ScalarType::Int);
            THIntTensor_addmm(result_, beta_, self_, alpha_, mat1_, mat2_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat1_->dim() == 0 && mat2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto beta_ = beta.toLong();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Long);
            auto alpha_ = alpha.toLong();
            auto mat1_ = checked_tensor_unwrap(mat1,"mat1",4, false, Backend::CPU, ScalarType::Long);
            auto mat2_ = checked_tensor_unwrap(mat2,"mat2",5, false, Backend::CPU, ScalarType::Long);
            THLongTensor_addmm(result_, beta_, self_, alpha_, mat1_, mat2_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat1_->dim() == 0 && mat2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            auto beta_ = beta.toShort();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Short);
            auto alpha_ = alpha.toShort();
            auto mat1_ = checked_tensor_unwrap(mat1,"mat1",4, false, Backend::CPU, ScalarType::Short);
            auto mat2_ = checked_tensor_unwrap(mat2,"mat2",5, false, Backend::CPU, ScalarType::Short);
            THShortTensor_addmm(result_, beta_, self_, alpha_, mat1_, mat2_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat1_->dim() == 0 && mat2_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_addmm_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::s__th_addmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto beta_ = beta.toByte();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Byte);
            auto alpha_ = alpha.toByte();
            auto mat1_ = checked_tensor_unwrap(mat1,"mat1",4, false, Backend::CPU, ScalarType::Byte);
            auto mat2_ = checked_tensor_unwrap(mat2,"mat2",5, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_addmm(result_, beta_, self_, alpha_, mat1_, mat2_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat1_->dim() == 0 && mat2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto beta_ = beta.toChar();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Char);
            auto alpha_ = alpha.toChar();
            auto mat1_ = checked_tensor_unwrap(mat1,"mat1",4, false, Backend::CPU, ScalarType::Char);
            auto mat2_ = checked_tensor_unwrap(mat2,"mat2",5, false, Backend::CPU, ScalarType::Char);
            THCharTensor_addmm(result_, beta_, self_, alpha_, mat1_, mat2_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat1_->dim() == 0 && mat2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto beta_ = beta.toDouble();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto alpha_ = alpha.toDouble();
            auto mat1_ = checked_tensor_unwrap(mat1,"mat1",4, false, Backend::CPU, ScalarType::Double);
            auto mat2_ = checked_tensor_unwrap(mat2,"mat2",5, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_addmm(result_, beta_, self_, alpha_, mat1_, mat2_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat1_->dim() == 0 && mat2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto beta_ = beta.toFloat();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto alpha_ = alpha.toFloat();
            auto mat1_ = checked_tensor_unwrap(mat1,"mat1",4, false, Backend::CPU, ScalarType::Float);
            auto mat2_ = checked_tensor_unwrap(mat2,"mat2",5, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_addmm(result_, beta_, self_, alpha_, mat1_, mat2_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat1_->dim() == 0 && mat2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto beta_ = beta.toInt();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Int);
            auto alpha_ = alpha.toInt();
            auto mat1_ = checked_tensor_unwrap(mat1,"mat1",4, false, Backend::CPU, ScalarType::Int);
            auto mat2_ = checked_tensor_unwrap(mat2,"mat2",5, false, Backend::CPU, ScalarType::Int);
            THIntTensor_addmm(result_, beta_, self_, alpha_, mat1_, mat2_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat1_->dim() == 0 && mat2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto beta_ = beta.toLong();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Long);
            auto alpha_ = alpha.toLong();
            auto mat1_ = checked_tensor_unwrap(mat1,"mat1",4, false, Backend::CPU, ScalarType::Long);
            auto mat2_ = checked_tensor_unwrap(mat2,"mat2",5, false, Backend::CPU, ScalarType::Long);
            THLongTensor_addmm(result_, beta_, self_, alpha_, mat1_, mat2_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat1_->dim() == 0 && mat2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto beta_ = beta.toShort();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Short);
            auto alpha_ = alpha.toShort();
            auto mat1_ = checked_tensor_unwrap(mat1,"mat1",4, false, Backend::CPU, ScalarType::Short);
            auto mat2_ = checked_tensor_unwrap(mat2,"mat2",5, false, Backend::CPU, ScalarType::Short);
            THShortTensor_addmm(result_, beta_, self_, alpha_, mat1_, mat2_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat1_->dim() == 0 && mat2_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_addmm not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_addmm_(Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto beta_ = beta.toByte();
            auto alpha_ = alpha.toByte();
            auto mat1_ = checked_tensor_unwrap(mat1,"mat1",5, false, Backend::CPU, ScalarType::Byte);
            auto mat2_ = checked_tensor_unwrap(mat2,"mat2",6, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_addmm(self_, beta_, self_, alpha_, mat1_, mat2_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto beta_ = beta.toChar();
            auto alpha_ = alpha.toChar();
            auto mat1_ = checked_tensor_unwrap(mat1,"mat1",5, false, Backend::CPU, ScalarType::Char);
            auto mat2_ = checked_tensor_unwrap(mat2,"mat2",6, false, Backend::CPU, ScalarType::Char);
            THCharTensor_addmm(self_, beta_, self_, alpha_, mat1_, mat2_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto beta_ = beta.toDouble();
            auto alpha_ = alpha.toDouble();
            auto mat1_ = checked_tensor_unwrap(mat1,"mat1",5, false, Backend::CPU, ScalarType::Double);
            auto mat2_ = checked_tensor_unwrap(mat2,"mat2",6, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_addmm(self_, beta_, self_, alpha_, mat1_, mat2_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto beta_ = beta.toFloat();
            auto alpha_ = alpha.toFloat();
            auto mat1_ = checked_tensor_unwrap(mat1,"mat1",5, false, Backend::CPU, ScalarType::Float);
            auto mat2_ = checked_tensor_unwrap(mat2,"mat2",6, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_addmm(self_, beta_, self_, alpha_, mat1_, mat2_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto beta_ = beta.toInt();
            auto alpha_ = alpha.toInt();
            auto mat1_ = checked_tensor_unwrap(mat1,"mat1",5, false, Backend::CPU, ScalarType::Int);
            auto mat2_ = checked_tensor_unwrap(mat2,"mat2",6, false, Backend::CPU, ScalarType::Int);
            THIntTensor_addmm(self_, beta_, self_, alpha_, mat1_, mat2_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto beta_ = beta.toLong();
            auto alpha_ = alpha.toLong();
            auto mat1_ = checked_tensor_unwrap(mat1,"mat1",5, false, Backend::CPU, ScalarType::Long);
            auto mat2_ = checked_tensor_unwrap(mat2,"mat2",6, false, Backend::CPU, ScalarType::Long);
            THLongTensor_addmm(self_, beta_, self_, alpha_, mat1_, mat2_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto beta_ = beta.toShort();
            auto alpha_ = alpha.toShort();
            auto mat1_ = checked_tensor_unwrap(mat1,"mat1",5, false, Backend::CPU, ScalarType::Short);
            auto mat2_ = checked_tensor_unwrap(mat2,"mat2",6, false, Backend::CPU, ScalarType::Short);
            THShortTensor_addmm(self_, beta_, self_, alpha_, mat1_, mat2_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_addmm_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_addmv_out(Tensor & result, const Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto beta_ = beta.toByte();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Byte);
            auto alpha_ = alpha.toByte();
            auto mat_ = checked_tensor_unwrap(mat,"mat",4, false, Backend::CPU, ScalarType::Byte);
            auto vec_ = checked_tensor_unwrap(vec,"vec",5, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_addmv(result_, beta_, self_, alpha_, mat_, vec_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat_->dim() == 0 && vec_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            auto beta_ = beta.toChar();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Char);
            auto alpha_ = alpha.toChar();
            auto mat_ = checked_tensor_unwrap(mat,"mat",4, false, Backend::CPU, ScalarType::Char);
            auto vec_ = checked_tensor_unwrap(vec,"vec",5, false, Backend::CPU, ScalarType::Char);
            THCharTensor_addmv(result_, beta_, self_, alpha_, mat_, vec_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat_->dim() == 0 && vec_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto beta_ = beta.toDouble();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto alpha_ = alpha.toDouble();
            auto mat_ = checked_tensor_unwrap(mat,"mat",4, false, Backend::CPU, ScalarType::Double);
            auto vec_ = checked_tensor_unwrap(vec,"vec",5, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_addmv(result_, beta_, self_, alpha_, mat_, vec_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat_->dim() == 0 && vec_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto beta_ = beta.toFloat();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto alpha_ = alpha.toFloat();
            auto mat_ = checked_tensor_unwrap(mat,"mat",4, false, Backend::CPU, ScalarType::Float);
            auto vec_ = checked_tensor_unwrap(vec,"vec",5, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_addmv(result_, beta_, self_, alpha_, mat_, vec_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat_->dim() == 0 && vec_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            auto beta_ = beta.toInt();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Int);
            auto alpha_ = alpha.toInt();
            auto mat_ = checked_tensor_unwrap(mat,"mat",4, false, Backend::CPU, ScalarType::Int);
            auto vec_ = checked_tensor_unwrap(vec,"vec",5, false, Backend::CPU, ScalarType::Int);
            THIntTensor_addmv(result_, beta_, self_, alpha_, mat_, vec_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat_->dim() == 0 && vec_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto beta_ = beta.toLong();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Long);
            auto alpha_ = alpha.toLong();
            auto mat_ = checked_tensor_unwrap(mat,"mat",4, false, Backend::CPU, ScalarType::Long);
            auto vec_ = checked_tensor_unwrap(vec,"vec",5, false, Backend::CPU, ScalarType::Long);
            THLongTensor_addmv(result_, beta_, self_, alpha_, mat_, vec_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat_->dim() == 0 && vec_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            auto beta_ = beta.toShort();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Short);
            auto alpha_ = alpha.toShort();
            auto mat_ = checked_tensor_unwrap(mat,"mat",4, false, Backend::CPU, ScalarType::Short);
            auto vec_ = checked_tensor_unwrap(vec,"vec",5, false, Backend::CPU, ScalarType::Short);
            THShortTensor_addmv(result_, beta_, self_, alpha_, mat_, vec_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat_->dim() == 0 && vec_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_addmv_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::s__th_addmv(const Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto beta_ = beta.toByte();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Byte);
            auto alpha_ = alpha.toByte();
            auto mat_ = checked_tensor_unwrap(mat,"mat",4, false, Backend::CPU, ScalarType::Byte);
            auto vec_ = checked_tensor_unwrap(vec,"vec",5, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_addmv(result_, beta_, self_, alpha_, mat_, vec_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat_->dim() == 0 && vec_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto beta_ = beta.toChar();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Char);
            auto alpha_ = alpha.toChar();
            auto mat_ = checked_tensor_unwrap(mat,"mat",4, false, Backend::CPU, ScalarType::Char);
            auto vec_ = checked_tensor_unwrap(vec,"vec",5, false, Backend::CPU, ScalarType::Char);
            THCharTensor_addmv(result_, beta_, self_, alpha_, mat_, vec_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat_->dim() == 0 && vec_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto beta_ = beta.toDouble();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto alpha_ = alpha.toDouble();
            auto mat_ = checked_tensor_unwrap(mat,"mat",4, false, Backend::CPU, ScalarType::Double);
            auto vec_ = checked_tensor_unwrap(vec,"vec",5, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_addmv(result_, beta_, self_, alpha_, mat_, vec_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat_->dim() == 0 && vec_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto beta_ = beta.toFloat();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto alpha_ = alpha.toFloat();
            auto mat_ = checked_tensor_unwrap(mat,"mat",4, false, Backend::CPU, ScalarType::Float);
            auto vec_ = checked_tensor_unwrap(vec,"vec",5, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_addmv(result_, beta_, self_, alpha_, mat_, vec_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat_->dim() == 0 && vec_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto beta_ = beta.toInt();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Int);
            auto alpha_ = alpha.toInt();
            auto mat_ = checked_tensor_unwrap(mat,"mat",4, false, Backend::CPU, ScalarType::Int);
            auto vec_ = checked_tensor_unwrap(vec,"vec",5, false, Backend::CPU, ScalarType::Int);
            THIntTensor_addmv(result_, beta_, self_, alpha_, mat_, vec_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat_->dim() == 0 && vec_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto beta_ = beta.toLong();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Long);
            auto alpha_ = alpha.toLong();
            auto mat_ = checked_tensor_unwrap(mat,"mat",4, false, Backend::CPU, ScalarType::Long);
            auto vec_ = checked_tensor_unwrap(vec,"vec",5, false, Backend::CPU, ScalarType::Long);
            THLongTensor_addmv(result_, beta_, self_, alpha_, mat_, vec_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat_->dim() == 0 && vec_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto beta_ = beta.toShort();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Short);
            auto alpha_ = alpha.toShort();
            auto mat_ = checked_tensor_unwrap(mat,"mat",4, false, Backend::CPU, ScalarType::Short);
            auto vec_ = checked_tensor_unwrap(vec,"vec",5, false, Backend::CPU, ScalarType::Short);
            THShortTensor_addmv(result_, beta_, self_, alpha_, mat_, vec_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat_->dim() == 0 && vec_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_addmv not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_addmv_(Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto beta_ = beta.toByte();
            auto alpha_ = alpha.toByte();
            auto mat_ = checked_tensor_unwrap(mat,"mat",5, false, Backend::CPU, ScalarType::Byte);
            auto vec_ = checked_tensor_unwrap(vec,"vec",6, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_addmv(self_, beta_, self_, alpha_, mat_, vec_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto beta_ = beta.toChar();
            auto alpha_ = alpha.toChar();
            auto mat_ = checked_tensor_unwrap(mat,"mat",5, false, Backend::CPU, ScalarType::Char);
            auto vec_ = checked_tensor_unwrap(vec,"vec",6, false, Backend::CPU, ScalarType::Char);
            THCharTensor_addmv(self_, beta_, self_, alpha_, mat_, vec_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto beta_ = beta.toDouble();
            auto alpha_ = alpha.toDouble();
            auto mat_ = checked_tensor_unwrap(mat,"mat",5, false, Backend::CPU, ScalarType::Double);
            auto vec_ = checked_tensor_unwrap(vec,"vec",6, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_addmv(self_, beta_, self_, alpha_, mat_, vec_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto beta_ = beta.toFloat();
            auto alpha_ = alpha.toFloat();
            auto mat_ = checked_tensor_unwrap(mat,"mat",5, false, Backend::CPU, ScalarType::Float);
            auto vec_ = checked_tensor_unwrap(vec,"vec",6, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_addmv(self_, beta_, self_, alpha_, mat_, vec_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto beta_ = beta.toInt();
            auto alpha_ = alpha.toInt();
            auto mat_ = checked_tensor_unwrap(mat,"mat",5, false, Backend::CPU, ScalarType::Int);
            auto vec_ = checked_tensor_unwrap(vec,"vec",6, false, Backend::CPU, ScalarType::Int);
            THIntTensor_addmv(self_, beta_, self_, alpha_, mat_, vec_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto beta_ = beta.toLong();
            auto alpha_ = alpha.toLong();
            auto mat_ = checked_tensor_unwrap(mat,"mat",5, false, Backend::CPU, ScalarType::Long);
            auto vec_ = checked_tensor_unwrap(vec,"vec",6, false, Backend::CPU, ScalarType::Long);
            THLongTensor_addmv(self_, beta_, self_, alpha_, mat_, vec_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto beta_ = beta.toShort();
            auto alpha_ = alpha.toShort();
            auto mat_ = checked_tensor_unwrap(mat,"mat",5, false, Backend::CPU, ScalarType::Short);
            auto vec_ = checked_tensor_unwrap(vec,"vec",6, false, Backend::CPU, ScalarType::Short);
            THShortTensor_addmv(self_, beta_, self_, alpha_, mat_, vec_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_addmv_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_addr_out(Tensor & result, const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto beta_ = beta.toByte();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Byte);
            auto alpha_ = alpha.toByte();
            auto vec1_ = checked_tensor_unwrap(vec1,"vec1",4, false, Backend::CPU, ScalarType::Byte);
            auto vec2_ = checked_tensor_unwrap(vec2,"vec2",5, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_addr(result_, beta_, self_, alpha_, vec1_, vec2_);
            result_->maybe_zero_dim(self_->dim() == 0 && vec1_->dim() == 0 && vec2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            auto beta_ = beta.toChar();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Char);
            auto alpha_ = alpha.toChar();
            auto vec1_ = checked_tensor_unwrap(vec1,"vec1",4, false, Backend::CPU, ScalarType::Char);
            auto vec2_ = checked_tensor_unwrap(vec2,"vec2",5, false, Backend::CPU, ScalarType::Char);
            THCharTensor_addr(result_, beta_, self_, alpha_, vec1_, vec2_);
            result_->maybe_zero_dim(self_->dim() == 0 && vec1_->dim() == 0 && vec2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto beta_ = beta.toDouble();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto alpha_ = alpha.toDouble();
            auto vec1_ = checked_tensor_unwrap(vec1,"vec1",4, false, Backend::CPU, ScalarType::Double);
            auto vec2_ = checked_tensor_unwrap(vec2,"vec2",5, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_addr(result_, beta_, self_, alpha_, vec1_, vec2_);
            result_->maybe_zero_dim(self_->dim() == 0 && vec1_->dim() == 0 && vec2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto beta_ = beta.toFloat();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto alpha_ = alpha.toFloat();
            auto vec1_ = checked_tensor_unwrap(vec1,"vec1",4, false, Backend::CPU, ScalarType::Float);
            auto vec2_ = checked_tensor_unwrap(vec2,"vec2",5, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_addr(result_, beta_, self_, alpha_, vec1_, vec2_);
            result_->maybe_zero_dim(self_->dim() == 0 && vec1_->dim() == 0 && vec2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            auto beta_ = beta.toInt();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Int);
            auto alpha_ = alpha.toInt();
            auto vec1_ = checked_tensor_unwrap(vec1,"vec1",4, false, Backend::CPU, ScalarType::Int);
            auto vec2_ = checked_tensor_unwrap(vec2,"vec2",5, false, Backend::CPU, ScalarType::Int);
            THIntTensor_addr(result_, beta_, self_, alpha_, vec1_, vec2_);
            result_->maybe_zero_dim(self_->dim() == 0 && vec1_->dim() == 0 && vec2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto beta_ = beta.toLong();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Long);
            auto alpha_ = alpha.toLong();
            auto vec1_ = checked_tensor_unwrap(vec1,"vec1",4, false, Backend::CPU, ScalarType::Long);
            auto vec2_ = checked_tensor_unwrap(vec2,"vec2",5, false, Backend::CPU, ScalarType::Long);
            THLongTensor_addr(result_, beta_, self_, alpha_, vec1_, vec2_);
            result_->maybe_zero_dim(self_->dim() == 0 && vec1_->dim() == 0 && vec2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            auto beta_ = beta.toShort();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Short);
            auto alpha_ = alpha.toShort();
            auto vec1_ = checked_tensor_unwrap(vec1,"vec1",4, false, Backend::CPU, ScalarType::Short);
            auto vec2_ = checked_tensor_unwrap(vec2,"vec2",5, false, Backend::CPU, ScalarType::Short);
            THShortTensor_addr(result_, beta_, self_, alpha_, vec1_, vec2_);
            result_->maybe_zero_dim(self_->dim() == 0 && vec1_->dim() == 0 && vec2_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_addr_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::s__th_addr(const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto beta_ = beta.toByte();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Byte);
            auto alpha_ = alpha.toByte();
            auto vec1_ = checked_tensor_unwrap(vec1,"vec1",4, false, Backend::CPU, ScalarType::Byte);
            auto vec2_ = checked_tensor_unwrap(vec2,"vec2",5, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_addr(result_, beta_, self_, alpha_, vec1_, vec2_);
            result_->maybe_zero_dim(self_->dim() == 0 && vec1_->dim() == 0 && vec2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto beta_ = beta.toChar();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Char);
            auto alpha_ = alpha.toChar();
            auto vec1_ = checked_tensor_unwrap(vec1,"vec1",4, false, Backend::CPU, ScalarType::Char);
            auto vec2_ = checked_tensor_unwrap(vec2,"vec2",5, false, Backend::CPU, ScalarType::Char);
            THCharTensor_addr(result_, beta_, self_, alpha_, vec1_, vec2_);
            result_->maybe_zero_dim(self_->dim() == 0 && vec1_->dim() == 0 && vec2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto beta_ = beta.toDouble();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto alpha_ = alpha.toDouble();
            auto vec1_ = checked_tensor_unwrap(vec1,"vec1",4, false, Backend::CPU, ScalarType::Double);
            auto vec2_ = checked_tensor_unwrap(vec2,"vec2",5, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_addr(result_, beta_, self_, alpha_, vec1_, vec2_);
            result_->maybe_zero_dim(self_->dim() == 0 && vec1_->dim() == 0 && vec2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto beta_ = beta.toFloat();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto alpha_ = alpha.toFloat();
            auto vec1_ = checked_tensor_unwrap(vec1,"vec1",4, false, Backend::CPU, ScalarType::Float);
            auto vec2_ = checked_tensor_unwrap(vec2,"vec2",5, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_addr(result_, beta_, self_, alpha_, vec1_, vec2_);
            result_->maybe_zero_dim(self_->dim() == 0 && vec1_->dim() == 0 && vec2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto beta_ = beta.toInt();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Int);
            auto alpha_ = alpha.toInt();
            auto vec1_ = checked_tensor_unwrap(vec1,"vec1",4, false, Backend::CPU, ScalarType::Int);
            auto vec2_ = checked_tensor_unwrap(vec2,"vec2",5, false, Backend::CPU, ScalarType::Int);
            THIntTensor_addr(result_, beta_, self_, alpha_, vec1_, vec2_);
            result_->maybe_zero_dim(self_->dim() == 0 && vec1_->dim() == 0 && vec2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto beta_ = beta.toLong();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Long);
            auto alpha_ = alpha.toLong();
            auto vec1_ = checked_tensor_unwrap(vec1,"vec1",4, false, Backend::CPU, ScalarType::Long);
            auto vec2_ = checked_tensor_unwrap(vec2,"vec2",5, false, Backend::CPU, ScalarType::Long);
            THLongTensor_addr(result_, beta_, self_, alpha_, vec1_, vec2_);
            result_->maybe_zero_dim(self_->dim() == 0 && vec1_->dim() == 0 && vec2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto beta_ = beta.toShort();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Short);
            auto alpha_ = alpha.toShort();
            auto vec1_ = checked_tensor_unwrap(vec1,"vec1",4, false, Backend::CPU, ScalarType::Short);
            auto vec2_ = checked_tensor_unwrap(vec2,"vec2",5, false, Backend::CPU, ScalarType::Short);
            THShortTensor_addr(result_, beta_, self_, alpha_, vec1_, vec2_);
            result_->maybe_zero_dim(self_->dim() == 0 && vec1_->dim() == 0 && vec2_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_addr not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_addr_(Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto beta_ = beta.toByte();
            auto alpha_ = alpha.toByte();
            auto vec1_ = checked_tensor_unwrap(vec1,"vec1",5, false, Backend::CPU, ScalarType::Byte);
            auto vec2_ = checked_tensor_unwrap(vec2,"vec2",6, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_addr(self_, beta_, self_, alpha_, vec1_, vec2_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto beta_ = beta.toChar();
            auto alpha_ = alpha.toChar();
            auto vec1_ = checked_tensor_unwrap(vec1,"vec1",5, false, Backend::CPU, ScalarType::Char);
            auto vec2_ = checked_tensor_unwrap(vec2,"vec2",6, false, Backend::CPU, ScalarType::Char);
            THCharTensor_addr(self_, beta_, self_, alpha_, vec1_, vec2_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto beta_ = beta.toDouble();
            auto alpha_ = alpha.toDouble();
            auto vec1_ = checked_tensor_unwrap(vec1,"vec1",5, false, Backend::CPU, ScalarType::Double);
            auto vec2_ = checked_tensor_unwrap(vec2,"vec2",6, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_addr(self_, beta_, self_, alpha_, vec1_, vec2_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto beta_ = beta.toFloat();
            auto alpha_ = alpha.toFloat();
            auto vec1_ = checked_tensor_unwrap(vec1,"vec1",5, false, Backend::CPU, ScalarType::Float);
            auto vec2_ = checked_tensor_unwrap(vec2,"vec2",6, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_addr(self_, beta_, self_, alpha_, vec1_, vec2_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto beta_ = beta.toInt();
            auto alpha_ = alpha.toInt();
            auto vec1_ = checked_tensor_unwrap(vec1,"vec1",5, false, Backend::CPU, ScalarType::Int);
            auto vec2_ = checked_tensor_unwrap(vec2,"vec2",6, false, Backend::CPU, ScalarType::Int);
            THIntTensor_addr(self_, beta_, self_, alpha_, vec1_, vec2_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto beta_ = beta.toLong();
            auto alpha_ = alpha.toLong();
            auto vec1_ = checked_tensor_unwrap(vec1,"vec1",5, false, Backend::CPU, ScalarType::Long);
            auto vec2_ = checked_tensor_unwrap(vec2,"vec2",6, false, Backend::CPU, ScalarType::Long);
            THLongTensor_addr(self_, beta_, self_, alpha_, vec1_, vec2_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto beta_ = beta.toShort();
            auto alpha_ = alpha.toShort();
            auto vec1_ = checked_tensor_unwrap(vec1,"vec1",5, false, Backend::CPU, ScalarType::Short);
            auto vec2_ = checked_tensor_unwrap(vec2,"vec2",6, false, Backend::CPU, ScalarType::Short);
            THShortTensor_addr(self_, beta_, self_, alpha_, vec1_, vec2_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_addr_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_ger_out(Tensor & result, const Tensor & self, const Tensor & vec2) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            result.resize_({ self.dim() == 0 ? 1 : self.size(0),vec2.dim() == 0 ? 1 : vec2.size(0) });
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto vec2_ = checked_tensor_unwrap(vec2,"vec2",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_addr(result_, uint8_t(0), result_, uint8_t(1), self_, vec2_);
            result_->maybe_zero_dim(false);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            result.resize_({ self.dim() == 0 ? 1 : self.size(0),vec2.dim() == 0 ? 1 : vec2.size(0) });
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto vec2_ = checked_tensor_unwrap(vec2,"vec2",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_addr(result_, int8_t(0), result_, int8_t(1), self_, vec2_);
            result_->maybe_zero_dim(false);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            result.resize_({ self.dim() == 0 ? 1 : self.size(0),vec2.dim() == 0 ? 1 : vec2.size(0) });
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto vec2_ = checked_tensor_unwrap(vec2,"vec2",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_addr(result_, double(0), result_, double(1), self_, vec2_);
            result_->maybe_zero_dim(false);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            result.resize_({ self.dim() == 0 ? 1 : self.size(0),vec2.dim() == 0 ? 1 : vec2.size(0) });
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto vec2_ = checked_tensor_unwrap(vec2,"vec2",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_addr(result_, float(0), result_, float(1), self_, vec2_);
            result_->maybe_zero_dim(false);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            result.resize_({ self.dim() == 0 ? 1 : self.size(0),vec2.dim() == 0 ? 1 : vec2.size(0) });
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto vec2_ = checked_tensor_unwrap(vec2,"vec2",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_addr(result_, int(0), result_, int(1), self_, vec2_);
            result_->maybe_zero_dim(false);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            result.resize_({ self.dim() == 0 ? 1 : self.size(0),vec2.dim() == 0 ? 1 : vec2.size(0) });
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto vec2_ = checked_tensor_unwrap(vec2,"vec2",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_addr(result_, int64_t(0), result_, int64_t(1), self_, vec2_);
            result_->maybe_zero_dim(false);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            result.resize_({ self.dim() == 0 ? 1 : self.size(0),vec2.dim() == 0 ? 1 : vec2.size(0) });
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto vec2_ = checked_tensor_unwrap(vec2,"vec2",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_addr(result_, int16_t(0), result_, int16_t(1), self_, vec2_);
            result_->maybe_zero_dim(false);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_ger_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_ger(const Tensor & self, const Tensor & vec2) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            result.resize_({ self.dim() == 0 ? 1 : self.size(0),vec2.dim() == 0 ? 1 : vec2.size(0) });
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto vec2_ = checked_tensor_unwrap(vec2,"vec2",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_addr(result_, uint8_t(0), result_, uint8_t(1), self_, vec2_);
            result_->maybe_zero_dim(false);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            result.resize_({ self.dim() == 0 ? 1 : self.size(0),vec2.dim() == 0 ? 1 : vec2.size(0) });
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto vec2_ = checked_tensor_unwrap(vec2,"vec2",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_addr(result_, int8_t(0), result_, int8_t(1), self_, vec2_);
            result_->maybe_zero_dim(false);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            result.resize_({ self.dim() == 0 ? 1 : self.size(0),vec2.dim() == 0 ? 1 : vec2.size(0) });
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto vec2_ = checked_tensor_unwrap(vec2,"vec2",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_addr(result_, double(0), result_, double(1), self_, vec2_);
            result_->maybe_zero_dim(false);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            result.resize_({ self.dim() == 0 ? 1 : self.size(0),vec2.dim() == 0 ? 1 : vec2.size(0) });
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto vec2_ = checked_tensor_unwrap(vec2,"vec2",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_addr(result_, float(0), result_, float(1), self_, vec2_);
            result_->maybe_zero_dim(false);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            result.resize_({ self.dim() == 0 ? 1 : self.size(0),vec2.dim() == 0 ? 1 : vec2.size(0) });
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto vec2_ = checked_tensor_unwrap(vec2,"vec2",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_addr(result_, int(0), result_, int(1), self_, vec2_);
            result_->maybe_zero_dim(false);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            result.resize_({ self.dim() == 0 ? 1 : self.size(0),vec2.dim() == 0 ? 1 : vec2.size(0) });
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto vec2_ = checked_tensor_unwrap(vec2,"vec2",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_addr(result_, int64_t(0), result_, int64_t(1), self_, vec2_);
            result_->maybe_zero_dim(false);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            result.resize_({ self.dim() == 0 ? 1 : self.size(0),vec2.dim() == 0 ? 1 : vec2.size(0) });
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto vec2_ = checked_tensor_unwrap(vec2,"vec2",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_addr(result_, int16_t(0), result_, int16_t(1), self_, vec2_);
            result_->maybe_zero_dim(false);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_ger not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_mv_out(Tensor & result, const Tensor & self, const Tensor & vec) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            result.resize_({ self.size(0) });
            result.zero_();
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto vec_ = checked_tensor_unwrap(vec,"vec",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_addmv(result_, uint8_t(0), result_, uint8_t(1), self_, vec_);
            result_->maybe_zero_dim(self_->dim() == 0 && vec_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            result.resize_({ self.size(0) });
            result.zero_();
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto vec_ = checked_tensor_unwrap(vec,"vec",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_addmv(result_, int8_t(0), result_, int8_t(1), self_, vec_);
            result_->maybe_zero_dim(self_->dim() == 0 && vec_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            result.resize_({ self.size(0) });
            result.zero_();
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto vec_ = checked_tensor_unwrap(vec,"vec",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_addmv(result_, double(0), result_, double(1), self_, vec_);
            result_->maybe_zero_dim(self_->dim() == 0 && vec_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            result.resize_({ self.size(0) });
            result.zero_();
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto vec_ = checked_tensor_unwrap(vec,"vec",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_addmv(result_, float(0), result_, float(1), self_, vec_);
            result_->maybe_zero_dim(self_->dim() == 0 && vec_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            result.resize_({ self.size(0) });
            result.zero_();
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto vec_ = checked_tensor_unwrap(vec,"vec",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_addmv(result_, int(0), result_, int(1), self_, vec_);
            result_->maybe_zero_dim(self_->dim() == 0 && vec_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            result.resize_({ self.size(0) });
            result.zero_();
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto vec_ = checked_tensor_unwrap(vec,"vec",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_addmv(result_, int64_t(0), result_, int64_t(1), self_, vec_);
            result_->maybe_zero_dim(self_->dim() == 0 && vec_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            result.resize_({ self.size(0) });
            result.zero_();
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto vec_ = checked_tensor_unwrap(vec,"vec",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_addmv(result_, int16_t(0), result_, int16_t(1), self_, vec_);
            result_->maybe_zero_dim(self_->dim() == 0 && vec_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_mv_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_mv(const Tensor & self, const Tensor & vec) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            result.resize_({ self.size(0) });
            result.zero_();
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto vec_ = checked_tensor_unwrap(vec,"vec",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_addmv(result_, uint8_t(0), result_, uint8_t(1), self_, vec_);
            result_->maybe_zero_dim(self_->dim() == 0 && vec_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            result.resize_({ self.size(0) });
            result.zero_();
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto vec_ = checked_tensor_unwrap(vec,"vec",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_addmv(result_, int8_t(0), result_, int8_t(1), self_, vec_);
            result_->maybe_zero_dim(self_->dim() == 0 && vec_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            result.resize_({ self.size(0) });
            result.zero_();
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto vec_ = checked_tensor_unwrap(vec,"vec",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_addmv(result_, double(0), result_, double(1), self_, vec_);
            result_->maybe_zero_dim(self_->dim() == 0 && vec_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            result.resize_({ self.size(0) });
            result.zero_();
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto vec_ = checked_tensor_unwrap(vec,"vec",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_addmv(result_, float(0), result_, float(1), self_, vec_);
            result_->maybe_zero_dim(self_->dim() == 0 && vec_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            result.resize_({ self.size(0) });
            result.zero_();
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto vec_ = checked_tensor_unwrap(vec,"vec",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_addmv(result_, int(0), result_, int(1), self_, vec_);
            result_->maybe_zero_dim(self_->dim() == 0 && vec_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            result.resize_({ self.size(0) });
            result.zero_();
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto vec_ = checked_tensor_unwrap(vec,"vec",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_addmv(result_, int64_t(0), result_, int64_t(1), self_, vec_);
            result_->maybe_zero_dim(self_->dim() == 0 && vec_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            result.resize_({ self.size(0) });
            result.zero_();
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto vec_ = checked_tensor_unwrap(vec,"vec",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_addmv(result_, int16_t(0), result_, int16_t(1), self_, vec_);
            result_->maybe_zero_dim(self_->dim() == 0 && vec_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_mv not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_mm_out(Tensor & result, const Tensor & self, const Tensor & mat2) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            result.resize_({ self.size(0),mat2.size(1) });
            result.zero_();
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto mat2_ = checked_tensor_unwrap(mat2,"mat2",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_addmm(result_, uint8_t(0), result_, uint8_t(1), self_, mat2_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            result.resize_({ self.size(0),mat2.size(1) });
            result.zero_();
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto mat2_ = checked_tensor_unwrap(mat2,"mat2",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_addmm(result_, int8_t(0), result_, int8_t(1), self_, mat2_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            result.resize_({ self.size(0),mat2.size(1) });
            result.zero_();
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto mat2_ = checked_tensor_unwrap(mat2,"mat2",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_addmm(result_, double(0), result_, double(1), self_, mat2_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            result.resize_({ self.size(0),mat2.size(1) });
            result.zero_();
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto mat2_ = checked_tensor_unwrap(mat2,"mat2",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_addmm(result_, float(0), result_, float(1), self_, mat2_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            result.resize_({ self.size(0),mat2.size(1) });
            result.zero_();
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto mat2_ = checked_tensor_unwrap(mat2,"mat2",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_addmm(result_, int(0), result_, int(1), self_, mat2_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            result.resize_({ self.size(0),mat2.size(1) });
            result.zero_();
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto mat2_ = checked_tensor_unwrap(mat2,"mat2",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_addmm(result_, int64_t(0), result_, int64_t(1), self_, mat2_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            result.resize_({ self.size(0),mat2.size(1) });
            result.zero_();
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto mat2_ = checked_tensor_unwrap(mat2,"mat2",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_addmm(result_, int16_t(0), result_, int16_t(1), self_, mat2_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat2_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_mm_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_mm(const Tensor & self, const Tensor & mat2) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            result.resize_({ self.size(0),mat2.size(1) });
            result.zero_();
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto mat2_ = checked_tensor_unwrap(mat2,"mat2",2, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_addmm(result_, uint8_t(0), result_, uint8_t(1), self_, mat2_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            result.resize_({ self.size(0),mat2.size(1) });
            result.zero_();
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto mat2_ = checked_tensor_unwrap(mat2,"mat2",2, false, Backend::CPU, ScalarType::Char);
            THCharTensor_addmm(result_, int8_t(0), result_, int8_t(1), self_, mat2_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            result.resize_({ self.size(0),mat2.size(1) });
            result.zero_();
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto mat2_ = checked_tensor_unwrap(mat2,"mat2",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_addmm(result_, double(0), result_, double(1), self_, mat2_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            result.resize_({ self.size(0),mat2.size(1) });
            result.zero_();
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto mat2_ = checked_tensor_unwrap(mat2,"mat2",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_addmm(result_, float(0), result_, float(1), self_, mat2_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            result.resize_({ self.size(0),mat2.size(1) });
            result.zero_();
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto mat2_ = checked_tensor_unwrap(mat2,"mat2",2, false, Backend::CPU, ScalarType::Int);
            THIntTensor_addmm(result_, int(0), result_, int(1), self_, mat2_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            result.resize_({ self.size(0),mat2.size(1) });
            result.zero_();
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto mat2_ = checked_tensor_unwrap(mat2,"mat2",2, false, Backend::CPU, ScalarType::Long);
            THLongTensor_addmm(result_, int64_t(0), result_, int64_t(1), self_, mat2_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            result.resize_({ self.size(0),mat2.size(1) });
            result.zero_();
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto mat2_ = checked_tensor_unwrap(mat2,"mat2",2, false, Backend::CPU, ScalarType::Short);
            THShortTensor_addmm(result_, int16_t(0), result_, int16_t(1), self_, mat2_);
            result_->maybe_zero_dim(self_->dim() == 0 && mat2_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_mm not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_addbmm_out(Tensor & result, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto beta_ = beta.toByte();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Byte);
            auto alpha_ = alpha.toByte();
            auto batch1_ = checked_tensor_unwrap(batch1,"batch1",4, false, Backend::CPU, ScalarType::Byte);
            auto batch2_ = checked_tensor_unwrap(batch2,"batch2",5, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_addbmm(result_, beta_, self_, alpha_, batch1_, batch2_);
            result_->maybe_zero_dim(self_->dim() == 0 && batch1_->dim() == 0 && batch2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            auto beta_ = beta.toChar();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Char);
            auto alpha_ = alpha.toChar();
            auto batch1_ = checked_tensor_unwrap(batch1,"batch1",4, false, Backend::CPU, ScalarType::Char);
            auto batch2_ = checked_tensor_unwrap(batch2,"batch2",5, false, Backend::CPU, ScalarType::Char);
            THCharTensor_addbmm(result_, beta_, self_, alpha_, batch1_, batch2_);
            result_->maybe_zero_dim(self_->dim() == 0 && batch1_->dim() == 0 && batch2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto beta_ = beta.toDouble();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto alpha_ = alpha.toDouble();
            auto batch1_ = checked_tensor_unwrap(batch1,"batch1",4, false, Backend::CPU, ScalarType::Double);
            auto batch2_ = checked_tensor_unwrap(batch2,"batch2",5, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_addbmm(result_, beta_, self_, alpha_, batch1_, batch2_);
            result_->maybe_zero_dim(self_->dim() == 0 && batch1_->dim() == 0 && batch2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto beta_ = beta.toFloat();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto alpha_ = alpha.toFloat();
            auto batch1_ = checked_tensor_unwrap(batch1,"batch1",4, false, Backend::CPU, ScalarType::Float);
            auto batch2_ = checked_tensor_unwrap(batch2,"batch2",5, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_addbmm(result_, beta_, self_, alpha_, batch1_, batch2_);
            result_->maybe_zero_dim(self_->dim() == 0 && batch1_->dim() == 0 && batch2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            auto beta_ = beta.toInt();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Int);
            auto alpha_ = alpha.toInt();
            auto batch1_ = checked_tensor_unwrap(batch1,"batch1",4, false, Backend::CPU, ScalarType::Int);
            auto batch2_ = checked_tensor_unwrap(batch2,"batch2",5, false, Backend::CPU, ScalarType::Int);
            THIntTensor_addbmm(result_, beta_, self_, alpha_, batch1_, batch2_);
            result_->maybe_zero_dim(self_->dim() == 0 && batch1_->dim() == 0 && batch2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto beta_ = beta.toLong();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Long);
            auto alpha_ = alpha.toLong();
            auto batch1_ = checked_tensor_unwrap(batch1,"batch1",4, false, Backend::CPU, ScalarType::Long);
            auto batch2_ = checked_tensor_unwrap(batch2,"batch2",5, false, Backend::CPU, ScalarType::Long);
            THLongTensor_addbmm(result_, beta_, self_, alpha_, batch1_, batch2_);
            result_->maybe_zero_dim(self_->dim() == 0 && batch1_->dim() == 0 && batch2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            auto beta_ = beta.toShort();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Short);
            auto alpha_ = alpha.toShort();
            auto batch1_ = checked_tensor_unwrap(batch1,"batch1",4, false, Backend::CPU, ScalarType::Short);
            auto batch2_ = checked_tensor_unwrap(batch2,"batch2",5, false, Backend::CPU, ScalarType::Short);
            THShortTensor_addbmm(result_, beta_, self_, alpha_, batch1_, batch2_);
            result_->maybe_zero_dim(self_->dim() == 0 && batch1_->dim() == 0 && batch2_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_addbmm_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::s__th_addbmm(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto beta_ = beta.toByte();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Byte);
            auto alpha_ = alpha.toByte();
            auto batch1_ = checked_tensor_unwrap(batch1,"batch1",4, false, Backend::CPU, ScalarType::Byte);
            auto batch2_ = checked_tensor_unwrap(batch2,"batch2",5, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_addbmm(result_, beta_, self_, alpha_, batch1_, batch2_);
            result_->maybe_zero_dim(self_->dim() == 0 && batch1_->dim() == 0 && batch2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto beta_ = beta.toChar();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Char);
            auto alpha_ = alpha.toChar();
            auto batch1_ = checked_tensor_unwrap(batch1,"batch1",4, false, Backend::CPU, ScalarType::Char);
            auto batch2_ = checked_tensor_unwrap(batch2,"batch2",5, false, Backend::CPU, ScalarType::Char);
            THCharTensor_addbmm(result_, beta_, self_, alpha_, batch1_, batch2_);
            result_->maybe_zero_dim(self_->dim() == 0 && batch1_->dim() == 0 && batch2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto beta_ = beta.toDouble();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto alpha_ = alpha.toDouble();
            auto batch1_ = checked_tensor_unwrap(batch1,"batch1",4, false, Backend::CPU, ScalarType::Double);
            auto batch2_ = checked_tensor_unwrap(batch2,"batch2",5, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_addbmm(result_, beta_, self_, alpha_, batch1_, batch2_);
            result_->maybe_zero_dim(self_->dim() == 0 && batch1_->dim() == 0 && batch2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto beta_ = beta.toFloat();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto alpha_ = alpha.toFloat();
            auto batch1_ = checked_tensor_unwrap(batch1,"batch1",4, false, Backend::CPU, ScalarType::Float);
            auto batch2_ = checked_tensor_unwrap(batch2,"batch2",5, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_addbmm(result_, beta_, self_, alpha_, batch1_, batch2_);
            result_->maybe_zero_dim(self_->dim() == 0 && batch1_->dim() == 0 && batch2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto beta_ = beta.toInt();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Int);
            auto alpha_ = alpha.toInt();
            auto batch1_ = checked_tensor_unwrap(batch1,"batch1",4, false, Backend::CPU, ScalarType::Int);
            auto batch2_ = checked_tensor_unwrap(batch2,"batch2",5, false, Backend::CPU, ScalarType::Int);
            THIntTensor_addbmm(result_, beta_, self_, alpha_, batch1_, batch2_);
            result_->maybe_zero_dim(self_->dim() == 0 && batch1_->dim() == 0 && batch2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto beta_ = beta.toLong();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Long);
            auto alpha_ = alpha.toLong();
            auto batch1_ = checked_tensor_unwrap(batch1,"batch1",4, false, Backend::CPU, ScalarType::Long);
            auto batch2_ = checked_tensor_unwrap(batch2,"batch2",5, false, Backend::CPU, ScalarType::Long);
            THLongTensor_addbmm(result_, beta_, self_, alpha_, batch1_, batch2_);
            result_->maybe_zero_dim(self_->dim() == 0 && batch1_->dim() == 0 && batch2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto beta_ = beta.toShort();
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Short);
            auto alpha_ = alpha.toShort();
            auto batch1_ = checked_tensor_unwrap(batch1,"batch1",4, false, Backend::CPU, ScalarType::Short);
            auto batch2_ = checked_tensor_unwrap(batch2,"batch2",5, false, Backend::CPU, ScalarType::Short);
            THShortTensor_addbmm(result_, beta_, self_, alpha_, batch1_, batch2_);
            result_->maybe_zero_dim(self_->dim() == 0 && batch1_->dim() == 0 && batch2_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_addbmm not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_addbmm_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto beta_ = beta.toByte();
            auto alpha_ = alpha.toByte();
            auto batch1_ = checked_tensor_unwrap(batch1,"batch1",5, false, Backend::CPU, ScalarType::Byte);
            auto batch2_ = checked_tensor_unwrap(batch2,"batch2",6, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_addbmm(self_, beta_, self_, alpha_, batch1_, batch2_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto beta_ = beta.toChar();
            auto alpha_ = alpha.toChar();
            auto batch1_ = checked_tensor_unwrap(batch1,"batch1",5, false, Backend::CPU, ScalarType::Char);
            auto batch2_ = checked_tensor_unwrap(batch2,"batch2",6, false, Backend::CPU, ScalarType::Char);
            THCharTensor_addbmm(self_, beta_, self_, alpha_, batch1_, batch2_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto beta_ = beta.toDouble();
            auto alpha_ = alpha.toDouble();
            auto batch1_ = checked_tensor_unwrap(batch1,"batch1",5, false, Backend::CPU, ScalarType::Double);
            auto batch2_ = checked_tensor_unwrap(batch2,"batch2",6, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_addbmm(self_, beta_, self_, alpha_, batch1_, batch2_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto beta_ = beta.toFloat();
            auto alpha_ = alpha.toFloat();
            auto batch1_ = checked_tensor_unwrap(batch1,"batch1",5, false, Backend::CPU, ScalarType::Float);
            auto batch2_ = checked_tensor_unwrap(batch2,"batch2",6, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_addbmm(self_, beta_, self_, alpha_, batch1_, batch2_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto beta_ = beta.toInt();
            auto alpha_ = alpha.toInt();
            auto batch1_ = checked_tensor_unwrap(batch1,"batch1",5, false, Backend::CPU, ScalarType::Int);
            auto batch2_ = checked_tensor_unwrap(batch2,"batch2",6, false, Backend::CPU, ScalarType::Int);
            THIntTensor_addbmm(self_, beta_, self_, alpha_, batch1_, batch2_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto beta_ = beta.toLong();
            auto alpha_ = alpha.toLong();
            auto batch1_ = checked_tensor_unwrap(batch1,"batch1",5, false, Backend::CPU, ScalarType::Long);
            auto batch2_ = checked_tensor_unwrap(batch2,"batch2",6, false, Backend::CPU, ScalarType::Long);
            THLongTensor_addbmm(self_, beta_, self_, alpha_, batch1_, batch2_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto beta_ = beta.toShort();
            auto alpha_ = alpha.toShort();
            auto batch1_ = checked_tensor_unwrap(batch1,"batch1",5, false, Backend::CPU, ScalarType::Short);
            auto batch2_ = checked_tensor_unwrap(batch2,"batch2",6, false, Backend::CPU, ScalarType::Short);
            THShortTensor_addbmm(self_, beta_, self_, alpha_, batch1_, batch2_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_addbmm_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_addcmul_out(Tensor & result, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto value_ = value.toByte();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",3, false, Backend::CPU, ScalarType::Byte);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",4, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_addcmul(result_, self_, value_, tensor1_, tensor2_);
            result_->maybe_zero_dim(self_->dim() == 0 && tensor1_->dim() == 0 && tensor2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto value_ = value.toChar();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",3, false, Backend::CPU, ScalarType::Char);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",4, false, Backend::CPU, ScalarType::Char);
            THCharTensor_addcmul(result_, self_, value_, tensor1_, tensor2_);
            result_->maybe_zero_dim(self_->dim() == 0 && tensor1_->dim() == 0 && tensor2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto value_ = value.toDouble();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",3, false, Backend::CPU, ScalarType::Double);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",4, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_addcmul(result_, self_, value_, tensor1_, tensor2_);
            result_->maybe_zero_dim(self_->dim() == 0 && tensor1_->dim() == 0 && tensor2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto value_ = value.toFloat();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",3, false, Backend::CPU, ScalarType::Float);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",4, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_addcmul(result_, self_, value_, tensor1_, tensor2_);
            result_->maybe_zero_dim(self_->dim() == 0 && tensor1_->dim() == 0 && tensor2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto value_ = value.toInt();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",3, false, Backend::CPU, ScalarType::Int);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",4, false, Backend::CPU, ScalarType::Int);
            THIntTensor_addcmul(result_, self_, value_, tensor1_, tensor2_);
            result_->maybe_zero_dim(self_->dim() == 0 && tensor1_->dim() == 0 && tensor2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto value_ = value.toLong();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",3, false, Backend::CPU, ScalarType::Long);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",4, false, Backend::CPU, ScalarType::Long);
            THLongTensor_addcmul(result_, self_, value_, tensor1_, tensor2_);
            result_->maybe_zero_dim(self_->dim() == 0 && tensor1_->dim() == 0 && tensor2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto value_ = value.toShort();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",3, false, Backend::CPU, ScalarType::Short);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",4, false, Backend::CPU, ScalarType::Short);
            THShortTensor_addcmul(result_, self_, value_, tensor1_, tensor2_);
            result_->maybe_zero_dim(self_->dim() == 0 && tensor1_->dim() == 0 && tensor2_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_addcmul_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::s__th_addcmul(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto value_ = value.toByte();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",3, false, Backend::CPU, ScalarType::Byte);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",4, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_addcmul(result_, self_, value_, tensor1_, tensor2_);
            result_->maybe_zero_dim(self_->dim() == 0 && tensor1_->dim() == 0 && tensor2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto value_ = value.toChar();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",3, false, Backend::CPU, ScalarType::Char);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",4, false, Backend::CPU, ScalarType::Char);
            THCharTensor_addcmul(result_, self_, value_, tensor1_, tensor2_);
            result_->maybe_zero_dim(self_->dim() == 0 && tensor1_->dim() == 0 && tensor2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto value_ = value.toDouble();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",3, false, Backend::CPU, ScalarType::Double);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",4, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_addcmul(result_, self_, value_, tensor1_, tensor2_);
            result_->maybe_zero_dim(self_->dim() == 0 && tensor1_->dim() == 0 && tensor2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto value_ = value.toFloat();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",3, false, Backend::CPU, ScalarType::Float);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",4, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_addcmul(result_, self_, value_, tensor1_, tensor2_);
            result_->maybe_zero_dim(self_->dim() == 0 && tensor1_->dim() == 0 && tensor2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto value_ = value.toInt();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",3, false, Backend::CPU, ScalarType::Int);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",4, false, Backend::CPU, ScalarType::Int);
            THIntTensor_addcmul(result_, self_, value_, tensor1_, tensor2_);
            result_->maybe_zero_dim(self_->dim() == 0 && tensor1_->dim() == 0 && tensor2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto value_ = value.toLong();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",3, false, Backend::CPU, ScalarType::Long);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",4, false, Backend::CPU, ScalarType::Long);
            THLongTensor_addcmul(result_, self_, value_, tensor1_, tensor2_);
            result_->maybe_zero_dim(self_->dim() == 0 && tensor1_->dim() == 0 && tensor2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto value_ = value.toShort();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",3, false, Backend::CPU, ScalarType::Short);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",4, false, Backend::CPU, ScalarType::Short);
            THShortTensor_addcmul(result_, self_, value_, tensor1_, tensor2_);
            result_->maybe_zero_dim(self_->dim() == 0 && tensor1_->dim() == 0 && tensor2_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_addcmul not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_addcmul_(Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto value_ = value.toByte();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",4, false, Backend::CPU, ScalarType::Byte);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",5, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_addcmul(self_, self_, value_, tensor1_, tensor2_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto value_ = value.toChar();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",4, false, Backend::CPU, ScalarType::Char);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",5, false, Backend::CPU, ScalarType::Char);
            THCharTensor_addcmul(self_, self_, value_, tensor1_, tensor2_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto value_ = value.toDouble();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",4, false, Backend::CPU, ScalarType::Double);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",5, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_addcmul(self_, self_, value_, tensor1_, tensor2_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto value_ = value.toFloat();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",4, false, Backend::CPU, ScalarType::Float);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",5, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_addcmul(self_, self_, value_, tensor1_, tensor2_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto value_ = value.toInt();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",4, false, Backend::CPU, ScalarType::Int);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",5, false, Backend::CPU, ScalarType::Int);
            THIntTensor_addcmul(self_, self_, value_, tensor1_, tensor2_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto value_ = value.toLong();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",4, false, Backend::CPU, ScalarType::Long);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",5, false, Backend::CPU, ScalarType::Long);
            THLongTensor_addcmul(self_, self_, value_, tensor1_, tensor2_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto value_ = value.toShort();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",4, false, Backend::CPU, ScalarType::Short);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",5, false, Backend::CPU, ScalarType::Short);
            THShortTensor_addcmul(self_, self_, value_, tensor1_, tensor2_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_addcmul_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_addcdiv_out(Tensor & result, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Byte);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto value_ = value.toByte();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",3, false, Backend::CPU, ScalarType::Byte);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",4, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_addcdiv(result_, self_, value_, tensor1_, tensor2_);
            result_->maybe_zero_dim(self_->dim() == 0 && tensor1_->dim() == 0 && tensor2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Char);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto value_ = value.toChar();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",3, false, Backend::CPU, ScalarType::Char);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",4, false, Backend::CPU, ScalarType::Char);
            THCharTensor_addcdiv(result_, self_, value_, tensor1_, tensor2_);
            result_->maybe_zero_dim(self_->dim() == 0 && tensor1_->dim() == 0 && tensor2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto value_ = value.toDouble();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",3, false, Backend::CPU, ScalarType::Double);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",4, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_addcdiv(result_, self_, value_, tensor1_, tensor2_);
            result_->maybe_zero_dim(self_->dim() == 0 && tensor1_->dim() == 0 && tensor2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto value_ = value.toFloat();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",3, false, Backend::CPU, ScalarType::Float);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",4, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_addcdiv(result_, self_, value_, tensor1_, tensor2_);
            result_->maybe_zero_dim(self_->dim() == 0 && tensor1_->dim() == 0 && tensor2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Int);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto value_ = value.toInt();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",3, false, Backend::CPU, ScalarType::Int);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",4, false, Backend::CPU, ScalarType::Int);
            THIntTensor_addcdiv(result_, self_, value_, tensor1_, tensor2_);
            result_->maybe_zero_dim(self_->dim() == 0 && tensor1_->dim() == 0 && tensor2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto value_ = value.toLong();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",3, false, Backend::CPU, ScalarType::Long);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",4, false, Backend::CPU, ScalarType::Long);
            THLongTensor_addcdiv(result_, self_, value_, tensor1_, tensor2_);
            result_->maybe_zero_dim(self_->dim() == 0 && tensor1_->dim() == 0 && tensor2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Short);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto value_ = value.toShort();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",3, false, Backend::CPU, ScalarType::Short);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",4, false, Backend::CPU, ScalarType::Short);
            THShortTensor_addcdiv(result_, self_, value_, tensor1_, tensor2_);
            result_->maybe_zero_dim(self_->dim() == 0 && tensor1_->dim() == 0 && tensor2_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_addcdiv_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::s__th_addcdiv(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto value_ = value.toByte();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",3, false, Backend::CPU, ScalarType::Byte);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",4, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_addcdiv(result_, self_, value_, tensor1_, tensor2_);
            result_->maybe_zero_dim(self_->dim() == 0 && tensor1_->dim() == 0 && tensor2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Char: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto value_ = value.toChar();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",3, false, Backend::CPU, ScalarType::Char);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",4, false, Backend::CPU, ScalarType::Char);
            THCharTensor_addcdiv(result_, self_, value_, tensor1_, tensor2_);
            result_->maybe_zero_dim(self_->dim() == 0 && tensor1_->dim() == 0 && tensor2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto value_ = value.toDouble();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",3, false, Backend::CPU, ScalarType::Double);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",4, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_addcdiv(result_, self_, value_, tensor1_, tensor2_);
            result_->maybe_zero_dim(self_->dim() == 0 && tensor1_->dim() == 0 && tensor2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto value_ = value.toFloat();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",3, false, Backend::CPU, ScalarType::Float);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",4, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_addcdiv(result_, self_, value_, tensor1_, tensor2_);
            result_->maybe_zero_dim(self_->dim() == 0 && tensor1_->dim() == 0 && tensor2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Int: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto value_ = value.toInt();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",3, false, Backend::CPU, ScalarType::Int);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",4, false, Backend::CPU, ScalarType::Int);
            THIntTensor_addcdiv(result_, self_, value_, tensor1_, tensor2_);
            result_->maybe_zero_dim(self_->dim() == 0 && tensor1_->dim() == 0 && tensor2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Long: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto value_ = value.toLong();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",3, false, Backend::CPU, ScalarType::Long);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",4, false, Backend::CPU, ScalarType::Long);
            THLongTensor_addcdiv(result_, self_, value_, tensor1_, tensor2_);
            result_->maybe_zero_dim(self_->dim() == 0 && tensor1_->dim() == 0 && tensor2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Short: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto value_ = value.toShort();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",3, false, Backend::CPU, ScalarType::Short);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",4, false, Backend::CPU, ScalarType::Short);
            THShortTensor_addcdiv(result_, self_, value_, tensor1_, tensor2_);
            result_->maybe_zero_dim(self_->dim() == 0 && tensor1_->dim() == 0 && tensor2_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_addcdiv not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s__th_addcdiv_(Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto value_ = value.toByte();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",4, false, Backend::CPU, ScalarType::Byte);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",5, false, Backend::CPU, ScalarType::Byte);
            THByteTensor_addcdiv(self_, self_, value_, tensor1_, tensor2_);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto value_ = value.toChar();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",4, false, Backend::CPU, ScalarType::Char);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",5, false, Backend::CPU, ScalarType::Char);
            THCharTensor_addcdiv(self_, self_, value_, tensor1_, tensor2_);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto value_ = value.toDouble();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",4, false, Backend::CPU, ScalarType::Double);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",5, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_addcdiv(self_, self_, value_, tensor1_, tensor2_);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto value_ = value.toFloat();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",4, false, Backend::CPU, ScalarType::Float);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",5, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_addcdiv(self_, self_, value_, tensor1_, tensor2_);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto value_ = value.toInt();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",4, false, Backend::CPU, ScalarType::Int);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",5, false, Backend::CPU, ScalarType::Int);
            THIntTensor_addcdiv(self_, self_, value_, tensor1_, tensor2_);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto value_ = value.toLong();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",4, false, Backend::CPU, ScalarType::Long);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",5, false, Backend::CPU, ScalarType::Long);
            THLongTensor_addcdiv(self_, self_, value_, tensor1_, tensor2_);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto value_ = value.toShort();
            auto tensor1_ = checked_tensor_unwrap(tensor1,"tensor1",4, false, Backend::CPU, ScalarType::Short);
            auto tensor2_ = checked_tensor_unwrap(tensor2,"tensor2",5, false, Backend::CPU, ScalarType::Short);
            THShortTensor_addcdiv(self_, self_, value_, tensor1_, tensor2_);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_addcdiv_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor &,Tensor &> CPUType::_th_gels_out(Tensor & res1, Tensor & res2, const Tensor & self, const Tensor & A) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto res1_ = checked_tensor_unwrap(res1,"res1",0, false, Backend::CPU, ScalarType::Double);
            auto res2_ = checked_tensor_unwrap(res2,"res2",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto A_ = checked_tensor_unwrap(A,"A",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_gels(res1_, res2_, self_, A_);
            bool maybe_scalar = self_->dim() == 0 && A_->dim() == 0;
            res1_->maybe_zero_dim(maybe_scalar);
            res2_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(res1, res2);
            break;
        }
        case ScalarType::Float: {
            auto res1_ = checked_tensor_unwrap(res1,"res1",0, false, Backend::CPU, ScalarType::Float);
            auto res2_ = checked_tensor_unwrap(res2,"res2",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto A_ = checked_tensor_unwrap(A,"A",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_gels(res1_, res2_, self_, A_);
            bool maybe_scalar = self_->dim() == 0 && A_->dim() == 0;
            res1_->maybe_zero_dim(maybe_scalar);
            res2_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(res1, res2);
            break;
        }
        default:
            AT_ERROR("_th_gels_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor> CPUType::_th_gels(const Tensor & self, const Tensor & A) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto res1_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto res1 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res1_));
            auto res2_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto res2 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res2_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto A_ = checked_tensor_unwrap(A,"A",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_gels(res1_, res2_, self_, A_);
            bool maybe_scalar = self_->dim() == 0 && A_->dim() == 0;
            res1_->maybe_zero_dim(maybe_scalar);
            res2_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(res1, res2);
            break;
        }
        case ScalarType::Float: {
            auto res1_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto res1 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res1_));
            auto res2_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto res2 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res2_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto A_ = checked_tensor_unwrap(A,"A",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_gels(res1_, res2_, self_, A_);
            bool maybe_scalar = self_->dim() == 0 && A_->dim() == 0;
            res1_->maybe_zero_dim(maybe_scalar);
            res2_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(res1, res2);
            break;
        }
        default:
            AT_ERROR("_th_gels not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor &,Tensor &> CPUType::_th_symeig_out(Tensor & res1, Tensor & res2, const Tensor & self, bool eigenvectors, bool upper) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto res1_ = checked_tensor_unwrap(res1,"res1",0, false, Backend::CPU, ScalarType::Double);
            auto res2_ = checked_tensor_unwrap(res2,"res2",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_syev(res1_, res2_, self_, (eigenvectors) ? "V" : "N", (upper) ? "U" : "L");
            bool maybe_scalar = self_->dim() == 0;
            res1_->maybe_zero_dim(maybe_scalar);
            res2_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(res1, res2);
            break;
        }
        case ScalarType::Float: {
            auto res1_ = checked_tensor_unwrap(res1,"res1",0, false, Backend::CPU, ScalarType::Float);
            auto res2_ = checked_tensor_unwrap(res2,"res2",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_syev(res1_, res2_, self_, (eigenvectors) ? "V" : "N", (upper) ? "U" : "L");
            bool maybe_scalar = self_->dim() == 0;
            res1_->maybe_zero_dim(maybe_scalar);
            res2_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(res1, res2);
            break;
        }
        default:
            AT_ERROR("_th_symeig_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor> CPUType::_th_symeig(const Tensor & self, bool eigenvectors, bool upper) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto res1_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto res1 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res1_));
            auto res2_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto res2 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res2_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_syev(res1_, res2_, self_, (eigenvectors) ? "V" : "N", (upper) ? "U" : "L");
            bool maybe_scalar = self_->dim() == 0;
            res1_->maybe_zero_dim(maybe_scalar);
            res2_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(res1, res2);
            break;
        }
        case ScalarType::Float: {
            auto res1_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto res1 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res1_));
            auto res2_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto res2 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res2_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_syev(res1_, res2_, self_, (eigenvectors) ? "V" : "N", (upper) ? "U" : "L");
            bool maybe_scalar = self_->dim() == 0;
            res1_->maybe_zero_dim(maybe_scalar);
            res2_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(res1, res2);
            break;
        }
        default:
            AT_ERROR("_th_symeig not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor &,Tensor &> CPUType::_th_eig_out(Tensor & res1, Tensor & res2, const Tensor & self, bool eigenvectors) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto res1_ = checked_tensor_unwrap(res1,"res1",0, false, Backend::CPU, ScalarType::Double);
            auto res2_ = checked_tensor_unwrap(res2,"res2",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_geev(res1_, res2_, self_, (eigenvectors) ? "V" : "N");
            bool maybe_scalar = self_->dim() == 0;
            res1_->maybe_zero_dim(maybe_scalar);
            res2_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(res1, res2);
            break;
        }
        case ScalarType::Float: {
            auto res1_ = checked_tensor_unwrap(res1,"res1",0, false, Backend::CPU, ScalarType::Float);
            auto res2_ = checked_tensor_unwrap(res2,"res2",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_geev(res1_, res2_, self_, (eigenvectors) ? "V" : "N");
            bool maybe_scalar = self_->dim() == 0;
            res1_->maybe_zero_dim(maybe_scalar);
            res2_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(res1, res2);
            break;
        }
        default:
            AT_ERROR("_th_eig_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor> CPUType::_th_eig(const Tensor & self, bool eigenvectors) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto res1_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto res1 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res1_));
            auto res2_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto res2 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res2_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_geev(res1_, res2_, self_, (eigenvectors) ? "V" : "N");
            bool maybe_scalar = self_->dim() == 0;
            res1_->maybe_zero_dim(maybe_scalar);
            res2_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(res1, res2);
            break;
        }
        case ScalarType::Float: {
            auto res1_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto res1 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res1_));
            auto res2_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto res2 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res2_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_geev(res1_, res2_, self_, (eigenvectors) ? "V" : "N");
            bool maybe_scalar = self_->dim() == 0;
            res1_->maybe_zero_dim(maybe_scalar);
            res2_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(res1, res2);
            break;
        }
        default:
            AT_ERROR("_th_eig not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor &,Tensor &,Tensor &> CPUType::_th_svd_out(Tensor & res1, Tensor & res2, Tensor & res3, const Tensor & self, bool some, bool compute_uv) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto res1_ = checked_tensor_unwrap(res1,"res1",0, false, Backend::CPU, ScalarType::Double);
            auto res2_ = checked_tensor_unwrap(res2,"res2",0, false, Backend::CPU, ScalarType::Double);
            auto res3_ = checked_tensor_unwrap(res3,"res3",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_gesdd(res1_, res2_, res3_, self_, (some) ? "S" : "A", (compute_uv) ? "S" : "N");
            bool maybe_scalar = self_->dim() == 0;
            res1_->maybe_zero_dim(maybe_scalar);
            res2_->maybe_zero_dim(maybe_scalar);
            res3_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &, Tensor &>(res1, res2, res3);
            break;
        }
        case ScalarType::Float: {
            auto res1_ = checked_tensor_unwrap(res1,"res1",0, false, Backend::CPU, ScalarType::Float);
            auto res2_ = checked_tensor_unwrap(res2,"res2",0, false, Backend::CPU, ScalarType::Float);
            auto res3_ = checked_tensor_unwrap(res3,"res3",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_gesdd(res1_, res2_, res3_, self_, (some) ? "S" : "A", (compute_uv) ? "S" : "N");
            bool maybe_scalar = self_->dim() == 0;
            res1_->maybe_zero_dim(maybe_scalar);
            res2_->maybe_zero_dim(maybe_scalar);
            res3_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &, Tensor &>(res1, res2, res3);
            break;
        }
        default:
            AT_ERROR("_th_svd_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor,Tensor> CPUType::_th_svd(const Tensor & self, bool some, bool compute_uv) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto res1_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto res1 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res1_));
            auto res2_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto res2 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res2_));
            auto res3_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto res3 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res3_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_gesdd(res1_, res2_, res3_, self_, (some) ? "S" : "A", (compute_uv) ? "S" : "N");
            bool maybe_scalar = self_->dim() == 0;
            res1_->maybe_zero_dim(maybe_scalar);
            res2_->maybe_zero_dim(maybe_scalar);
            res3_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor, Tensor>(res1, res2, res3);
            break;
        }
        case ScalarType::Float: {
            auto res1_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto res1 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res1_));
            auto res2_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto res2 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res2_));
            auto res3_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto res3 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res3_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_gesdd(res1_, res2_, res3_, self_, (some) ? "S" : "A", (compute_uv) ? "S" : "N");
            bool maybe_scalar = self_->dim() == 0;
            res1_->maybe_zero_dim(maybe_scalar);
            res2_->maybe_zero_dim(maybe_scalar);
            res3_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor, Tensor>(res1, res2, res3);
            break;
        }
        default:
            AT_ERROR("_th_svd not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_getri_single_out(Tensor & output, const Tensor & self) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto output_ = checked_tensor_unwrap(output,"output",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_getri(output_, self_);
            output_->maybe_zero_dim(self_->dim() == 0);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto output_ = checked_tensor_unwrap(output,"output",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_getri(output_, self_);
            output_->maybe_zero_dim(self_->dim() == 0);
            return output;
            break;
        }
        default:
            AT_ERROR("_th_getri_single_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_getri_single(const Tensor & self) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_getri(output_, self_);
            output_->maybe_zero_dim(self_->dim() == 0);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_getri(output_, self_);
            output_->maybe_zero_dim(self_->dim() == 0);
            return output;
            break;
        }
        default:
            AT_ERROR("_th_getri_single not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_potri_out(Tensor & output, const Tensor & self, bool upper) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto output_ = checked_tensor_unwrap(output,"output",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_potri(output_, self_, (upper) ? "U" : "L");
            output_->maybe_zero_dim(self_->dim() == 0);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto output_ = checked_tensor_unwrap(output,"output",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_potri(output_, self_, (upper) ? "U" : "L");
            output_->maybe_zero_dim(self_->dim() == 0);
            return output;
            break;
        }
        default:
            AT_ERROR("_th_potri_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_potri(const Tensor & self, bool upper) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_potri(output_, self_, (upper) ? "U" : "L");
            output_->maybe_zero_dim(self_->dim() == 0);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_potri(output_, self_, (upper) ? "U" : "L");
            output_->maybe_zero_dim(self_->dim() == 0);
            return output;
            break;
        }
        default:
            AT_ERROR("_th_potri not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor &,Tensor &> CPUType::_th_pstrf_out(Tensor & res1, Tensor & res2, const Tensor & self, bool upper, Scalar tol) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto res1_ = checked_tensor_unwrap(res1,"res1",0, false, Backend::CPU, ScalarType::Double);
            auto res2_ = checked_tensor_unwrap(res2,"res2",0, false, Backend::CPU, ScalarType::Int);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto tol_ = tol.toDouble();
            THDoubleTensor_pstrf(res1_, res2_, self_, (upper) ? "U" : "L", tol_);
            res2 -= 1;  // LAPACK returns 1-indexed pivots
            return std::tuple<Tensor &, Tensor &>(res1, res2);
            break;
        }
        case ScalarType::Float: {
            auto res1_ = checked_tensor_unwrap(res1,"res1",0, false, Backend::CPU, ScalarType::Float);
            auto res2_ = checked_tensor_unwrap(res2,"res2",0, false, Backend::CPU, ScalarType::Int);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto tol_ = tol.toFloat();
            THFloatTensor_pstrf(res1_, res2_, self_, (upper) ? "U" : "L", tol_);
            res2 -= 1;  // LAPACK returns 1-indexed pivots
            return std::tuple<Tensor &, Tensor &>(res1, res2);
            break;
        }
        default:
            AT_ERROR("_th_pstrf_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor> CPUType::_th_pstrf(const Tensor & self, bool upper, Scalar tol) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto res1_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto res1 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res1_));
            auto res2_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Int), 0, allocator(), true),CPUTensorId()).release();
            auto res2 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res2_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto tol_ = tol.toDouble();
            THDoubleTensor_pstrf(res1_, res2_, self_, (upper) ? "U" : "L", tol_);
            res2 -= 1;  // LAPACK returns 1-indexed pivots
            return std::tuple<Tensor, Tensor>(res1, res2);
            break;
        }
        case ScalarType::Float: {
            auto res1_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto res1 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res1_));
            auto res2_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Int), 0, allocator(), true),CPUTensorId()).release();
            auto res2 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res2_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto tol_ = tol.toFloat();
            THFloatTensor_pstrf(res1_, res2_, self_, (upper) ? "U" : "L", tol_);
            res2 -= 1;  // LAPACK returns 1-indexed pivots
            return std::tuple<Tensor, Tensor>(res1, res2);
            break;
        }
        default:
            AT_ERROR("_th_pstrf not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor &,Tensor &> CPUType::_th_qr_out(Tensor & res1, Tensor & res2, const Tensor & self) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto res1_ = checked_tensor_unwrap(res1,"res1",0, false, Backend::CPU, ScalarType::Double);
            auto res2_ = checked_tensor_unwrap(res2,"res2",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_qr(res1_, res2_, self_);
            bool maybe_scalar = self_->dim() == 0;
            res1_->maybe_zero_dim(maybe_scalar);
            res2_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(res1, res2);
            break;
        }
        case ScalarType::Float: {
            auto res1_ = checked_tensor_unwrap(res1,"res1",0, false, Backend::CPU, ScalarType::Float);
            auto res2_ = checked_tensor_unwrap(res2,"res2",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_qr(res1_, res2_, self_);
            bool maybe_scalar = self_->dim() == 0;
            res1_->maybe_zero_dim(maybe_scalar);
            res2_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(res1, res2);
            break;
        }
        default:
            AT_ERROR("_th_qr_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor> CPUType::_th_qr(const Tensor & self) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto res1_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto res1 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res1_));
            auto res2_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto res2 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res2_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_qr(res1_, res2_, self_);
            bool maybe_scalar = self_->dim() == 0;
            res1_->maybe_zero_dim(maybe_scalar);
            res2_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(res1, res2);
            break;
        }
        case ScalarType::Float: {
            auto res1_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto res1 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res1_));
            auto res2_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto res2 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res2_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_qr(res1_, res2_, self_);
            bool maybe_scalar = self_->dim() == 0;
            res1_->maybe_zero_dim(maybe_scalar);
            res2_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(res1, res2);
            break;
        }
        default:
            AT_ERROR("_th_qr not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor &,Tensor &> CPUType::_th_geqrf_out(Tensor & res1, Tensor & res2, const Tensor & self) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto res1_ = checked_tensor_unwrap(res1,"res1",0, false, Backend::CPU, ScalarType::Double);
            auto res2_ = checked_tensor_unwrap(res2,"res2",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_geqrf(res1_, res2_, self_);
            bool maybe_scalar = self_->dim() == 0;
            res1_->maybe_zero_dim(maybe_scalar);
            res2_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(res1, res2);
            break;
        }
        case ScalarType::Float: {
            auto res1_ = checked_tensor_unwrap(res1,"res1",0, false, Backend::CPU, ScalarType::Float);
            auto res2_ = checked_tensor_unwrap(res2,"res2",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_geqrf(res1_, res2_, self_);
            bool maybe_scalar = self_->dim() == 0;
            res1_->maybe_zero_dim(maybe_scalar);
            res2_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(res1, res2);
            break;
        }
        default:
            AT_ERROR("_th_geqrf_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor> CPUType::_th_geqrf(const Tensor & self) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto res1_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto res1 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res1_));
            auto res2_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto res2 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res2_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_geqrf(res1_, res2_, self_);
            bool maybe_scalar = self_->dim() == 0;
            res1_->maybe_zero_dim(maybe_scalar);
            res2_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(res1, res2);
            break;
        }
        case ScalarType::Float: {
            auto res1_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto res1 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res1_));
            auto res2_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto res2 = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(res2_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_geqrf(res1_, res2_, self_);
            bool maybe_scalar = self_->dim() == 0;
            res1_->maybe_zero_dim(maybe_scalar);
            res2_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(res1, res2);
            break;
        }
        default:
            AT_ERROR("_th_geqrf not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_orgqr_out(Tensor & result, const Tensor & self, const Tensor & input2) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto input2_ = checked_tensor_unwrap(input2,"input2",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_orgqr(result_, self_, input2_);
            result_->maybe_zero_dim(self_->dim() == 0 && input2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto input2_ = checked_tensor_unwrap(input2,"input2",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_orgqr(result_, self_, input2_);
            result_->maybe_zero_dim(self_->dim() == 0 && input2_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_orgqr_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_orgqr(const Tensor & self, const Tensor & input2) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto input2_ = checked_tensor_unwrap(input2,"input2",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_orgqr(result_, self_, input2_);
            result_->maybe_zero_dim(self_->dim() == 0 && input2_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto input2_ = checked_tensor_unwrap(input2,"input2",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_orgqr(result_, self_, input2_);
            result_->maybe_zero_dim(self_->dim() == 0 && input2_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_orgqr not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_ormqr_out(Tensor & result, const Tensor & self, const Tensor & input2, const Tensor & input3, bool left, bool transpose) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto input2_ = checked_tensor_unwrap(input2,"input2",2, false, Backend::CPU, ScalarType::Double);
            auto input3_ = checked_tensor_unwrap(input3,"input3",3, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_ormqr(result_, self_, input2_, input3_, (left) ? "L" : "R", (transpose) ? "T" : "N");
            result_->maybe_zero_dim(self_->dim() == 0 && input2_->dim() == 0 && input3_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto input2_ = checked_tensor_unwrap(input2,"input2",2, false, Backend::CPU, ScalarType::Float);
            auto input3_ = checked_tensor_unwrap(input3,"input3",3, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_ormqr(result_, self_, input2_, input3_, (left) ? "L" : "R", (transpose) ? "T" : "N");
            result_->maybe_zero_dim(self_->dim() == 0 && input2_->dim() == 0 && input3_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_ormqr_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_ormqr(const Tensor & self, const Tensor & input2, const Tensor & input3, bool left, bool transpose) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto input2_ = checked_tensor_unwrap(input2,"input2",2, false, Backend::CPU, ScalarType::Double);
            auto input3_ = checked_tensor_unwrap(input3,"input3",3, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_ormqr(result_, self_, input2_, input3_, (left) ? "L" : "R", (transpose) ? "T" : "N");
            result_->maybe_zero_dim(self_->dim() == 0 && input2_->dim() == 0 && input3_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto input2_ = checked_tensor_unwrap(input2,"input2",2, false, Backend::CPU, ScalarType::Float);
            auto input3_ = checked_tensor_unwrap(input3,"input3",3, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_ormqr(result_, self_, input2_, input3_, (left) ? "L" : "R", (transpose) ? "T" : "N");
            result_->maybe_zero_dim(self_->dim() == 0 && input2_->dim() == 0 && input3_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_ormqr not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_btrisolve_out(Tensor & result, const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto LU_data_ = checked_tensor_unwrap(LU_data,"LU_data",2, false, Backend::CPU, ScalarType::Double);
            auto LU_pivots_ = checked_tensor_unwrap(LU_pivots,"LU_pivots",3, false, Backend::CPU, ScalarType::Int);
            THDoubleTensor_btrisolve(result_, self_, LU_data_, LU_pivots_);
            result_->maybe_zero_dim(self_->dim() == 0 && LU_data_->dim() == 0 && LU_pivots_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto LU_data_ = checked_tensor_unwrap(LU_data,"LU_data",2, false, Backend::CPU, ScalarType::Float);
            auto LU_pivots_ = checked_tensor_unwrap(LU_pivots,"LU_pivots",3, false, Backend::CPU, ScalarType::Int);
            THFloatTensor_btrisolve(result_, self_, LU_data_, LU_pivots_);
            result_->maybe_zero_dim(self_->dim() == 0 && LU_data_->dim() == 0 && LU_pivots_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_btrisolve_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_btrisolve(const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto LU_data_ = checked_tensor_unwrap(LU_data,"LU_data",2, false, Backend::CPU, ScalarType::Double);
            auto LU_pivots_ = checked_tensor_unwrap(LU_pivots,"LU_pivots",3, false, Backend::CPU, ScalarType::Int);
            THDoubleTensor_btrisolve(result_, self_, LU_data_, LU_pivots_);
            result_->maybe_zero_dim(self_->dim() == 0 && LU_data_->dim() == 0 && LU_pivots_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto LU_data_ = checked_tensor_unwrap(LU_data,"LU_data",2, false, Backend::CPU, ScalarType::Float);
            auto LU_pivots_ = checked_tensor_unwrap(LU_pivots,"LU_pivots",3, false, Backend::CPU, ScalarType::Int);
            THFloatTensor_btrisolve(result_, self_, LU_data_, LU_pivots_);
            result_->maybe_zero_dim(self_->dim() == 0 && LU_data_->dim() == 0 && LU_pivots_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_btrisolve not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_random_(Tensor & self, int64_t from, int64_t to, Generator * generator) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THBoolTensor_clampedRandom(self_, generator_->generator, from, to);
            return self;
            break;
        }
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THByteTensor_clampedRandom(self_, generator_->generator, from, to);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THCharTensor_clampedRandom(self_, generator_->generator, from, to);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THDoubleTensor_clampedRandom(self_, generator_->generator, from, to);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THFloatTensor_clampedRandom(self_, generator_->generator, from, to);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THIntTensor_clampedRandom(self_, generator_->generator, from, to);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THLongTensor_clampedRandom(self_, generator_->generator, from, to);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THShortTensor_clampedRandom(self_, generator_->generator, from, to);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_random_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_random_(Tensor & self, int64_t to, Generator * generator) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THBoolTensor_cappedRandom(self_, generator_->generator, to);
            return self;
            break;
        }
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THByteTensor_cappedRandom(self_, generator_->generator, to);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THCharTensor_cappedRandom(self_, generator_->generator, to);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THDoubleTensor_cappedRandom(self_, generator_->generator, to);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THFloatTensor_cappedRandom(self_, generator_->generator, to);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THIntTensor_cappedRandom(self_, generator_->generator, to);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THLongTensor_cappedRandom(self_, generator_->generator, to);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THShortTensor_cappedRandom(self_, generator_->generator, to);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_random_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_random_(Tensor & self, Generator * generator) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THBoolTensor_random(self_, generator_->generator);
            return self;
            break;
        }
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THByteTensor_random(self_, generator_->generator);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THCharTensor_random(self_, generator_->generator);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THDoubleTensor_random(self_, generator_->generator);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THFloatTensor_random(self_, generator_->generator);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THIntTensor_random(self_, generator_->generator);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THLongTensor_random(self_, generator_->generator);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THShortTensor_random(self_, generator_->generator);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_random_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor &,Tensor &> CPUType::_th_multinomial_alias_setup_out(Tensor & J, Tensor & q, const Tensor & probs) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(J);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto probs_ = checked_tensor_unwrap(probs,"probs",1, false, Backend::CPU, ScalarType::Double);
            auto J_ = checked_tensor_unwrap(J,"J",1, false, Backend::CPU, ScalarType::Long);
            auto q_ = checked_tensor_unwrap(q,"q",1, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_multinomialAliasSetup(probs_, J_, q_);
            bool maybe_scalar = probs_->dim() == 0;
            J_->maybe_zero_dim(maybe_scalar);
            q_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(J, q);
            break;
        }
        case ScalarType::Float: {
            auto probs_ = checked_tensor_unwrap(probs,"probs",1, false, Backend::CPU, ScalarType::Float);
            auto J_ = checked_tensor_unwrap(J,"J",1, false, Backend::CPU, ScalarType::Long);
            auto q_ = checked_tensor_unwrap(q,"q",1, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_multinomialAliasSetup(probs_, J_, q_);
            bool maybe_scalar = probs_->dim() == 0;
            J_->maybe_zero_dim(maybe_scalar);
            q_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &>(J, q);
            break;
        }
        default:
            AT_ERROR("_th_multinomial_alias_setup_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor> CPUType::_th_multinomial_alias_setup(const Tensor & probs) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(probs);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto probs_ = checked_tensor_unwrap(probs,"probs",1, false, Backend::CPU, ScalarType::Double);
            auto J_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto J = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(J_));
            auto q_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto q = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(q_));
            THDoubleTensor_multinomialAliasSetup(probs_, J_, q_);
            bool maybe_scalar = probs_->dim() == 0;
            J_->maybe_zero_dim(maybe_scalar);
            q_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(J, q);
            break;
        }
        case ScalarType::Float: {
            auto probs_ = checked_tensor_unwrap(probs,"probs",1, false, Backend::CPU, ScalarType::Float);
            auto J_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto J = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(J_));
            auto q_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto q = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(q_));
            THFloatTensor_multinomialAliasSetup(probs_, J_, q_);
            bool maybe_scalar = probs_->dim() == 0;
            J_->maybe_zero_dim(maybe_scalar);
            q_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor>(J, q);
            break;
        }
        default:
            AT_ERROR("_th_multinomial_alias_setup not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_multinomial_alias_draw_out(Tensor & result, const Tensor & q, const Tensor & J, int64_t num_samples, Generator * generator) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(result);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            auto q_ = checked_tensor_unwrap(q,"q",2, false, Backend::CPU, ScalarType::Double);
            auto J_ = checked_tensor_unwrap(J,"J",3, false, Backend::CPU, ScalarType::Long);
            THDoubleTensor_multinomialAliasDraw(result_, generator_->generator, q_, J_, num_samples);
            result_->maybe_zero_dim(q_->dim() == 0 && J_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            auto q_ = checked_tensor_unwrap(q,"q",2, false, Backend::CPU, ScalarType::Float);
            auto J_ = checked_tensor_unwrap(J,"J",3, false, Backend::CPU, ScalarType::Long);
            THFloatTensor_multinomialAliasDraw(result_, generator_->generator, q_, J_, num_samples);
            result_->maybe_zero_dim(q_->dim() == 0 && J_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_multinomial_alias_draw_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_multinomial_alias_draw(const Tensor & q, const Tensor & J, int64_t num_samples, Generator * generator) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(q);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            auto q_ = checked_tensor_unwrap(q,"q",2, false, Backend::CPU, ScalarType::Double);
            auto J_ = checked_tensor_unwrap(J,"J",3, false, Backend::CPU, ScalarType::Long);
            THDoubleTensor_multinomialAliasDraw(result_, generator_->generator, q_, J_, num_samples);
            result_->maybe_zero_dim(q_->dim() == 0 && J_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            auto q_ = checked_tensor_unwrap(q,"q",2, false, Backend::CPU, ScalarType::Float);
            auto J_ = checked_tensor_unwrap(J,"J",3, false, Backend::CPU, ScalarType::Long);
            THFloatTensor_multinomialAliasDraw(result_, generator_->generator, q_, J_, num_samples);
            result_->maybe_zero_dim(q_->dim() == 0 && J_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_multinomial_alias_draw not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_multinomial_out(Tensor & result, const Tensor & self, int64_t num_samples, bool replacement, Generator * generator) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_multinomial(result_, generator_->generator, self_, num_samples, replacement);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = checked_tensor_unwrap(result,"result",0, false, Backend::CPU, ScalarType::Long);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_multinomial(result_, generator_->generator, self_, num_samples, replacement);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_multinomial_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_multinomial(const Tensor & self, int64_t num_samples, bool replacement, Generator * generator) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_multinomial(result_, generator_->generator, self_, num_samples, replacement);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        case ScalarType::Float: {
            auto result_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto result = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(result_));
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_multinomial(result_, generator_->generator, self_, num_samples, replacement);
            result_->maybe_zero_dim(self_->dim() == 0);
            return result;
            break;
        }
        default:
            AT_ERROR("_th_multinomial not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_uniform_(Tensor & self, double from, double to, Generator * generator) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THDoubleTensor_uniform(self_, generator_->generator, from, to);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THFloatTensor_uniform(self_, generator_->generator, from, to);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_uniform_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_normal_out(Tensor & output, const Tensor & mean, double std, Generator * generator) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(output);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto output_ = checked_tensor_unwrap(output,"output",0, false, Backend::CPU, ScalarType::Double);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            auto mean_ = checked_tensor_unwrap(mean,"mean",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_normal_means(output_, generator_->generator, mean_, std);
            output_->maybe_zero_dim(mean_->dim() == 0);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto output_ = checked_tensor_unwrap(output,"output",0, false, Backend::CPU, ScalarType::Float);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            auto mean_ = checked_tensor_unwrap(mean,"mean",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_normal_means(output_, generator_->generator, mean_, std);
            output_->maybe_zero_dim(mean_->dim() == 0);
            return output;
            break;
        }
        default:
            AT_ERROR("_th_normal_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_normal(const Tensor & mean, double std, Generator * generator) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(mean);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            auto mean_ = checked_tensor_unwrap(mean,"mean",2, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_normal_means(output_, generator_->generator, mean_, std);
            output_->maybe_zero_dim(mean_->dim() == 0);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            auto mean_ = checked_tensor_unwrap(mean,"mean",2, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_normal_means(output_, generator_->generator, mean_, std);
            output_->maybe_zero_dim(mean_->dim() == 0);
            return output;
            break;
        }
        default:
            AT_ERROR("_th_normal not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_normal_out(Tensor & output, double mean, const Tensor & std, Generator * generator) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(output);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto output_ = checked_tensor_unwrap(output,"output",0, false, Backend::CPU, ScalarType::Double);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            auto std_ = checked_tensor_unwrap(std,"std",3, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_normal_stddevs(output_, generator_->generator, mean, std_);
            output_->maybe_zero_dim(std_->dim() == 0);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto output_ = checked_tensor_unwrap(output,"output",0, false, Backend::CPU, ScalarType::Float);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            auto std_ = checked_tensor_unwrap(std,"std",3, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_normal_stddevs(output_, generator_->generator, mean, std_);
            output_->maybe_zero_dim(std_->dim() == 0);
            return output;
            break;
        }
        default:
            AT_ERROR("_th_normal_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_normal(double mean, const Tensor & std, Generator * generator) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(std);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            auto std_ = checked_tensor_unwrap(std,"std",3, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_normal_stddevs(output_, generator_->generator, mean, std_);
            output_->maybe_zero_dim(std_->dim() == 0);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            auto std_ = checked_tensor_unwrap(std,"std",3, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_normal_stddevs(output_, generator_->generator, mean, std_);
            output_->maybe_zero_dim(std_->dim() == 0);
            return output;
            break;
        }
        default:
            AT_ERROR("_th_normal not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_normal_out(Tensor & output, const Tensor & mean, const Tensor & std, Generator * generator) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(output);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto output_ = checked_tensor_unwrap(output,"output",0, false, Backend::CPU, ScalarType::Double);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            auto mean_ = checked_tensor_unwrap(mean,"mean",2, false, Backend::CPU, ScalarType::Double);
            auto std_ = checked_tensor_unwrap(std,"std",3, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_normal_means_stddevs(output_, generator_->generator, mean_, std_);
            output_->maybe_zero_dim(mean_->dim() == 0 && std_->dim() == 0);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto output_ = checked_tensor_unwrap(output,"output",0, false, Backend::CPU, ScalarType::Float);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            auto mean_ = checked_tensor_unwrap(mean,"mean",2, false, Backend::CPU, ScalarType::Float);
            auto std_ = checked_tensor_unwrap(std,"std",3, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_normal_means_stddevs(output_, generator_->generator, mean_, std_);
            output_->maybe_zero_dim(mean_->dim() == 0 && std_->dim() == 0);
            return output;
            break;
        }
        default:
            AT_ERROR("_th_normal_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_normal(const Tensor & mean, const Tensor & std, Generator * generator) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(mean);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            auto mean_ = checked_tensor_unwrap(mean,"mean",2, false, Backend::CPU, ScalarType::Double);
            auto std_ = checked_tensor_unwrap(std,"std",3, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_normal_means_stddevs(output_, generator_->generator, mean_, std_);
            output_->maybe_zero_dim(mean_->dim() == 0 && std_->dim() == 0);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            auto mean_ = checked_tensor_unwrap(mean,"mean",2, false, Backend::CPU, ScalarType::Float);
            auto std_ = checked_tensor_unwrap(std,"std",3, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_normal_means_stddevs(output_, generator_->generator, mean_, std_);
            output_->maybe_zero_dim(mean_->dim() == 0 && std_->dim() == 0);
            return output;
            break;
        }
        default:
            AT_ERROR("_th_normal not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_normal_(Tensor & self, double mean, double std, Generator * generator) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THDoubleTensor_normal(self_, generator_->generator, mean, std);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THFloatTensor_normal(self_, generator_->generator, mean, std);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_normal_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_cauchy_(Tensor & self, double median, double sigma, Generator * generator) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THDoubleTensor_cauchy(self_, generator_->generator, median, sigma);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THFloatTensor_cauchy(self_, generator_->generator, median, sigma);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_cauchy_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_log_normal_(Tensor & self, double mean, double std, Generator * generator) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THDoubleTensor_logNormal(self_, generator_->generator, mean, std);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THFloatTensor_logNormal(self_, generator_->generator, mean, std);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_log_normal_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_exponential_(Tensor & self, double lambd, Generator * generator) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THDoubleTensor_exponential(self_, generator_->generator, lambd);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THFloatTensor_exponential(self_, generator_->generator, lambd);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_exponential_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_geometric_(Tensor & self, double p, Generator * generator) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THByteTensor_geometric(self_, generator_->generator, p);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THCharTensor_geometric(self_, generator_->generator, p);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THDoubleTensor_geometric(self_, generator_->generator, p);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THFloatTensor_geometric(self_, generator_->generator, p);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THIntTensor_geometric(self_, generator_->generator, p);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THLongTensor_geometric(self_, generator_->generator, p);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THShortTensor_geometric(self_, generator_->generator, p);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_geometric_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_dirichlet_grad_out(Tensor & output, const Tensor & x, const Tensor & alpha, const Tensor & total) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(output);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto output_ = checked_tensor_unwrap(output,"output",0, false, Backend::CPU, ScalarType::Double);
            auto x_ = checked_tensor_unwrap(x,"x",1, false, Backend::CPU, ScalarType::Double);
            auto alpha_ = checked_tensor_unwrap(alpha,"alpha",2, false, Backend::CPU, ScalarType::Double);
            auto total_ = checked_tensor_unwrap(total,"total",3, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_dirichlet_grad(output_, x_, alpha_, total_);
            output_->maybe_zero_dim(x_->dim() == 0 && alpha_->dim() == 0 && total_->dim() == 0);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto output_ = checked_tensor_unwrap(output,"output",0, false, Backend::CPU, ScalarType::Float);
            auto x_ = checked_tensor_unwrap(x,"x",1, false, Backend::CPU, ScalarType::Float);
            auto alpha_ = checked_tensor_unwrap(alpha,"alpha",2, false, Backend::CPU, ScalarType::Float);
            auto total_ = checked_tensor_unwrap(total,"total",3, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_dirichlet_grad(output_, x_, alpha_, total_);
            output_->maybe_zero_dim(x_->dim() == 0 && alpha_->dim() == 0 && total_->dim() == 0);
            return output;
            break;
        }
        default:
            AT_ERROR("_th_dirichlet_grad_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_dirichlet_grad(const Tensor & x, const Tensor & alpha, const Tensor & total) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(x);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            auto x_ = checked_tensor_unwrap(x,"x",1, false, Backend::CPU, ScalarType::Double);
            auto alpha_ = checked_tensor_unwrap(alpha,"alpha",2, false, Backend::CPU, ScalarType::Double);
            auto total_ = checked_tensor_unwrap(total,"total",3, false, Backend::CPU, ScalarType::Double);
            THDoubleTensor_dirichlet_grad(output_, x_, alpha_, total_);
            output_->maybe_zero_dim(x_->dim() == 0 && alpha_->dim() == 0 && total_->dim() == 0);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            auto x_ = checked_tensor_unwrap(x,"x",1, false, Backend::CPU, ScalarType::Float);
            auto alpha_ = checked_tensor_unwrap(alpha,"alpha",2, false, Backend::CPU, ScalarType::Float);
            auto total_ = checked_tensor_unwrap(total,"total",3, false, Backend::CPU, ScalarType::Float);
            THFloatTensor_dirichlet_grad(output_, x_, alpha_, total_);
            output_->maybe_zero_dim(x_->dim() == 0 && alpha_->dim() == 0 && total_->dim() == 0);
            return output;
            break;
        }
        default:
            AT_ERROR("_th_dirichlet_grad not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_alias(const Tensor & self) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Bool);
            return Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim((THBoolTensor_newWithTensor(self_))->maybe_zero_dim(self_->dim() == 0)));
            break;
        }
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Byte);
            return Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim((THByteTensor_newWithTensor(self_))->maybe_zero_dim(self_->dim() == 0)));
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Char);
            return Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim((THCharTensor_newWithTensor(self_))->maybe_zero_dim(self_->dim() == 0)));
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            return Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim((THDoubleTensor_newWithTensor(self_))->maybe_zero_dim(self_->dim() == 0)));
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            return Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim((THFloatTensor_newWithTensor(self_))->maybe_zero_dim(self_->dim() == 0)));
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Int);
            return Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim((THIntTensor_newWithTensor(self_))->maybe_zero_dim(self_->dim() == 0)));
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Long);
            return Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim((THLongTensor_newWithTensor(self_))->maybe_zero_dim(self_->dim() == 0)));
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Short);
            return Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim((THShortTensor_newWithTensor(self_))->maybe_zero_dim(self_->dim() == 0)));
            break;
        }
        case ScalarType::Half: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Half);
            return Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim((THHalfTensor_newWithTensor(self_))->maybe_zero_dim(self_->dim() == 0)));
            break;
        }
        default:
            AT_ERROR("_th_alias not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_th_cat_out(Tensor & self, TensorList tensors, int64_t dim) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto self_ = checked_tensor_unwrap(self,"self",0, false, Backend::CPU, ScalarType::Bool);
            auto tensors_ = checked_tensor_list_unwrap(tensors,"tensors",1, Backend::CPU, ScalarType::Bool);
            THBoolTensor_catArray(self_, tensors_.data(), tensors_.size(), dim);
            return self;
            break;
        }
        case ScalarType::Byte: {
            auto self_ = checked_tensor_unwrap(self,"self",0, false, Backend::CPU, ScalarType::Byte);
            auto tensors_ = checked_tensor_list_unwrap(tensors,"tensors",1, Backend::CPU, ScalarType::Byte);
            THByteTensor_catArray(self_, tensors_.data(), tensors_.size(), dim);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = checked_tensor_unwrap(self,"self",0, false, Backend::CPU, ScalarType::Char);
            auto tensors_ = checked_tensor_list_unwrap(tensors,"tensors",1, Backend::CPU, ScalarType::Char);
            THCharTensor_catArray(self_, tensors_.data(), tensors_.size(), dim);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",0, false, Backend::CPU, ScalarType::Double);
            auto tensors_ = checked_tensor_list_unwrap(tensors,"tensors",1, Backend::CPU, ScalarType::Double);
            THDoubleTensor_catArray(self_, tensors_.data(), tensors_.size(), dim);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",0, false, Backend::CPU, ScalarType::Float);
            auto tensors_ = checked_tensor_list_unwrap(tensors,"tensors",1, Backend::CPU, ScalarType::Float);
            THFloatTensor_catArray(self_, tensors_.data(), tensors_.size(), dim);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = checked_tensor_unwrap(self,"self",0, false, Backend::CPU, ScalarType::Int);
            auto tensors_ = checked_tensor_list_unwrap(tensors,"tensors",1, Backend::CPU, ScalarType::Int);
            THIntTensor_catArray(self_, tensors_.data(), tensors_.size(), dim);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = checked_tensor_unwrap(self,"self",0, false, Backend::CPU, ScalarType::Long);
            auto tensors_ = checked_tensor_list_unwrap(tensors,"tensors",1, Backend::CPU, ScalarType::Long);
            THLongTensor_catArray(self_, tensors_.data(), tensors_.size(), dim);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = checked_tensor_unwrap(self,"self",0, false, Backend::CPU, ScalarType::Short);
            auto tensors_ = checked_tensor_list_unwrap(tensors,"tensors",1, Backend::CPU, ScalarType::Short);
            THShortTensor_catArray(self_, tensors_.data(), tensors_.size(), dim);
            return self;
            break;
        }
        case ScalarType::Half: {
            auto self_ = checked_tensor_unwrap(self,"self",0, false, Backend::CPU, ScalarType::Half);
            auto tensors_ = checked_tensor_list_unwrap(tensors,"tensors",1, Backend::CPU, ScalarType::Half);
            THHalfTensor_catArray(self_, tensors_.data(), tensors_.size(), dim);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_cat_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_th_cat(TensorList tensors, int64_t dim) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(tensors);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool: {
            auto self_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<bool>(), 0, allocator(), true),CPUTensorId()).release();
            auto self = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(self_));
            auto tensors_ = checked_tensor_list_unwrap(tensors,"tensors",1, Backend::CPU, ScalarType::Bool);
            THBoolTensor_catArray(self_, tensors_.data(), tensors_.size(), dim);
            return self;
            break;
        }
        case ScalarType::Byte: {
            auto self_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<uint8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto self = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(self_));
            auto tensors_ = checked_tensor_list_unwrap(tensors,"tensors",1, Backend::CPU, ScalarType::Byte);
            THByteTensor_catArray(self_, tensors_.data(), tensors_.size(), dim);
            return self;
            break;
        }
        case ScalarType::Char: {
            auto self_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int8_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto self = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(self_));
            auto tensors_ = checked_tensor_list_unwrap(tensors,"tensors",1, Backend::CPU, ScalarType::Char);
            THCharTensor_catArray(self_, tensors_.data(), tensors_.size(), dim);
            return self;
            break;
        }
        case ScalarType::Double: {
            auto self_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto self = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(self_));
            auto tensors_ = checked_tensor_list_unwrap(tensors,"tensors",1, Backend::CPU, ScalarType::Double);
            THDoubleTensor_catArray(self_, tensors_.data(), tensors_.size(), dim);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto self = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(self_));
            auto tensors_ = checked_tensor_list_unwrap(tensors,"tensors",1, Backend::CPU, ScalarType::Float);
            THFloatTensor_catArray(self_, tensors_.data(), tensors_.size(), dim);
            return self;
            break;
        }
        case ScalarType::Int: {
            auto self_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int>(), 0, allocator(), true),CPUTensorId()).release();
            auto self = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(self_));
            auto tensors_ = checked_tensor_list_unwrap(tensors,"tensors",1, Backend::CPU, ScalarType::Int);
            THIntTensor_catArray(self_, tensors_.data(), tensors_.size(), dim);
            return self;
            break;
        }
        case ScalarType::Long: {
            auto self_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int64_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto self = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(self_));
            auto tensors_ = checked_tensor_list_unwrap(tensors,"tensors",1, Backend::CPU, ScalarType::Long);
            THLongTensor_catArray(self_, tensors_.data(), tensors_.size(), dim);
            return self;
            break;
        }
        case ScalarType::Short: {
            auto self_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<int16_t>(), 0, allocator(), true),CPUTensorId()).release();
            auto self = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(self_));
            auto tensors_ = checked_tensor_list_unwrap(tensors,"tensors",1, Backend::CPU, ScalarType::Short);
            THShortTensor_catArray(self_, tensors_.data(), tensors_.size(), dim);
            return self;
            break;
        }
        case ScalarType::Half: {
            auto self_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<Half>(), 0, allocator(), true),CPUTensorId()).release();
            auto self = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(self_));
            auto tensors_ = checked_tensor_list_unwrap(tensors,"tensors",1, Backend::CPU, ScalarType::Half);
            THHalfTensor_catArray(self_, tensors_.data(), tensors_.size(), dim);
            return self;
            break;
        }
        default:
            AT_ERROR("_th_cat not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_binary_cross_entropy_forward_out(Tensor & output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CPU, ScalarType::Double);
            auto weight_ = checked_tensor_unwrap(weight,"weight",3, true, Backend::CPU, ScalarType::Double);
            auto output_ = checked_tensor_unwrap(output,"output",4, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleBCECriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction, weight_ ? weight_ : NULL);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CPU, ScalarType::Float);
            auto weight_ = checked_tensor_unwrap(weight,"weight",3, true, Backend::CPU, ScalarType::Float);
            auto output_ = checked_tensor_unwrap(output,"output",4, false, Backend::CPU, ScalarType::Float);
            THNN_FloatBCECriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction, weight_ ? weight_ : NULL);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_binary_cross_entropy_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_binary_cross_entropy_forward(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CPU, ScalarType::Double);
            auto weight_ = checked_tensor_unwrap(weight,"weight",3, true, Backend::CPU, ScalarType::Double);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_DoubleBCECriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction, weight_ ? weight_ : NULL);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CPU, ScalarType::Float);
            auto weight_ = checked_tensor_unwrap(weight,"weight",3, true, Backend::CPU, ScalarType::Float);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_FloatBCECriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction, weight_ ? weight_ : NULL);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_binary_cross_entropy_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_binary_cross_entropy_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CPU, ScalarType::Double);
            auto weight_ = checked_tensor_unwrap(weight,"weight",4, true, Backend::CPU, ScalarType::Double);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",5, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleBCECriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction, weight_ ? weight_ : NULL);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CPU, ScalarType::Float);
            auto weight_ = checked_tensor_unwrap(weight,"weight",4, true, Backend::CPU, ScalarType::Float);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",5, false, Backend::CPU, ScalarType::Float);
            THNN_FloatBCECriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction, weight_ ? weight_ : NULL);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_binary_cross_entropy_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_binary_cross_entropy_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CPU, ScalarType::Double);
            auto weight_ = checked_tensor_unwrap(weight,"weight",4, true, Backend::CPU, ScalarType::Double);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_DoubleBCECriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction, weight_ ? weight_ : NULL);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CPU, ScalarType::Float);
            auto weight_ = checked_tensor_unwrap(weight,"weight",4, true, Backend::CPU, ScalarType::Float);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_FloatBCECriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction, weight_ ? weight_ : NULL);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_binary_cross_entropy_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_l1_loss_forward_out(Tensor & output, const Tensor & self, const Tensor & target, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CPU, ScalarType::Double);
            auto output_ = checked_tensor_unwrap(output,"output",3, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleAbsCriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CPU, ScalarType::Float);
            auto output_ = checked_tensor_unwrap(output,"output",3, false, Backend::CPU, ScalarType::Float);
            THNN_FloatAbsCriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_l1_loss_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_l1_loss_forward(const Tensor & self, const Tensor & target, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CPU, ScalarType::Double);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_DoubleAbsCriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CPU, ScalarType::Float);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_FloatAbsCriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_l1_loss_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_l1_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CPU, ScalarType::Double);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",4, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleAbsCriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CPU, ScalarType::Float);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",4, false, Backend::CPU, ScalarType::Float);
            THNN_FloatAbsCriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_l1_loss_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_l1_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CPU, ScalarType::Double);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_DoubleAbsCriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CPU, ScalarType::Float);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_FloatAbsCriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_l1_loss_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_mse_loss_forward_out(Tensor & output, const Tensor & self, const Tensor & target, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CPU, ScalarType::Double);
            auto output_ = checked_tensor_unwrap(output,"output",3, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleMSECriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CPU, ScalarType::Float);
            auto output_ = checked_tensor_unwrap(output,"output",3, false, Backend::CPU, ScalarType::Float);
            THNN_FloatMSECriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_mse_loss_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_mse_loss_forward(const Tensor & self, const Tensor & target, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CPU, ScalarType::Double);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_DoubleMSECriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CPU, ScalarType::Float);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_FloatMSECriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_mse_loss_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_mse_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CPU, ScalarType::Double);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",4, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleMSECriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CPU, ScalarType::Float);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",4, false, Backend::CPU, ScalarType::Float);
            THNN_FloatMSECriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_mse_loss_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_mse_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CPU, ScalarType::Double);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_DoubleMSECriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CPU, ScalarType::Float);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_FloatMSECriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_mse_loss_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_multi_margin_loss_forward_out(Tensor & output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CPU, ScalarType::Long);
            auto p_ = p.toDouble();
            auto margin_ = margin.toDouble();
            auto weight_ = checked_tensor_unwrap(weight,"weight",5, true, Backend::CPU, ScalarType::Double);
            auto output_ = checked_tensor_unwrap(output,"output",6, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleMultiMarginCriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction, p_, weight_ ? weight_ : NULL, margin_);
            output_->maybe_zero_dim(reduction != Reduction::None || self_->dim() == 0 || (reduction == Reduction::None && self_->dim() == 1));
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CPU, ScalarType::Long);
            auto p_ = p.toDouble();
            auto margin_ = margin.toDouble();
            auto weight_ = checked_tensor_unwrap(weight,"weight",5, true, Backend::CPU, ScalarType::Float);
            auto output_ = checked_tensor_unwrap(output,"output",6, false, Backend::CPU, ScalarType::Float);
            THNN_FloatMultiMarginCriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction, p_, weight_ ? weight_ : NULL, margin_);
            output_->maybe_zero_dim(reduction != Reduction::None || self_->dim() == 0 || (reduction == Reduction::None && self_->dim() == 1));
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_multi_margin_loss_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_multi_margin_loss_forward(const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CPU, ScalarType::Long);
            auto p_ = p.toDouble();
            auto margin_ = margin.toDouble();
            auto weight_ = checked_tensor_unwrap(weight,"weight",5, true, Backend::CPU, ScalarType::Double);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_DoubleMultiMarginCriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction, p_, weight_ ? weight_ : NULL, margin_);
            output_->maybe_zero_dim(reduction != Reduction::None || self_->dim() == 0 || (reduction == Reduction::None && self_->dim() == 1));
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CPU, ScalarType::Long);
            auto p_ = p.toDouble();
            auto margin_ = margin.toDouble();
            auto weight_ = checked_tensor_unwrap(weight,"weight",5, true, Backend::CPU, ScalarType::Float);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_FloatMultiMarginCriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction, p_, weight_ ? weight_ : NULL, margin_);
            output_->maybe_zero_dim(reduction != Reduction::None || self_->dim() == 0 || (reduction == Reduction::None && self_->dim() == 1));
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_multi_margin_loss_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_multi_margin_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CPU, ScalarType::Long);
            auto p_ = p.toDouble();
            auto margin_ = margin.toDouble();
            auto weight_ = checked_tensor_unwrap(weight,"weight",6, true, Backend::CPU, ScalarType::Double);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",7, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleMultiMarginCriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction, p_, weight_ ? weight_ : NULL, margin_);
            grad_input_->maybe_zero_dim(self_->dim() == 0);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CPU, ScalarType::Long);
            auto p_ = p.toDouble();
            auto margin_ = margin.toDouble();
            auto weight_ = checked_tensor_unwrap(weight,"weight",6, true, Backend::CPU, ScalarType::Float);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",7, false, Backend::CPU, ScalarType::Float);
            THNN_FloatMultiMarginCriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction, p_, weight_ ? weight_ : NULL, margin_);
            grad_input_->maybe_zero_dim(self_->dim() == 0);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_multi_margin_loss_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_multi_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CPU, ScalarType::Long);
            auto p_ = p.toDouble();
            auto margin_ = margin.toDouble();
            auto weight_ = checked_tensor_unwrap(weight,"weight",6, true, Backend::CPU, ScalarType::Double);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_DoubleMultiMarginCriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction, p_, weight_ ? weight_ : NULL, margin_);
            grad_input_->maybe_zero_dim(self_->dim() == 0);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CPU, ScalarType::Long);
            auto p_ = p.toDouble();
            auto margin_ = margin.toDouble();
            auto weight_ = checked_tensor_unwrap(weight,"weight",6, true, Backend::CPU, ScalarType::Float);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_FloatMultiMarginCriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction, p_, weight_ ? weight_ : NULL, margin_);
            grad_input_->maybe_zero_dim(self_->dim() == 0);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_multi_margin_loss_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor &,Tensor &> CPUType::_thnn_multilabel_margin_loss_forward_out(Tensor & output, Tensor & is_target, const Tensor & self, const Tensor & target, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CPU, ScalarType::Long);
            auto output_ = checked_tensor_unwrap(output,"output",3, false, Backend::CPU, ScalarType::Double);
            auto is_target_ = checked_tensor_unwrap(is_target,"is_target",3, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleMultiLabelMarginCriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, is_target_, reduction);
            output_->maybe_zero_dim(reduction != Reduction::None || self_->dim() == 0);
            is_target_->maybe_zero_dim(target_->dim() == 0);
            return std::tuple<Tensor &, Tensor &>(output, is_target);
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CPU, ScalarType::Long);
            auto output_ = checked_tensor_unwrap(output,"output",3, false, Backend::CPU, ScalarType::Float);
            auto is_target_ = checked_tensor_unwrap(is_target,"is_target",3, false, Backend::CPU, ScalarType::Float);
            THNN_FloatMultiLabelMarginCriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, is_target_, reduction);
            output_->maybe_zero_dim(reduction != Reduction::None || self_->dim() == 0);
            is_target_->maybe_zero_dim(target_->dim() == 0);
            return std::tuple<Tensor &, Tensor &>(output, is_target);
            break;
        }
        default:
            AT_ERROR("_thnn_multilabel_margin_loss_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor> CPUType::_thnn_multilabel_margin_loss_forward(const Tensor & self, const Tensor & target, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CPU, ScalarType::Long);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            auto is_target_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto is_target = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(is_target_));
            THNN_DoubleMultiLabelMarginCriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, is_target_, reduction);
            output_->maybe_zero_dim(reduction != Reduction::None || self_->dim() == 0);
            is_target_->maybe_zero_dim(target_->dim() == 0);
            return std::tuple<Tensor, Tensor>(output, is_target);
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CPU, ScalarType::Long);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            auto is_target_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto is_target = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(is_target_));
            THNN_FloatMultiLabelMarginCriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, is_target_, reduction);
            output_->maybe_zero_dim(reduction != Reduction::None || self_->dim() == 0);
            is_target_->maybe_zero_dim(target_->dim() == 0);
            return std::tuple<Tensor, Tensor>(output, is_target);
            break;
        }
        default:
            AT_ERROR("_thnn_multilabel_margin_loss_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_multilabel_margin_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, const Tensor & is_target) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CPU, ScalarType::Long);
            auto is_target_ = checked_tensor_unwrap(is_target,"is_target",5, false, Backend::CPU, ScalarType::Double);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",5, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleMultiLabelMarginCriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, is_target_, reduction);
            grad_input_->maybe_zero_dim(self_->dim() == 0);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CPU, ScalarType::Long);
            auto is_target_ = checked_tensor_unwrap(is_target,"is_target",5, false, Backend::CPU, ScalarType::Float);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",5, false, Backend::CPU, ScalarType::Float);
            THNN_FloatMultiLabelMarginCriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, is_target_, reduction);
            grad_input_->maybe_zero_dim(self_->dim() == 0);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_multilabel_margin_loss_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_multilabel_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, const Tensor & is_target) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CPU, ScalarType::Long);
            auto is_target_ = checked_tensor_unwrap(is_target,"is_target",5, false, Backend::CPU, ScalarType::Double);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_DoubleMultiLabelMarginCriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, is_target_, reduction);
            grad_input_->maybe_zero_dim(self_->dim() == 0);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CPU, ScalarType::Long);
            auto is_target_ = checked_tensor_unwrap(is_target,"is_target",5, false, Backend::CPU, ScalarType::Float);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_FloatMultiLabelMarginCriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, is_target_, reduction);
            grad_input_->maybe_zero_dim(self_->dim() == 0);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_multilabel_margin_loss_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor &,Tensor &> CPUType::_thnn_nll_loss_forward_out(Tensor & output, Tensor & total_weight, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CPU, ScalarType::Long);
            auto weight_ = checked_tensor_unwrap(weight,"weight",3, true, Backend::CPU, ScalarType::Double);
            auto output_ = checked_tensor_unwrap(output,"output",5, false, Backend::CPU, ScalarType::Double);
            auto total_weight_ = checked_tensor_unwrap(total_weight,"total_weight",5, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleClassNLLCriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction, weight_ ? weight_ : NULL, total_weight_, ignore_index);
            output_->maybe_zero_dim(reduction != Reduction::None || self_->dim() == 0);
            total_weight_->maybe_zero_dim(true);
            return std::tuple<Tensor &, Tensor &>(output, total_weight);
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CPU, ScalarType::Long);
            auto weight_ = checked_tensor_unwrap(weight,"weight",3, true, Backend::CPU, ScalarType::Float);
            auto output_ = checked_tensor_unwrap(output,"output",5, false, Backend::CPU, ScalarType::Float);
            auto total_weight_ = checked_tensor_unwrap(total_weight,"total_weight",5, false, Backend::CPU, ScalarType::Float);
            THNN_FloatClassNLLCriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction, weight_ ? weight_ : NULL, total_weight_, ignore_index);
            output_->maybe_zero_dim(reduction != Reduction::None || self_->dim() == 0);
            total_weight_->maybe_zero_dim(true);
            return std::tuple<Tensor &, Tensor &>(output, total_weight);
            break;
        }
        default:
            AT_ERROR("_thnn_nll_loss_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor> CPUType::_thnn_nll_loss_forward(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CPU, ScalarType::Long);
            auto weight_ = checked_tensor_unwrap(weight,"weight",3, true, Backend::CPU, ScalarType::Double);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            auto total_weight_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto total_weight = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(total_weight_));
            THNN_DoubleClassNLLCriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction, weight_ ? weight_ : NULL, total_weight_, ignore_index);
            output_->maybe_zero_dim(reduction != Reduction::None || self_->dim() == 0);
            total_weight_->maybe_zero_dim(true);
            return std::tuple<Tensor, Tensor>(output, total_weight);
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CPU, ScalarType::Long);
            auto weight_ = checked_tensor_unwrap(weight,"weight",3, true, Backend::CPU, ScalarType::Float);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            auto total_weight_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto total_weight = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(total_weight_));
            THNN_FloatClassNLLCriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction, weight_ ? weight_ : NULL, total_weight_, ignore_index);
            output_->maybe_zero_dim(reduction != Reduction::None || self_->dim() == 0);
            total_weight_->maybe_zero_dim(true);
            return std::tuple<Tensor, Tensor>(output, total_weight);
            break;
        }
        default:
            AT_ERROR("_thnn_nll_loss_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_nll_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CPU, ScalarType::Long);
            auto weight_ = checked_tensor_unwrap(weight,"weight",4, true, Backend::CPU, ScalarType::Double);
            auto total_weight_ = checked_tensor_unwrap(total_weight,"total_weight",7, false, Backend::CPU, ScalarType::Double);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",7, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleClassNLLCriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction, weight_ ? weight_ : NULL, total_weight_, ignore_index);
            grad_input_->maybe_zero_dim(self_->dim() == 0);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CPU, ScalarType::Long);
            auto weight_ = checked_tensor_unwrap(weight,"weight",4, true, Backend::CPU, ScalarType::Float);
            auto total_weight_ = checked_tensor_unwrap(total_weight,"total_weight",7, false, Backend::CPU, ScalarType::Float);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",7, false, Backend::CPU, ScalarType::Float);
            THNN_FloatClassNLLCriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction, weight_ ? weight_ : NULL, total_weight_, ignore_index);
            grad_input_->maybe_zero_dim(self_->dim() == 0);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_nll_loss_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_nll_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CPU, ScalarType::Long);
            auto weight_ = checked_tensor_unwrap(weight,"weight",4, true, Backend::CPU, ScalarType::Double);
            auto total_weight_ = checked_tensor_unwrap(total_weight,"total_weight",7, false, Backend::CPU, ScalarType::Double);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_DoubleClassNLLCriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction, weight_ ? weight_ : NULL, total_weight_, ignore_index);
            grad_input_->maybe_zero_dim(self_->dim() == 0);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CPU, ScalarType::Long);
            auto weight_ = checked_tensor_unwrap(weight,"weight",4, true, Backend::CPU, ScalarType::Float);
            auto total_weight_ = checked_tensor_unwrap(total_weight,"total_weight",7, false, Backend::CPU, ScalarType::Float);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_FloatClassNLLCriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction, weight_ ? weight_ : NULL, total_weight_, ignore_index);
            grad_input_->maybe_zero_dim(self_->dim() == 0);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_nll_loss_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor &,Tensor &> CPUType::_thnn_nll_loss2d_forward_out(Tensor & output, Tensor & total_weight, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CPU, ScalarType::Long);
            auto weight_ = checked_tensor_unwrap(weight,"weight",3, true, Backend::CPU, ScalarType::Double);
            auto output_ = checked_tensor_unwrap(output,"output",5, false, Backend::CPU, ScalarType::Double);
            auto total_weight_ = checked_tensor_unwrap(total_weight,"total_weight",5, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleSpatialClassNLLCriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction, weight_ ? weight_ : NULL, total_weight_, ignore_index);
            output_->maybe_zero_dim(reduction != Reduction::None || self_->dim() == 0);
            total_weight_->maybe_zero_dim(true);
            return std::tuple<Tensor &, Tensor &>(output, total_weight);
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CPU, ScalarType::Long);
            auto weight_ = checked_tensor_unwrap(weight,"weight",3, true, Backend::CPU, ScalarType::Float);
            auto output_ = checked_tensor_unwrap(output,"output",5, false, Backend::CPU, ScalarType::Float);
            auto total_weight_ = checked_tensor_unwrap(total_weight,"total_weight",5, false, Backend::CPU, ScalarType::Float);
            THNN_FloatSpatialClassNLLCriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction, weight_ ? weight_ : NULL, total_weight_, ignore_index);
            output_->maybe_zero_dim(reduction != Reduction::None || self_->dim() == 0);
            total_weight_->maybe_zero_dim(true);
            return std::tuple<Tensor &, Tensor &>(output, total_weight);
            break;
        }
        default:
            AT_ERROR("_thnn_nll_loss2d_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor> CPUType::_thnn_nll_loss2d_forward(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CPU, ScalarType::Long);
            auto weight_ = checked_tensor_unwrap(weight,"weight",3, true, Backend::CPU, ScalarType::Double);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            auto total_weight_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto total_weight = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(total_weight_));
            THNN_DoubleSpatialClassNLLCriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction, weight_ ? weight_ : NULL, total_weight_, ignore_index);
            output_->maybe_zero_dim(reduction != Reduction::None || self_->dim() == 0);
            total_weight_->maybe_zero_dim(true);
            return std::tuple<Tensor, Tensor>(output, total_weight);
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CPU, ScalarType::Long);
            auto weight_ = checked_tensor_unwrap(weight,"weight",3, true, Backend::CPU, ScalarType::Float);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            auto total_weight_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto total_weight = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(total_weight_));
            THNN_FloatSpatialClassNLLCriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction, weight_ ? weight_ : NULL, total_weight_, ignore_index);
            output_->maybe_zero_dim(reduction != Reduction::None || self_->dim() == 0);
            total_weight_->maybe_zero_dim(true);
            return std::tuple<Tensor, Tensor>(output, total_weight);
            break;
        }
        default:
            AT_ERROR("_thnn_nll_loss2d_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_nll_loss2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CPU, ScalarType::Long);
            auto weight_ = checked_tensor_unwrap(weight,"weight",4, true, Backend::CPU, ScalarType::Double);
            auto total_weight_ = checked_tensor_unwrap(total_weight,"total_weight",7, false, Backend::CPU, ScalarType::Double);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",7, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleSpatialClassNLLCriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction, weight_ ? weight_ : NULL, total_weight_, ignore_index);
            grad_input_->maybe_zero_dim(self_->dim() == 0);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CPU, ScalarType::Long);
            auto weight_ = checked_tensor_unwrap(weight,"weight",4, true, Backend::CPU, ScalarType::Float);
            auto total_weight_ = checked_tensor_unwrap(total_weight,"total_weight",7, false, Backend::CPU, ScalarType::Float);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",7, false, Backend::CPU, ScalarType::Float);
            THNN_FloatSpatialClassNLLCriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction, weight_ ? weight_ : NULL, total_weight_, ignore_index);
            grad_input_->maybe_zero_dim(self_->dim() == 0);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_nll_loss2d_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_nll_loss2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CPU, ScalarType::Long);
            auto weight_ = checked_tensor_unwrap(weight,"weight",4, true, Backend::CPU, ScalarType::Double);
            auto total_weight_ = checked_tensor_unwrap(total_weight,"total_weight",7, false, Backend::CPU, ScalarType::Double);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_DoubleSpatialClassNLLCriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction, weight_ ? weight_ : NULL, total_weight_, ignore_index);
            grad_input_->maybe_zero_dim(self_->dim() == 0);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CPU, ScalarType::Long);
            auto weight_ = checked_tensor_unwrap(weight,"weight",4, true, Backend::CPU, ScalarType::Float);
            auto total_weight_ = checked_tensor_unwrap(total_weight,"total_weight",7, false, Backend::CPU, ScalarType::Float);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_FloatSpatialClassNLLCriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction, weight_ ? weight_ : NULL, total_weight_, ignore_index);
            grad_input_->maybe_zero_dim(self_->dim() == 0);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_nll_loss2d_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_smooth_l1_loss_forward_out(Tensor & output, const Tensor & self, const Tensor & target, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CPU, ScalarType::Double);
            auto output_ = checked_tensor_unwrap(output,"output",3, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleSmoothL1Criterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CPU, ScalarType::Float);
            auto output_ = checked_tensor_unwrap(output,"output",3, false, Backend::CPU, ScalarType::Float);
            THNN_FloatSmoothL1Criterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_smooth_l1_loss_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_smooth_l1_loss_forward(const Tensor & self, const Tensor & target, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CPU, ScalarType::Double);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_DoubleSmoothL1Criterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CPU, ScalarType::Float);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_FloatSmoothL1Criterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_smooth_l1_loss_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_smooth_l1_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CPU, ScalarType::Double);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",4, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleSmoothL1Criterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CPU, ScalarType::Float);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",4, false, Backend::CPU, ScalarType::Float);
            THNN_FloatSmoothL1Criterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_smooth_l1_loss_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_smooth_l1_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CPU, ScalarType::Double);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_DoubleSmoothL1Criterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CPU, ScalarType::Float);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_FloatSmoothL1Criterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_smooth_l1_loss_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_soft_margin_loss_forward_out(Tensor & output, const Tensor & self, const Tensor & target, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CPU, ScalarType::Double);
            auto output_ = checked_tensor_unwrap(output,"output",3, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleSoftMarginCriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CPU, ScalarType::Float);
            auto output_ = checked_tensor_unwrap(output,"output",3, false, Backend::CPU, ScalarType::Float);
            THNN_FloatSoftMarginCriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_soft_margin_loss_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_soft_margin_loss_forward(const Tensor & self, const Tensor & target, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CPU, ScalarType::Double);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_DoubleSoftMarginCriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto target_ = checked_tensor_unwrap(target,"target",2, false, Backend::CPU, ScalarType::Float);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_FloatSoftMarginCriterion_updateOutput(globalContext().getTHCState(), self_, target_, output_, reduction);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_soft_margin_loss_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_soft_margin_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CPU, ScalarType::Double);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",4, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleSoftMarginCriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CPU, ScalarType::Float);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",4, false, Backend::CPU, ScalarType::Float);
            THNN_FloatSoftMarginCriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_soft_margin_loss_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_soft_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CPU, ScalarType::Double);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_DoubleSoftMarginCriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto target_ = checked_tensor_unwrap(target,"target",3, false, Backend::CPU, ScalarType::Float);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_FloatSoftMarginCriterion_updateGradInput(globalContext().getTHCState(), self_, target_, grad_output_, grad_input_, reduction);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_soft_margin_loss_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_elu_forward_out(Tensor & output, const Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto alpha_ = alpha.toDouble();
            auto scale_ = scale.toDouble();
            auto input_scale_ = input_scale.toDouble();
            auto output_ = checked_tensor_unwrap(output,"output",4, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleELU_updateOutput(globalContext().getTHCState(), self_, output_, alpha_, scale_, input_scale_, false);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto alpha_ = alpha.toDouble();
            auto scale_ = scale.toDouble();
            auto input_scale_ = input_scale.toDouble();
            auto output_ = checked_tensor_unwrap(output,"output",4, false, Backend::CPU, ScalarType::Float);
            THNN_FloatELU_updateOutput(globalContext().getTHCState(), self_, output_, alpha_, scale_, input_scale_, false);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_elu_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_elu_forward(const Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto alpha_ = alpha.toDouble();
            auto scale_ = scale.toDouble();
            auto input_scale_ = input_scale.toDouble();
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_DoubleELU_updateOutput(globalContext().getTHCState(), self_, output_, alpha_, scale_, input_scale_, false);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto alpha_ = alpha.toDouble();
            auto scale_ = scale.toDouble();
            auto input_scale_ = input_scale.toDouble();
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_FloatELU_updateOutput(globalContext().getTHCState(), self_, output_, alpha_, scale_, input_scale_, false);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_elu_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_elu_backward_out(Tensor & grad_input, const Tensor & grad_output, Scalar alpha, Scalar scale, Scalar input_scale, const Tensor & output) const {
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    auto dispatch_scalar_type = infer_scalar_type(grad_input);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto alpha_ = alpha.toDouble();
            auto scale_ = scale.toDouble();
            auto input_scale_ = input_scale.toDouble();
            auto output_ = checked_tensor_unwrap(output,"output",5, false, Backend::CPU, ScalarType::Double);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",5, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleELU_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, output_, alpha_, scale_, input_scale_);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto alpha_ = alpha.toDouble();
            auto scale_ = scale.toDouble();
            auto input_scale_ = input_scale.toDouble();
            auto output_ = checked_tensor_unwrap(output,"output",5, false, Backend::CPU, ScalarType::Float);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",5, false, Backend::CPU, ScalarType::Float);
            THNN_FloatELU_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, output_, alpha_, scale_, input_scale_);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_elu_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_elu_backward(const Tensor & grad_output, Scalar alpha, Scalar scale, Scalar input_scale, const Tensor & output) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    auto dispatch_scalar_type = infer_scalar_type(grad_output);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto alpha_ = alpha.toDouble();
            auto scale_ = scale.toDouble();
            auto input_scale_ = input_scale.toDouble();
            auto output_ = checked_tensor_unwrap(output,"output",5, false, Backend::CPU, ScalarType::Double);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_DoubleELU_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, output_, alpha_, scale_, input_scale_);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto alpha_ = alpha.toDouble();
            auto scale_ = scale.toDouble();
            auto input_scale_ = input_scale.toDouble();
            auto output_ = checked_tensor_unwrap(output,"output",5, false, Backend::CPU, ScalarType::Float);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_FloatELU_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, output_, alpha_, scale_, input_scale_);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_elu_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_elu_forward_(Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto alpha_ = alpha.toDouble();
            auto scale_ = scale.toDouble();
            auto input_scale_ = input_scale.toDouble();
            THNN_DoubleELU_updateOutput(globalContext().getTHCState(), self_, self_, alpha_, scale_, input_scale_, true);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto alpha_ = alpha.toDouble();
            auto scale_ = scale.toDouble();
            auto input_scale_ = input_scale.toDouble();
            THNN_FloatELU_updateOutput(globalContext().getTHCState(), self_, self_, alpha_, scale_, input_scale_, true);
            return self;
            break;
        }
        default:
            AT_ERROR("_thnn_elu_forward_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_glu_forward_out(Tensor & output, const Tensor & self, int64_t dim) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            dim = maybe_wrap_dim(dim, self_);
            auto output_ = checked_tensor_unwrap(output,"output",2, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleGatedLinear_updateOutput(globalContext().getTHCState(), self_, output_, dim);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            dim = maybe_wrap_dim(dim, self_);
            auto output_ = checked_tensor_unwrap(output,"output",2, false, Backend::CPU, ScalarType::Float);
            THNN_FloatGatedLinear_updateOutput(globalContext().getTHCState(), self_, output_, dim);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_glu_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_glu_forward(const Tensor & self, int64_t dim) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            dim = maybe_wrap_dim(dim, self_);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_DoubleGatedLinear_updateOutput(globalContext().getTHCState(), self_, output_, dim);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            dim = maybe_wrap_dim(dim, self_);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_FloatGatedLinear_updateOutput(globalContext().getTHCState(), self_, output_, dim);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_glu_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_glu_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, int64_t dim) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            dim = maybe_wrap_dim(dim, self_);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",3, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleGatedLinear_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, dim);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            dim = maybe_wrap_dim(dim, self_);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",3, false, Backend::CPU, ScalarType::Float);
            THNN_FloatGatedLinear_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, dim);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_glu_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_glu_backward(const Tensor & grad_output, const Tensor & self, int64_t dim) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            dim = maybe_wrap_dim(dim, self_);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_DoubleGatedLinear_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, dim);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            dim = maybe_wrap_dim(dim, self_);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_FloatGatedLinear_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, dim);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_glu_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_hardtanh_forward_out(Tensor & output, const Tensor & self, Scalar min_val, Scalar max_val) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto min_val_ = min_val.toDouble();
            auto max_val_ = max_val.toDouble();
            auto output_ = checked_tensor_unwrap(output,"output",3, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleHardTanh_updateOutput(globalContext().getTHCState(), self_, output_, min_val_, max_val_, false);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto min_val_ = min_val.toDouble();
            auto max_val_ = max_val.toDouble();
            auto output_ = checked_tensor_unwrap(output,"output",3, false, Backend::CPU, ScalarType::Float);
            THNN_FloatHardTanh_updateOutput(globalContext().getTHCState(), self_, output_, min_val_, max_val_, false);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_hardtanh_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_hardtanh_forward(const Tensor & self, Scalar min_val, Scalar max_val) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto min_val_ = min_val.toDouble();
            auto max_val_ = max_val.toDouble();
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_DoubleHardTanh_updateOutput(globalContext().getTHCState(), self_, output_, min_val_, max_val_, false);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto min_val_ = min_val.toDouble();
            auto max_val_ = max_val.toDouble();
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_FloatHardTanh_updateOutput(globalContext().getTHCState(), self_, output_, min_val_, max_val_, false);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_hardtanh_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_hardtanh_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar min_val, Scalar max_val) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto min_val_ = min_val.toDouble();
            auto max_val_ = max_val.toDouble();
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",4, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleHardTanh_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, min_val_, max_val_, false);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto min_val_ = min_val.toDouble();
            auto max_val_ = max_val.toDouble();
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",4, false, Backend::CPU, ScalarType::Float);
            THNN_FloatHardTanh_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, min_val_, max_val_, false);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_hardtanh_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_hardtanh_backward(const Tensor & grad_output, const Tensor & self, Scalar min_val, Scalar max_val) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto min_val_ = min_val.toDouble();
            auto max_val_ = max_val.toDouble();
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_DoubleHardTanh_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, min_val_, max_val_, false);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto min_val_ = min_val.toDouble();
            auto max_val_ = max_val.toDouble();
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_FloatHardTanh_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, min_val_, max_val_, false);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_hardtanh_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_hardtanh_forward_(Tensor & self, Scalar min_val, Scalar max_val) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto min_val_ = min_val.toDouble();
            auto max_val_ = max_val.toDouble();
            THNN_DoubleHardTanh_updateOutput(globalContext().getTHCState(), self_, self_, min_val_, max_val_, true);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto min_val_ = min_val.toDouble();
            auto max_val_ = max_val.toDouble();
            THNN_FloatHardTanh_updateOutput(globalContext().getTHCState(), self_, self_, min_val_, max_val_, true);
            return self;
            break;
        }
        default:
            AT_ERROR("_thnn_hardtanh_forward_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_leaky_relu_forward_out(Tensor & output, const Tensor & self, Scalar negative_slope) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto negative_slope_ = negative_slope.toDouble();
            auto output_ = checked_tensor_unwrap(output,"output",2, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleLeakyReLU_updateOutput(globalContext().getTHCState(), self_, output_, negative_slope_, false);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto negative_slope_ = negative_slope.toDouble();
            auto output_ = checked_tensor_unwrap(output,"output",2, false, Backend::CPU, ScalarType::Float);
            THNN_FloatLeakyReLU_updateOutput(globalContext().getTHCState(), self_, output_, negative_slope_, false);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_leaky_relu_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_leaky_relu_forward(const Tensor & self, Scalar negative_slope) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto negative_slope_ = negative_slope.toDouble();
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_DoubleLeakyReLU_updateOutput(globalContext().getTHCState(), self_, output_, negative_slope_, false);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto negative_slope_ = negative_slope.toDouble();
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_FloatLeakyReLU_updateOutput(globalContext().getTHCState(), self_, output_, negative_slope_, false);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_leaky_relu_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_leaky_relu_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar negative_slope) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto negative_slope_ = negative_slope.toDouble();
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",3, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleLeakyReLU_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, negative_slope_, false);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto negative_slope_ = negative_slope.toDouble();
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",3, false, Backend::CPU, ScalarType::Float);
            THNN_FloatLeakyReLU_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, negative_slope_, false);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_leaky_relu_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_leaky_relu_backward(const Tensor & grad_output, const Tensor & self, Scalar negative_slope) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto negative_slope_ = negative_slope.toDouble();
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_DoubleLeakyReLU_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, negative_slope_, false);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto negative_slope_ = negative_slope.toDouble();
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_FloatLeakyReLU_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, negative_slope_, false);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_leaky_relu_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_leaky_relu_forward_(Tensor & self, Scalar negative_slope) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto negative_slope_ = negative_slope.toDouble();
            THNN_DoubleLeakyReLU_updateOutput(globalContext().getTHCState(), self_, self_, negative_slope_, true);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto negative_slope_ = negative_slope.toDouble();
            THNN_FloatLeakyReLU_updateOutput(globalContext().getTHCState(), self_, self_, negative_slope_, true);
            return self;
            break;
        }
        default:
            AT_ERROR("_thnn_leaky_relu_forward_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor &,Tensor &> CPUType::_thnn_log_sigmoid_forward_out(Tensor & output, Tensor & buffer, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto output_ = checked_tensor_unwrap(output,"output",1, false, Backend::CPU, ScalarType::Double);
            auto buffer_ = checked_tensor_unwrap(buffer,"buffer",1, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleLogSigmoid_updateOutput(globalContext().getTHCState(), self_, output_, buffer_);
            output_->maybe_zero_dim(false);
            buffer_->maybe_zero_dim(false);
            return std::tuple<Tensor &, Tensor &>(output, buffer);
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto output_ = checked_tensor_unwrap(output,"output",1, false, Backend::CPU, ScalarType::Float);
            auto buffer_ = checked_tensor_unwrap(buffer,"buffer",1, false, Backend::CPU, ScalarType::Float);
            THNN_FloatLogSigmoid_updateOutput(globalContext().getTHCState(), self_, output_, buffer_);
            output_->maybe_zero_dim(false);
            buffer_->maybe_zero_dim(false);
            return std::tuple<Tensor &, Tensor &>(output, buffer);
            break;
        }
        default:
            AT_ERROR("_thnn_log_sigmoid_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor> CPUType::_thnn_log_sigmoid_forward(const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            auto buffer_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto buffer = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(buffer_));
            THNN_DoubleLogSigmoid_updateOutput(globalContext().getTHCState(), self_, output_, buffer_);
            output_->maybe_zero_dim(false);
            buffer_->maybe_zero_dim(false);
            return std::tuple<Tensor, Tensor>(output, buffer);
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            auto buffer_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto buffer = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(buffer_));
            THNN_FloatLogSigmoid_updateOutput(globalContext().getTHCState(), self_, output_, buffer_);
            output_->maybe_zero_dim(false);
            buffer_->maybe_zero_dim(false);
            return std::tuple<Tensor, Tensor>(output, buffer);
            break;
        }
        default:
            AT_ERROR("_thnn_log_sigmoid_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_log_sigmoid_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & buffer) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto buffer_ = checked_tensor_unwrap(buffer,"buffer",3, false, Backend::CPU, ScalarType::Double);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",3, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleLogSigmoid_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, buffer_);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto buffer_ = checked_tensor_unwrap(buffer,"buffer",3, false, Backend::CPU, ScalarType::Float);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",3, false, Backend::CPU, ScalarType::Float);
            THNN_FloatLogSigmoid_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, buffer_);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_log_sigmoid_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_log_sigmoid_backward(const Tensor & grad_output, const Tensor & self, const Tensor & buffer) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto buffer_ = checked_tensor_unwrap(buffer,"buffer",3, false, Backend::CPU, ScalarType::Double);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_DoubleLogSigmoid_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, buffer_);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto buffer_ = checked_tensor_unwrap(buffer,"buffer",3, false, Backend::CPU, ScalarType::Float);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_FloatLogSigmoid_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, buffer_);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_log_sigmoid_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_rrelu_with_noise_forward_out(Tensor & output, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, Generator * generator) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto noise_ = checked_tensor_unwrap(noise,"noise",2, false, Backend::CPU, ScalarType::Double);
            auto lower_ = lower.toDouble();
            auto upper_ = upper.toDouble();
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            auto output_ = checked_tensor_unwrap(output,"output",6, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleRReLU_updateOutput(globalContext().getTHCState(), self_, output_, noise_, lower_, upper_, training, false, generator_->generator);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto noise_ = checked_tensor_unwrap(noise,"noise",2, false, Backend::CPU, ScalarType::Float);
            auto lower_ = lower.toDouble();
            auto upper_ = upper.toDouble();
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            auto output_ = checked_tensor_unwrap(output,"output",6, false, Backend::CPU, ScalarType::Float);
            THNN_FloatRReLU_updateOutput(globalContext().getTHCState(), self_, output_, noise_, lower_, upper_, training, false, generator_->generator);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_rrelu_with_noise_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_rrelu_with_noise_forward(const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, Generator * generator) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto noise_ = checked_tensor_unwrap(noise,"noise",2, false, Backend::CPU, ScalarType::Double);
            auto lower_ = lower.toDouble();
            auto upper_ = upper.toDouble();
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_DoubleRReLU_updateOutput(globalContext().getTHCState(), self_, output_, noise_, lower_, upper_, training, false, generator_->generator);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto noise_ = checked_tensor_unwrap(noise,"noise",2, false, Backend::CPU, ScalarType::Float);
            auto lower_ = lower.toDouble();
            auto upper_ = upper.toDouble();
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_FloatRReLU_updateOutput(globalContext().getTHCState(), self_, output_, noise_, lower_, upper_, training, false, generator_->generator);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_rrelu_with_noise_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_rrelu_with_noise_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto noise_ = checked_tensor_unwrap(noise,"noise",3, false, Backend::CPU, ScalarType::Double);
            auto lower_ = lower.toDouble();
            auto upper_ = upper.toDouble();
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",6, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleRReLU_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, noise_, lower_, upper_, training, false);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto noise_ = checked_tensor_unwrap(noise,"noise",3, false, Backend::CPU, ScalarType::Float);
            auto lower_ = lower.toDouble();
            auto upper_ = upper.toDouble();
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",6, false, Backend::CPU, ScalarType::Float);
            THNN_FloatRReLU_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, noise_, lower_, upper_, training, false);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_rrelu_with_noise_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_rrelu_with_noise_backward(const Tensor & grad_output, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto noise_ = checked_tensor_unwrap(noise,"noise",3, false, Backend::CPU, ScalarType::Double);
            auto lower_ = lower.toDouble();
            auto upper_ = upper.toDouble();
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_DoubleRReLU_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, noise_, lower_, upper_, training, false);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto noise_ = checked_tensor_unwrap(noise,"noise",3, false, Backend::CPU, ScalarType::Float);
            auto lower_ = lower.toDouble();
            auto upper_ = upper.toDouble();
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_FloatRReLU_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, noise_, lower_, upper_, training, false);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_rrelu_with_noise_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_rrelu_with_noise_forward_(Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, Generator * generator) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto noise_ = checked_tensor_unwrap(noise,"noise",2, false, Backend::CPU, ScalarType::Double);
            auto lower_ = lower.toDouble();
            auto upper_ = upper.toDouble();
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THNN_DoubleRReLU_updateOutput(globalContext().getTHCState(), self_, self_, noise_, lower_, upper_, training, true, generator_->generator);
            return self;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto noise_ = checked_tensor_unwrap(noise,"noise",2, false, Backend::CPU, ScalarType::Float);
            auto lower_ = lower.toDouble();
            auto upper_ = upper.toDouble();
            auto generator_ = check_generator<CPUGenerator>(generator, &globalContext().defaultGenerator(device_type()));
            THNN_FloatRReLU_updateOutput(globalContext().getTHCState(), self_, self_, noise_, lower_, upper_, training, true, generator_->generator);
            return self;
            break;
        }
        default:
            AT_ERROR("_thnn_rrelu_with_noise_forward_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_softplus_forward_out(Tensor & output, const Tensor & self, Scalar beta, Scalar threshold) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto beta_ = beta.toDouble();
            auto threshold_ = threshold.toDouble();
            auto output_ = checked_tensor_unwrap(output,"output",3, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleSoftPlus_updateOutput(globalContext().getTHCState(), self_, output_, beta_, threshold_);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto beta_ = beta.toDouble();
            auto threshold_ = threshold.toDouble();
            auto output_ = checked_tensor_unwrap(output,"output",3, false, Backend::CPU, ScalarType::Float);
            THNN_FloatSoftPlus_updateOutput(globalContext().getTHCState(), self_, output_, beta_, threshold_);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_softplus_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_softplus_forward(const Tensor & self, Scalar beta, Scalar threshold) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto beta_ = beta.toDouble();
            auto threshold_ = threshold.toDouble();
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_DoubleSoftPlus_updateOutput(globalContext().getTHCState(), self_, output_, beta_, threshold_);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto beta_ = beta.toDouble();
            auto threshold_ = threshold.toDouble();
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_FloatSoftPlus_updateOutput(globalContext().getTHCState(), self_, output_, beta_, threshold_);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_softplus_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_softplus_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar beta, Scalar threshold, const Tensor & output) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto beta_ = beta.toDouble();
            auto threshold_ = threshold.toDouble();
            auto output_ = checked_tensor_unwrap(output,"output",5, false, Backend::CPU, ScalarType::Double);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",5, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleSoftPlus_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, output_, beta_, threshold_);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto beta_ = beta.toDouble();
            auto threshold_ = threshold.toDouble();
            auto output_ = checked_tensor_unwrap(output,"output",5, false, Backend::CPU, ScalarType::Float);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",5, false, Backend::CPU, ScalarType::Float);
            THNN_FloatSoftPlus_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, output_, beta_, threshold_);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_softplus_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_softplus_backward(const Tensor & grad_output, const Tensor & self, Scalar beta, Scalar threshold, const Tensor & output) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto beta_ = beta.toDouble();
            auto threshold_ = threshold.toDouble();
            auto output_ = checked_tensor_unwrap(output,"output",5, false, Backend::CPU, ScalarType::Double);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_DoubleSoftPlus_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, output_, beta_, threshold_);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto beta_ = beta.toDouble();
            auto threshold_ = threshold.toDouble();
            auto output_ = checked_tensor_unwrap(output,"output",5, false, Backend::CPU, ScalarType::Float);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_FloatSoftPlus_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, output_, beta_, threshold_);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_softplus_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_softshrink_forward_out(Tensor & output, const Tensor & self, Scalar lambd) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto lambd_ = lambd.toDouble();
            auto output_ = checked_tensor_unwrap(output,"output",2, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleSoftShrink_updateOutput(globalContext().getTHCState(), self_, output_, lambd_);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto lambd_ = lambd.toDouble();
            auto output_ = checked_tensor_unwrap(output,"output",2, false, Backend::CPU, ScalarType::Float);
            THNN_FloatSoftShrink_updateOutput(globalContext().getTHCState(), self_, output_, lambd_);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_softshrink_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_softshrink_forward(const Tensor & self, Scalar lambd) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto lambd_ = lambd.toDouble();
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_DoubleSoftShrink_updateOutput(globalContext().getTHCState(), self_, output_, lambd_);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto lambd_ = lambd.toDouble();
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_FloatSoftShrink_updateOutput(globalContext().getTHCState(), self_, output_, lambd_);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_softshrink_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_softshrink_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar lambd) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto lambd_ = lambd.toDouble();
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",3, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleSoftShrink_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, lambd_);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto lambd_ = lambd.toDouble();
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",3, false, Backend::CPU, ScalarType::Float);
            THNN_FloatSoftShrink_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, lambd_);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_softshrink_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_softshrink_backward(const Tensor & grad_output, const Tensor & self, Scalar lambd) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto lambd_ = lambd.toDouble();
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_DoubleSoftShrink_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, lambd_);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto lambd_ = lambd.toDouble();
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_FloatSoftShrink_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, lambd_);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_softshrink_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_adaptive_avg_pool3d_forward_out(Tensor & output, const Tensor & self, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto output_size_ = check_intlist<3>(output_size, "output_size", 2);
            auto output_ = checked_tensor_unwrap(output,"output",2, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleVolumetricAdaptiveAveragePooling_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[2], output_size_[1]);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto output_size_ = check_intlist<3>(output_size, "output_size", 2);
            auto output_ = checked_tensor_unwrap(output,"output",2, false, Backend::CPU, ScalarType::Float);
            THNN_FloatVolumetricAdaptiveAveragePooling_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[2], output_size_[1]);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_adaptive_avg_pool3d_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_adaptive_avg_pool3d_forward(const Tensor & self, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto output_size_ = check_intlist<3>(output_size, "output_size", 2);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_DoubleVolumetricAdaptiveAveragePooling_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[2], output_size_[1]);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto output_size_ = check_intlist<3>(output_size, "output_size", 2);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_FloatVolumetricAdaptiveAveragePooling_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[2], output_size_[1]);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_adaptive_avg_pool3d_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_adaptive_avg_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",2, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleVolumetricAdaptiveAveragePooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",2, false, Backend::CPU, ScalarType::Float);
            THNN_FloatVolumetricAdaptiveAveragePooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_adaptive_avg_pool3d_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_adaptive_avg_pool3d_backward(const Tensor & grad_output, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_DoubleVolumetricAdaptiveAveragePooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_FloatVolumetricAdaptiveAveragePooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_adaptive_avg_pool3d_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_avg_pool2d_forward_out(Tensor & output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 2);
            auto stride_ = check_intlist<2>(stride, "stride", 3, kernel_size);
            auto padding_ = check_intlist<2>(padding, "padding", 4);
            auto output_ = checked_tensor_unwrap(output,"output",6, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleSpatialAveragePooling_updateOutput(globalContext().getTHCState(), self_, output_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], ceil_mode, count_include_pad);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 2);
            auto stride_ = check_intlist<2>(stride, "stride", 3, kernel_size);
            auto padding_ = check_intlist<2>(padding, "padding", 4);
            auto output_ = checked_tensor_unwrap(output,"output",6, false, Backend::CPU, ScalarType::Float);
            THNN_FloatSpatialAveragePooling_updateOutput(globalContext().getTHCState(), self_, output_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], ceil_mode, count_include_pad);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_avg_pool2d_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_avg_pool2d_forward(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 2);
            auto stride_ = check_intlist<2>(stride, "stride", 3, kernel_size);
            auto padding_ = check_intlist<2>(padding, "padding", 4);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_DoubleSpatialAveragePooling_updateOutput(globalContext().getTHCState(), self_, output_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], ceil_mode, count_include_pad);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 2);
            auto stride_ = check_intlist<2>(stride, "stride", 3, kernel_size);
            auto padding_ = check_intlist<2>(padding, "padding", 4);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_FloatSpatialAveragePooling_updateOutput(globalContext().getTHCState(), self_, output_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], ceil_mode, count_include_pad);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_avg_pool2d_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_avg_pool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
            auto stride_ = check_intlist<2>(stride, "stride", 4, kernel_size);
            auto padding_ = check_intlist<2>(padding, "padding", 5);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",7, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleSpatialAveragePooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], ceil_mode, count_include_pad);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
            auto stride_ = check_intlist<2>(stride, "stride", 4, kernel_size);
            auto padding_ = check_intlist<2>(padding, "padding", 5);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",7, false, Backend::CPU, ScalarType::Float);
            THNN_FloatSpatialAveragePooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], ceil_mode, count_include_pad);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_avg_pool2d_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_avg_pool2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
            auto stride_ = check_intlist<2>(stride, "stride", 4, kernel_size);
            auto padding_ = check_intlist<2>(padding, "padding", 5);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_DoubleSpatialAveragePooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], ceil_mode, count_include_pad);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
            auto stride_ = check_intlist<2>(stride, "stride", 4, kernel_size);
            auto padding_ = check_intlist<2>(padding, "padding", 5);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_FloatSpatialAveragePooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], ceil_mode, count_include_pad);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_avg_pool2d_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_avg_pool3d_forward_out(Tensor & output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 2);
            auto stride_ = check_intlist<3>(stride, "stride", 3, kernel_size);
            auto padding_ = check_intlist<3>(padding, "padding", 4);
            auto output_ = checked_tensor_unwrap(output,"output",6, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleVolumetricAveragePooling_updateOutput(globalContext().getTHCState(), self_, output_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], ceil_mode, count_include_pad);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 2);
            auto stride_ = check_intlist<3>(stride, "stride", 3, kernel_size);
            auto padding_ = check_intlist<3>(padding, "padding", 4);
            auto output_ = checked_tensor_unwrap(output,"output",6, false, Backend::CPU, ScalarType::Float);
            THNN_FloatVolumetricAveragePooling_updateOutput(globalContext().getTHCState(), self_, output_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], ceil_mode, count_include_pad);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_avg_pool3d_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_avg_pool3d_forward(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 2);
            auto stride_ = check_intlist<3>(stride, "stride", 3, kernel_size);
            auto padding_ = check_intlist<3>(padding, "padding", 4);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_DoubleVolumetricAveragePooling_updateOutput(globalContext().getTHCState(), self_, output_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], ceil_mode, count_include_pad);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 2);
            auto stride_ = check_intlist<3>(stride, "stride", 3, kernel_size);
            auto padding_ = check_intlist<3>(padding, "padding", 4);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_FloatVolumetricAveragePooling_updateOutput(globalContext().getTHCState(), self_, output_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], ceil_mode, count_include_pad);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_avg_pool3d_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_avg_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 3);
            auto stride_ = check_intlist<3>(stride, "stride", 4, kernel_size);
            auto padding_ = check_intlist<3>(padding, "padding", 5);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",7, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleVolumetricAveragePooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], ceil_mode, count_include_pad);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 3);
            auto stride_ = check_intlist<3>(stride, "stride", 4, kernel_size);
            auto padding_ = check_intlist<3>(padding, "padding", 5);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",7, false, Backend::CPU, ScalarType::Float);
            THNN_FloatVolumetricAveragePooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], ceil_mode, count_include_pad);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_avg_pool3d_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_avg_pool3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 3);
            auto stride_ = check_intlist<3>(stride, "stride", 4, kernel_size);
            auto padding_ = check_intlist<3>(padding, "padding", 5);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_DoubleVolumetricAveragePooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], ceil_mode, count_include_pad);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 3);
            auto stride_ = check_intlist<3>(stride, "stride", 4, kernel_size);
            auto padding_ = check_intlist<3>(padding, "padding", 5);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_FloatVolumetricAveragePooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], ceil_mode, count_include_pad);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_avg_pool3d_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor &,Tensor &> CPUType::_thnn_max_pool2d_with_indices_forward_out(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 2);
            auto stride_ = check_intlist<2>(stride, "stride", 3, kernel_size);
            auto padding_ = check_intlist<2>(padding, "padding", 4);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 5);
            auto output_ = checked_tensor_unwrap(output,"output",6, false, Backend::CPU, ScalarType::Double);
            auto indices_ = checked_tensor_unwrap(indices,"indices",6, false, Backend::CPU, ScalarType::Long);
            THNN_DoubleSpatialDilatedMaxPooling_updateOutput(globalContext().getTHCState(), self_, output_, indices_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0], ceil_mode);
            output_->maybe_zero_dim(false);
            return std::tuple<Tensor &, Tensor &>(output, indices);
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 2);
            auto stride_ = check_intlist<2>(stride, "stride", 3, kernel_size);
            auto padding_ = check_intlist<2>(padding, "padding", 4);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 5);
            auto output_ = checked_tensor_unwrap(output,"output",6, false, Backend::CPU, ScalarType::Float);
            auto indices_ = checked_tensor_unwrap(indices,"indices",6, false, Backend::CPU, ScalarType::Long);
            THNN_FloatSpatialDilatedMaxPooling_updateOutput(globalContext().getTHCState(), self_, output_, indices_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0], ceil_mode);
            output_->maybe_zero_dim(false);
            return std::tuple<Tensor &, Tensor &>(output, indices);
            break;
        }
        default:
            AT_ERROR("_thnn_max_pool2d_with_indices_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor> CPUType::_thnn_max_pool2d_with_indices_forward(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 2);
            auto stride_ = check_intlist<2>(stride, "stride", 3, kernel_size);
            auto padding_ = check_intlist<2>(padding, "padding", 4);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 5);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            auto indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(indices_));
            THNN_DoubleSpatialDilatedMaxPooling_updateOutput(globalContext().getTHCState(), self_, output_, indices_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0], ceil_mode);
            output_->maybe_zero_dim(false);
            return std::tuple<Tensor, Tensor>(output, indices);
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 2);
            auto stride_ = check_intlist<2>(stride, "stride", 3, kernel_size);
            auto padding_ = check_intlist<2>(padding, "padding", 4);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 5);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            auto indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(indices_));
            THNN_FloatSpatialDilatedMaxPooling_updateOutput(globalContext().getTHCState(), self_, output_, indices_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0], ceil_mode);
            output_->maybe_zero_dim(false);
            return std::tuple<Tensor, Tensor>(output, indices);
            break;
        }
        default:
            AT_ERROR("_thnn_max_pool2d_with_indices_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_max_pool2d_with_indices_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
            auto stride_ = check_intlist<2>(stride, "stride", 4, kernel_size);
            auto padding_ = check_intlist<2>(padding, "padding", 5);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 6);
            auto indices_ = checked_tensor_unwrap(indices,"indices",8, false, Backend::CPU, ScalarType::Long);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",8, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleSpatialDilatedMaxPooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, indices_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0], ceil_mode);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
            auto stride_ = check_intlist<2>(stride, "stride", 4, kernel_size);
            auto padding_ = check_intlist<2>(padding, "padding", 5);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 6);
            auto indices_ = checked_tensor_unwrap(indices,"indices",8, false, Backend::CPU, ScalarType::Long);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",8, false, Backend::CPU, ScalarType::Float);
            THNN_FloatSpatialDilatedMaxPooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, indices_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0], ceil_mode);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_max_pool2d_with_indices_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_max_pool2d_with_indices_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
            auto stride_ = check_intlist<2>(stride, "stride", 4, kernel_size);
            auto padding_ = check_intlist<2>(padding, "padding", 5);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 6);
            auto indices_ = checked_tensor_unwrap(indices,"indices",8, false, Backend::CPU, ScalarType::Long);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_DoubleSpatialDilatedMaxPooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, indices_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0], ceil_mode);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
            auto stride_ = check_intlist<2>(stride, "stride", 4, kernel_size);
            auto padding_ = check_intlist<2>(padding, "padding", 5);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 6);
            auto indices_ = checked_tensor_unwrap(indices,"indices",8, false, Backend::CPU, ScalarType::Long);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_FloatSpatialDilatedMaxPooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, indices_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0], ceil_mode);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_max_pool2d_with_indices_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor &,Tensor &> CPUType::_thnn_max_pool3d_with_indices_forward_out(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 2);
            auto stride_ = check_intlist<3>(stride, "stride", 3, kernel_size);
            auto padding_ = check_intlist<3>(padding, "padding", 4);
            auto dilation_ = check_intlist<3>(dilation, "dilation", 5);
            auto output_ = checked_tensor_unwrap(output,"output",6, false, Backend::CPU, ScalarType::Double);
            auto indices_ = checked_tensor_unwrap(indices,"indices",6, false, Backend::CPU, ScalarType::Long);
            THNN_DoubleVolumetricDilatedMaxPooling_updateOutput(globalContext().getTHCState(), self_, output_, indices_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1], ceil_mode);
            output_->maybe_zero_dim(false);
            return std::tuple<Tensor &, Tensor &>(output, indices);
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 2);
            auto stride_ = check_intlist<3>(stride, "stride", 3, kernel_size);
            auto padding_ = check_intlist<3>(padding, "padding", 4);
            auto dilation_ = check_intlist<3>(dilation, "dilation", 5);
            auto output_ = checked_tensor_unwrap(output,"output",6, false, Backend::CPU, ScalarType::Float);
            auto indices_ = checked_tensor_unwrap(indices,"indices",6, false, Backend::CPU, ScalarType::Long);
            THNN_FloatVolumetricDilatedMaxPooling_updateOutput(globalContext().getTHCState(), self_, output_, indices_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1], ceil_mode);
            output_->maybe_zero_dim(false);
            return std::tuple<Tensor &, Tensor &>(output, indices);
            break;
        }
        default:
            AT_ERROR("_thnn_max_pool3d_with_indices_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor> CPUType::_thnn_max_pool3d_with_indices_forward(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 2);
            auto stride_ = check_intlist<3>(stride, "stride", 3, kernel_size);
            auto padding_ = check_intlist<3>(padding, "padding", 4);
            auto dilation_ = check_intlist<3>(dilation, "dilation", 5);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            auto indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(indices_));
            THNN_DoubleVolumetricDilatedMaxPooling_updateOutput(globalContext().getTHCState(), self_, output_, indices_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1], ceil_mode);
            output_->maybe_zero_dim(false);
            return std::tuple<Tensor, Tensor>(output, indices);
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 2);
            auto stride_ = check_intlist<3>(stride, "stride", 3, kernel_size);
            auto padding_ = check_intlist<3>(padding, "padding", 4);
            auto dilation_ = check_intlist<3>(dilation, "dilation", 5);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            auto indices_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(scalarTypeToTypeMeta(ScalarType::Long), 0, allocator(), true),CPUTensorId()).release();
            auto indices = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(indices_));
            THNN_FloatVolumetricDilatedMaxPooling_updateOutput(globalContext().getTHCState(), self_, output_, indices_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1], ceil_mode);
            output_->maybe_zero_dim(false);
            return std::tuple<Tensor, Tensor>(output, indices);
            break;
        }
        default:
            AT_ERROR("_thnn_max_pool3d_with_indices_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_max_pool3d_with_indices_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 3);
            auto stride_ = check_intlist<3>(stride, "stride", 4, kernel_size);
            auto padding_ = check_intlist<3>(padding, "padding", 5);
            auto dilation_ = check_intlist<3>(dilation, "dilation", 6);
            auto indices_ = checked_tensor_unwrap(indices,"indices",8, false, Backend::CPU, ScalarType::Long);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",8, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleVolumetricDilatedMaxPooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, indices_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1], ceil_mode);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 3);
            auto stride_ = check_intlist<3>(stride, "stride", 4, kernel_size);
            auto padding_ = check_intlist<3>(padding, "padding", 5);
            auto dilation_ = check_intlist<3>(dilation, "dilation", 6);
            auto indices_ = checked_tensor_unwrap(indices,"indices",8, false, Backend::CPU, ScalarType::Long);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",8, false, Backend::CPU, ScalarType::Float);
            THNN_FloatVolumetricDilatedMaxPooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, indices_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1], ceil_mode);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_max_pool3d_with_indices_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_max_pool3d_with_indices_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 3);
            auto stride_ = check_intlist<3>(stride, "stride", 4, kernel_size);
            auto padding_ = check_intlist<3>(padding, "padding", 5);
            auto dilation_ = check_intlist<3>(dilation, "dilation", 6);
            auto indices_ = checked_tensor_unwrap(indices,"indices",8, false, Backend::CPU, ScalarType::Long);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_DoubleVolumetricDilatedMaxPooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, indices_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1], ceil_mode);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 3);
            auto stride_ = check_intlist<3>(stride, "stride", 4, kernel_size);
            auto padding_ = check_intlist<3>(padding, "padding", 5);
            auto dilation_ = check_intlist<3>(dilation, "dilation", 6);
            auto indices_ = checked_tensor_unwrap(indices,"indices",8, false, Backend::CPU, ScalarType::Long);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_FloatVolumetricDilatedMaxPooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, indices_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1], ceil_mode);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_max_pool3d_with_indices_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_max_unpool2d_forward_out(Tensor & output, const Tensor & self, const Tensor & indices, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto indices_ = checked_tensor_unwrap(indices,"indices",2, false, Backend::CPU, ScalarType::Long);
            auto output_size_ = check_intlist<2>(output_size, "output_size", 3);
            auto output_ = checked_tensor_unwrap(output,"output",3, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleSpatialMaxUnpooling_updateOutput(globalContext().getTHCState(), self_, output_, indices_, output_size_[1], output_size_[0]);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto indices_ = checked_tensor_unwrap(indices,"indices",2, false, Backend::CPU, ScalarType::Long);
            auto output_size_ = check_intlist<2>(output_size, "output_size", 3);
            auto output_ = checked_tensor_unwrap(output,"output",3, false, Backend::CPU, ScalarType::Float);
            THNN_FloatSpatialMaxUnpooling_updateOutput(globalContext().getTHCState(), self_, output_, indices_, output_size_[1], output_size_[0]);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_max_unpool2d_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_max_unpool2d_forward(const Tensor & self, const Tensor & indices, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto indices_ = checked_tensor_unwrap(indices,"indices",2, false, Backend::CPU, ScalarType::Long);
            auto output_size_ = check_intlist<2>(output_size, "output_size", 3);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_DoubleSpatialMaxUnpooling_updateOutput(globalContext().getTHCState(), self_, output_, indices_, output_size_[1], output_size_[0]);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto indices_ = checked_tensor_unwrap(indices,"indices",2, false, Backend::CPU, ScalarType::Long);
            auto output_size_ = check_intlist<2>(output_size, "output_size", 3);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_FloatSpatialMaxUnpooling_updateOutput(globalContext().getTHCState(), self_, output_, indices_, output_size_[1], output_size_[0]);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_max_unpool2d_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_max_unpool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto indices_ = checked_tensor_unwrap(indices,"indices",3, false, Backend::CPU, ScalarType::Long);
            auto output_size_ = check_intlist<2>(output_size, "output_size", 4);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",4, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleSpatialMaxUnpooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, indices_, output_size_[1], output_size_[0]);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto indices_ = checked_tensor_unwrap(indices,"indices",3, false, Backend::CPU, ScalarType::Long);
            auto output_size_ = check_intlist<2>(output_size, "output_size", 4);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",4, false, Backend::CPU, ScalarType::Float);
            THNN_FloatSpatialMaxUnpooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, indices_, output_size_[1], output_size_[0]);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_max_unpool2d_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_max_unpool2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto indices_ = checked_tensor_unwrap(indices,"indices",3, false, Backend::CPU, ScalarType::Long);
            auto output_size_ = check_intlist<2>(output_size, "output_size", 4);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_DoubleSpatialMaxUnpooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, indices_, output_size_[1], output_size_[0]);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto indices_ = checked_tensor_unwrap(indices,"indices",3, false, Backend::CPU, ScalarType::Long);
            auto output_size_ = check_intlist<2>(output_size, "output_size", 4);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_FloatSpatialMaxUnpooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, indices_, output_size_[1], output_size_[0]);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_max_unpool2d_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_max_unpool3d_forward_out(Tensor & output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto indices_ = checked_tensor_unwrap(indices,"indices",2, false, Backend::CPU, ScalarType::Long);
            auto output_size_ = check_intlist<3>(output_size, "output_size", 3);
            auto stride_ = check_intlist<3>(stride, "stride", 4);
            auto padding_ = check_intlist<3>(padding, "padding", 5);
            auto output_ = checked_tensor_unwrap(output,"output",5, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleVolumetricMaxUnpooling_updateOutput(globalContext().getTHCState(), self_, output_, indices_, output_size_[0], output_size_[2], output_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1]);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto indices_ = checked_tensor_unwrap(indices,"indices",2, false, Backend::CPU, ScalarType::Long);
            auto output_size_ = check_intlist<3>(output_size, "output_size", 3);
            auto stride_ = check_intlist<3>(stride, "stride", 4);
            auto padding_ = check_intlist<3>(padding, "padding", 5);
            auto output_ = checked_tensor_unwrap(output,"output",5, false, Backend::CPU, ScalarType::Float);
            THNN_FloatVolumetricMaxUnpooling_updateOutput(globalContext().getTHCState(), self_, output_, indices_, output_size_[0], output_size_[2], output_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1]);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_max_unpool3d_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_max_unpool3d_forward(const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto indices_ = checked_tensor_unwrap(indices,"indices",2, false, Backend::CPU, ScalarType::Long);
            auto output_size_ = check_intlist<3>(output_size, "output_size", 3);
            auto stride_ = check_intlist<3>(stride, "stride", 4);
            auto padding_ = check_intlist<3>(padding, "padding", 5);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_DoubleVolumetricMaxUnpooling_updateOutput(globalContext().getTHCState(), self_, output_, indices_, output_size_[0], output_size_[2], output_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1]);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto indices_ = checked_tensor_unwrap(indices,"indices",2, false, Backend::CPU, ScalarType::Long);
            auto output_size_ = check_intlist<3>(output_size, "output_size", 3);
            auto stride_ = check_intlist<3>(stride, "stride", 4);
            auto padding_ = check_intlist<3>(padding, "padding", 5);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_FloatVolumetricMaxUnpooling_updateOutput(globalContext().getTHCState(), self_, output_, indices_, output_size_[0], output_size_[2], output_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1]);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_max_unpool3d_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_max_unpool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto indices_ = checked_tensor_unwrap(indices,"indices",3, false, Backend::CPU, ScalarType::Long);
            auto output_size_ = check_intlist<3>(output_size, "output_size", 4);
            auto stride_ = check_intlist<3>(stride, "stride", 5);
            auto padding_ = check_intlist<3>(padding, "padding", 6);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",6, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleVolumetricMaxUnpooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, indices_, output_size_[0], output_size_[2], output_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1]);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto indices_ = checked_tensor_unwrap(indices,"indices",3, false, Backend::CPU, ScalarType::Long);
            auto output_size_ = check_intlist<3>(output_size, "output_size", 4);
            auto stride_ = check_intlist<3>(stride, "stride", 5);
            auto padding_ = check_intlist<3>(padding, "padding", 6);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",6, false, Backend::CPU, ScalarType::Float);
            THNN_FloatVolumetricMaxUnpooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, indices_, output_size_[0], output_size_[2], output_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1]);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_max_unpool3d_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_max_unpool3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto indices_ = checked_tensor_unwrap(indices,"indices",3, false, Backend::CPU, ScalarType::Long);
            auto output_size_ = check_intlist<3>(output_size, "output_size", 4);
            auto stride_ = check_intlist<3>(stride, "stride", 5);
            auto padding_ = check_intlist<3>(padding, "padding", 6);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_DoubleVolumetricMaxUnpooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, indices_, output_size_[0], output_size_[2], output_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1]);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto indices_ = checked_tensor_unwrap(indices,"indices",3, false, Backend::CPU, ScalarType::Long);
            auto output_size_ = check_intlist<3>(output_size, "output_size", 4);
            auto stride_ = check_intlist<3>(stride, "stride", 5);
            auto padding_ = check_intlist<3>(padding, "padding", 6);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_FloatVolumetricMaxUnpooling_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_, indices_, output_size_[0], output_size_[2], output_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1]);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_max_unpool3d_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_upsample_linear1d_forward_out(Tensor & output, const Tensor & self, IntArrayRef output_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto output_size_ = check_intlist<1>(output_size, "output_size", 2);
            auto output_ = checked_tensor_unwrap(output,"output",3, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleTemporalUpSamplingLinear_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], align_corners);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto output_size_ = check_intlist<1>(output_size, "output_size", 2);
            auto output_ = checked_tensor_unwrap(output,"output",3, false, Backend::CPU, ScalarType::Float);
            THNN_FloatTemporalUpSamplingLinear_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], align_corners);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_upsample_linear1d_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_upsample_linear1d_forward(const Tensor & self, IntArrayRef output_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto output_size_ = check_intlist<1>(output_size, "output_size", 2);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_DoubleTemporalUpSamplingLinear_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], align_corners);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto output_size_ = check_intlist<1>(output_size, "output_size", 2);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_FloatTemporalUpSamplingLinear_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], align_corners);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_upsample_linear1d_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_upsample_linear1d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    auto dispatch_scalar_type = infer_scalar_type(grad_input);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto output_size_ = check_intlist<1>(output_size, "output_size", 2);
            auto input_size_ = check_intlist<3>(input_size, "input_size", 3);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",4, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleTemporalUpSamplingLinear_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], output_size_[0], align_corners);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto output_size_ = check_intlist<1>(output_size, "output_size", 2);
            auto input_size_ = check_intlist<3>(input_size, "input_size", 3);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",4, false, Backend::CPU, ScalarType::Float);
            THNN_FloatTemporalUpSamplingLinear_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], output_size_[0], align_corners);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_upsample_linear1d_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_upsample_linear1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    auto dispatch_scalar_type = infer_scalar_type(grad_output);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto output_size_ = check_intlist<1>(output_size, "output_size", 2);
            auto input_size_ = check_intlist<3>(input_size, "input_size", 3);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_DoubleTemporalUpSamplingLinear_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], output_size_[0], align_corners);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto output_size_ = check_intlist<1>(output_size, "output_size", 2);
            auto input_size_ = check_intlist<3>(input_size, "input_size", 3);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_FloatTemporalUpSamplingLinear_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], output_size_[0], align_corners);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_upsample_linear1d_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_upsample_bilinear2d_forward_out(Tensor & output, const Tensor & self, IntArrayRef output_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
            auto output_ = checked_tensor_unwrap(output,"output",3, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleSpatialUpSamplingBilinear_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[1], align_corners);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
            auto output_ = checked_tensor_unwrap(output,"output",3, false, Backend::CPU, ScalarType::Float);
            THNN_FloatSpatialUpSamplingBilinear_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[1], align_corners);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_upsample_bilinear2d_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_upsample_bilinear2d_forward(const Tensor & self, IntArrayRef output_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_DoubleSpatialUpSamplingBilinear_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[1], align_corners);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_FloatSpatialUpSamplingBilinear_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[1], align_corners);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_upsample_bilinear2d_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_upsample_bilinear2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    auto dispatch_scalar_type = infer_scalar_type(grad_input);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
            auto input_size_ = check_intlist<4>(input_size, "input_size", 3);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",4, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleSpatialUpSamplingBilinear_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], input_size_[3], output_size_[0], output_size_[1], align_corners);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
            auto input_size_ = check_intlist<4>(input_size, "input_size", 3);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",4, false, Backend::CPU, ScalarType::Float);
            THNN_FloatSpatialUpSamplingBilinear_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], input_size_[3], output_size_[0], output_size_[1], align_corners);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_upsample_bilinear2d_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_upsample_bilinear2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    auto dispatch_scalar_type = infer_scalar_type(grad_output);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
            auto input_size_ = check_intlist<4>(input_size, "input_size", 3);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_DoubleSpatialUpSamplingBilinear_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], input_size_[3], output_size_[0], output_size_[1], align_corners);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
            auto input_size_ = check_intlist<4>(input_size, "input_size", 3);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_FloatSpatialUpSamplingBilinear_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], input_size_[3], output_size_[0], output_size_[1], align_corners);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_upsample_bilinear2d_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_upsample_bicubic2d_forward_out(Tensor & output, const Tensor & self, IntArrayRef output_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
            auto output_ = checked_tensor_unwrap(output,"output",3, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleSpatialUpSamplingBicubic_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[1], align_corners);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
            auto output_ = checked_tensor_unwrap(output,"output",3, false, Backend::CPU, ScalarType::Float);
            THNN_FloatSpatialUpSamplingBicubic_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[1], align_corners);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_upsample_bicubic2d_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_upsample_bicubic2d_forward(const Tensor & self, IntArrayRef output_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_DoubleSpatialUpSamplingBicubic_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[1], align_corners);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_FloatSpatialUpSamplingBicubic_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[1], align_corners);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_upsample_bicubic2d_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_upsample_bicubic2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    auto dispatch_scalar_type = infer_scalar_type(grad_input);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
            auto input_size_ = check_intlist<4>(input_size, "input_size", 3);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",4, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleSpatialUpSamplingBicubic_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], input_size_[3], output_size_[0], output_size_[1], align_corners);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
            auto input_size_ = check_intlist<4>(input_size, "input_size", 3);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",4, false, Backend::CPU, ScalarType::Float);
            THNN_FloatSpatialUpSamplingBicubic_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], input_size_[3], output_size_[0], output_size_[1], align_corners);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_upsample_bicubic2d_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_upsample_bicubic2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    auto dispatch_scalar_type = infer_scalar_type(grad_output);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
            auto input_size_ = check_intlist<4>(input_size, "input_size", 3);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_DoubleSpatialUpSamplingBicubic_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], input_size_[3], output_size_[0], output_size_[1], align_corners);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
            auto input_size_ = check_intlist<4>(input_size, "input_size", 3);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_FloatSpatialUpSamplingBicubic_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], input_size_[3], output_size_[0], output_size_[1], align_corners);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_upsample_bicubic2d_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_upsample_trilinear3d_forward_out(Tensor & output, const Tensor & self, IntArrayRef output_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto output_size_ = check_intlist<3>(output_size, "output_size", 2);
            auto output_ = checked_tensor_unwrap(output,"output",3, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleVolumetricUpSamplingTrilinear_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[1], output_size_[2], align_corners);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto output_size_ = check_intlist<3>(output_size, "output_size", 2);
            auto output_ = checked_tensor_unwrap(output,"output",3, false, Backend::CPU, ScalarType::Float);
            THNN_FloatVolumetricUpSamplingTrilinear_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[1], output_size_[2], align_corners);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_upsample_trilinear3d_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_upsample_trilinear3d_forward(const Tensor & self, IntArrayRef output_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto output_size_ = check_intlist<3>(output_size, "output_size", 2);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_DoubleVolumetricUpSamplingTrilinear_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[1], output_size_[2], align_corners);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto output_size_ = check_intlist<3>(output_size, "output_size", 2);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_FloatVolumetricUpSamplingTrilinear_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[1], output_size_[2], align_corners);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_upsample_trilinear3d_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_upsample_trilinear3d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    auto dispatch_scalar_type = infer_scalar_type(grad_input);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto output_size_ = check_intlist<3>(output_size, "output_size", 2);
            auto input_size_ = check_intlist<5>(input_size, "input_size", 3);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",4, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleVolumetricUpSamplingTrilinear_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], input_size_[3], input_size_[4], output_size_[0], output_size_[1], output_size_[2], align_corners);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto output_size_ = check_intlist<3>(output_size, "output_size", 2);
            auto input_size_ = check_intlist<5>(input_size, "input_size", 3);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",4, false, Backend::CPU, ScalarType::Float);
            THNN_FloatVolumetricUpSamplingTrilinear_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], input_size_[3], input_size_[4], output_size_[0], output_size_[1], output_size_[2], align_corners);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_upsample_trilinear3d_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_upsample_trilinear3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    auto dispatch_scalar_type = infer_scalar_type(grad_output);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto output_size_ = check_intlist<3>(output_size, "output_size", 2);
            auto input_size_ = check_intlist<5>(input_size, "input_size", 3);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_DoubleVolumetricUpSamplingTrilinear_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], input_size_[3], input_size_[4], output_size_[0], output_size_[1], output_size_[2], align_corners);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto output_size_ = check_intlist<3>(output_size, "output_size", 2);
            auto input_size_ = check_intlist<5>(input_size, "input_size", 3);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_FloatVolumetricUpSamplingTrilinear_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], input_size_[3], input_size_[4], output_size_[0], output_size_[1], output_size_[2], align_corners);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_upsample_trilinear3d_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_upsample_nearest1d_forward_out(Tensor & output, const Tensor & self, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto output_size_ = check_intlist<1>(output_size, "output_size", 2);
            auto output_ = checked_tensor_unwrap(output,"output",2, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleTemporalUpSamplingNearest_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0]);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto output_size_ = check_intlist<1>(output_size, "output_size", 2);
            auto output_ = checked_tensor_unwrap(output,"output",2, false, Backend::CPU, ScalarType::Float);
            THNN_FloatTemporalUpSamplingNearest_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0]);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_upsample_nearest1d_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_upsample_nearest1d_forward(const Tensor & self, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto output_size_ = check_intlist<1>(output_size, "output_size", 2);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_DoubleTemporalUpSamplingNearest_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0]);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto output_size_ = check_intlist<1>(output_size, "output_size", 2);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_FloatTemporalUpSamplingNearest_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0]);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_upsample_nearest1d_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_upsample_nearest1d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) const {
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    auto dispatch_scalar_type = infer_scalar_type(grad_input);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto output_size_ = check_intlist<1>(output_size, "output_size", 2);
            auto input_size_ = check_intlist<3>(input_size, "input_size", 3);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",3, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleTemporalUpSamplingNearest_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], output_size_[0]);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto output_size_ = check_intlist<1>(output_size, "output_size", 2);
            auto input_size_ = check_intlist<3>(input_size, "input_size", 3);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",3, false, Backend::CPU, ScalarType::Float);
            THNN_FloatTemporalUpSamplingNearest_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], output_size_[0]);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_upsample_nearest1d_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_upsample_nearest1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    auto dispatch_scalar_type = infer_scalar_type(grad_output);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto output_size_ = check_intlist<1>(output_size, "output_size", 2);
            auto input_size_ = check_intlist<3>(input_size, "input_size", 3);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_DoubleTemporalUpSamplingNearest_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], output_size_[0]);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto output_size_ = check_intlist<1>(output_size, "output_size", 2);
            auto input_size_ = check_intlist<3>(input_size, "input_size", 3);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_FloatTemporalUpSamplingNearest_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], output_size_[0]);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_upsample_nearest1d_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_upsample_nearest2d_forward_out(Tensor & output, const Tensor & self, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
            auto output_ = checked_tensor_unwrap(output,"output",2, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleSpatialUpSamplingNearest_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[1]);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
            auto output_ = checked_tensor_unwrap(output,"output",2, false, Backend::CPU, ScalarType::Float);
            THNN_FloatSpatialUpSamplingNearest_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[1]);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_upsample_nearest2d_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_upsample_nearest2d_forward(const Tensor & self, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_DoubleSpatialUpSamplingNearest_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[1]);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_FloatSpatialUpSamplingNearest_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[1]);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_upsample_nearest2d_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_upsample_nearest2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) const {
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    auto dispatch_scalar_type = infer_scalar_type(grad_input);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
            auto input_size_ = check_intlist<4>(input_size, "input_size", 3);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",3, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleSpatialUpSamplingNearest_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], input_size_[3], output_size_[0], output_size_[1]);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
            auto input_size_ = check_intlist<4>(input_size, "input_size", 3);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",3, false, Backend::CPU, ScalarType::Float);
            THNN_FloatSpatialUpSamplingNearest_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], input_size_[3], output_size_[0], output_size_[1]);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_upsample_nearest2d_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_upsample_nearest2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    auto dispatch_scalar_type = infer_scalar_type(grad_output);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
            auto input_size_ = check_intlist<4>(input_size, "input_size", 3);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_DoubleSpatialUpSamplingNearest_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], input_size_[3], output_size_[0], output_size_[1]);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
            auto input_size_ = check_intlist<4>(input_size, "input_size", 3);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_FloatSpatialUpSamplingNearest_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], input_size_[3], output_size_[0], output_size_[1]);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_upsample_nearest2d_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_upsample_nearest3d_forward_out(Tensor & output, const Tensor & self, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto output_size_ = check_intlist<3>(output_size, "output_size", 2);
            auto output_ = checked_tensor_unwrap(output,"output",2, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleVolumetricUpSamplingNearest_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[1], output_size_[2]);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto output_size_ = check_intlist<3>(output_size, "output_size", 2);
            auto output_ = checked_tensor_unwrap(output,"output",2, false, Backend::CPU, ScalarType::Float);
            THNN_FloatVolumetricUpSamplingNearest_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[1], output_size_[2]);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_upsample_nearest3d_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_upsample_nearest3d_forward(const Tensor & self, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto output_size_ = check_intlist<3>(output_size, "output_size", 2);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_DoubleVolumetricUpSamplingNearest_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[1], output_size_[2]);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto output_size_ = check_intlist<3>(output_size, "output_size", 2);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_FloatVolumetricUpSamplingNearest_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[1], output_size_[2]);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_upsample_nearest3d_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_upsample_nearest3d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) const {
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    auto dispatch_scalar_type = infer_scalar_type(grad_input);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto output_size_ = check_intlist<3>(output_size, "output_size", 2);
            auto input_size_ = check_intlist<5>(input_size, "input_size", 3);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",3, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleVolumetricUpSamplingNearest_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], input_size_[3], input_size_[4], output_size_[0], output_size_[1], output_size_[2]);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto output_size_ = check_intlist<3>(output_size, "output_size", 2);
            auto input_size_ = check_intlist<5>(input_size, "input_size", 3);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",3, false, Backend::CPU, ScalarType::Float);
            THNN_FloatVolumetricUpSamplingNearest_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], input_size_[3], input_size_[4], output_size_[0], output_size_[1], output_size_[2]);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_upsample_nearest3d_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_upsample_nearest3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    auto dispatch_scalar_type = infer_scalar_type(grad_output);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto output_size_ = check_intlist<3>(output_size, "output_size", 2);
            auto input_size_ = check_intlist<5>(input_size, "input_size", 3);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_DoubleVolumetricUpSamplingNearest_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], input_size_[3], input_size_[4], output_size_[0], output_size_[1], output_size_[2]);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto output_size_ = check_intlist<3>(output_size, "output_size", 2);
            auto input_size_ = check_intlist<5>(input_size, "input_size", 3);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_FloatVolumetricUpSamplingNearest_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], input_size_[2], input_size_[3], input_size_[4], output_size_[0], output_size_[1], output_size_[2]);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_upsample_nearest3d_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_sigmoid_forward_out(Tensor & output, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto output_ = checked_tensor_unwrap(output,"output",1, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleSigmoid_updateOutput(globalContext().getTHCState(), self_, output_);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto output_ = checked_tensor_unwrap(output,"output",1, false, Backend::CPU, ScalarType::Float);
            THNN_FloatSigmoid_updateOutput(globalContext().getTHCState(), self_, output_);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_sigmoid_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_sigmoid_forward(const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_DoubleSigmoid_updateOutput(globalContext().getTHCState(), self_, output_);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_FloatSigmoid_updateOutput(globalContext().getTHCState(), self_, output_);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_sigmoid_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_sigmoid_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & output) const {
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    auto dispatch_scalar_type = infer_scalar_type(grad_input);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto output_ = checked_tensor_unwrap(output,"output",2, false, Backend::CPU, ScalarType::Double);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",2, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleSigmoid_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, output_);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto output_ = checked_tensor_unwrap(output,"output",2, false, Backend::CPU, ScalarType::Float);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",2, false, Backend::CPU, ScalarType::Float);
            THNN_FloatSigmoid_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, output_);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_sigmoid_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_sigmoid_backward(const Tensor & grad_output, const Tensor & output) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    auto dispatch_scalar_type = infer_scalar_type(grad_output);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto output_ = checked_tensor_unwrap(output,"output",2, false, Backend::CPU, ScalarType::Double);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_DoubleSigmoid_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, output_);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto output_ = checked_tensor_unwrap(output,"output",2, false, Backend::CPU, ScalarType::Float);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_FloatSigmoid_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, output_);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_sigmoid_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_tanh_forward_out(Tensor & output, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto output_ = checked_tensor_unwrap(output,"output",1, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleTanh_updateOutput(globalContext().getTHCState(), self_, output_);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto output_ = checked_tensor_unwrap(output,"output",1, false, Backend::CPU, ScalarType::Float);
            THNN_FloatTanh_updateOutput(globalContext().getTHCState(), self_, output_);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_tanh_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_tanh_forward(const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_DoubleTanh_updateOutput(globalContext().getTHCState(), self_, output_);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_FloatTanh_updateOutput(globalContext().getTHCState(), self_, output_);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_tanh_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_tanh_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & output) const {
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    auto dispatch_scalar_type = infer_scalar_type(grad_input);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto output_ = checked_tensor_unwrap(output,"output",2, false, Backend::CPU, ScalarType::Double);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",2, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleTanh_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, output_);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto output_ = checked_tensor_unwrap(output,"output",2, false, Backend::CPU, ScalarType::Float);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",2, false, Backend::CPU, ScalarType::Float);
            THNN_FloatTanh_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, output_);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_tanh_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_tanh_backward(const Tensor & grad_output, const Tensor & output) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    auto dispatch_scalar_type = infer_scalar_type(grad_output);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto output_ = checked_tensor_unwrap(output,"output",2, false, Backend::CPU, ScalarType::Double);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_DoubleTanh_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, output_);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto output_ = checked_tensor_unwrap(output,"output",2, false, Backend::CPU, ScalarType::Float);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_FloatTanh_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, output_);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_tanh_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor &,Tensor &,Tensor &> CPUType::_thnn_conv_transpose2d_forward_out(Tensor & output, Tensor & columns, Tensor & ones, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto weight_ = checked_tensor_unwrap(weight,"weight",2, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
            auto bias_ = checked_tensor_unwrap(bias,"bias",4, true, Backend::CPU, ScalarType::Double);
            auto stride_ = check_intlist<2>(stride, "stride", 5);
            auto padding_ = check_intlist<2>(padding, "padding", 6);
            auto output_padding_ = check_intlist<2>(output_padding, "output_padding", 7);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 8);
            auto output_ = checked_tensor_unwrap(output,"output",8, false, Backend::CPU, ScalarType::Double);
            auto columns_ = checked_tensor_unwrap(columns,"columns",8, false, Backend::CPU, ScalarType::Double);
            auto ones_ = checked_tensor_unwrap(ones,"ones",8, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleSpatialFullDilatedConvolution_updateOutput(globalContext().getTHCState(), self_, output_, weight_, bias_ ? bias_ : NULL, columns_, ones_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0], output_padding_[1], output_padding_[0]);
            bool maybe_scalar = self_->dim() == 0 && weight_->dim() == 0 && (!bias_ || bias_->dim() == 0);
            output_->maybe_zero_dim(maybe_scalar);
            columns_->maybe_zero_dim(maybe_scalar);
            ones_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &, Tensor &>(output, columns, ones);
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto weight_ = checked_tensor_unwrap(weight,"weight",2, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
            auto bias_ = checked_tensor_unwrap(bias,"bias",4, true, Backend::CPU, ScalarType::Float);
            auto stride_ = check_intlist<2>(stride, "stride", 5);
            auto padding_ = check_intlist<2>(padding, "padding", 6);
            auto output_padding_ = check_intlist<2>(output_padding, "output_padding", 7);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 8);
            auto output_ = checked_tensor_unwrap(output,"output",8, false, Backend::CPU, ScalarType::Float);
            auto columns_ = checked_tensor_unwrap(columns,"columns",8, false, Backend::CPU, ScalarType::Float);
            auto ones_ = checked_tensor_unwrap(ones,"ones",8, false, Backend::CPU, ScalarType::Float);
            THNN_FloatSpatialFullDilatedConvolution_updateOutput(globalContext().getTHCState(), self_, output_, weight_, bias_ ? bias_ : NULL, columns_, ones_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0], output_padding_[1], output_padding_[0]);
            bool maybe_scalar = self_->dim() == 0 && weight_->dim() == 0 && (!bias_ || bias_->dim() == 0);
            output_->maybe_zero_dim(maybe_scalar);
            columns_->maybe_zero_dim(maybe_scalar);
            ones_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &, Tensor &>(output, columns, ones);
            break;
        }
        default:
            AT_ERROR("_thnn_conv_transpose2d_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor,Tensor> CPUType::_thnn_conv_transpose2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto weight_ = checked_tensor_unwrap(weight,"weight",2, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
            auto bias_ = checked_tensor_unwrap(bias,"bias",4, true, Backend::CPU, ScalarType::Double);
            auto stride_ = check_intlist<2>(stride, "stride", 5);
            auto padding_ = check_intlist<2>(padding, "padding", 6);
            auto output_padding_ = check_intlist<2>(output_padding, "output_padding", 7);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 8);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            auto columns_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto columns = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(columns_));
            auto ones_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto ones = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(ones_));
            THNN_DoubleSpatialFullDilatedConvolution_updateOutput(globalContext().getTHCState(), self_, output_, weight_, bias_ ? bias_ : NULL, columns_, ones_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0], output_padding_[1], output_padding_[0]);
            bool maybe_scalar = self_->dim() == 0 && weight_->dim() == 0 && (!bias_ || bias_->dim() == 0);
            output_->maybe_zero_dim(maybe_scalar);
            columns_->maybe_zero_dim(maybe_scalar);
            ones_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor, Tensor>(output, columns, ones);
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto weight_ = checked_tensor_unwrap(weight,"weight",2, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
            auto bias_ = checked_tensor_unwrap(bias,"bias",4, true, Backend::CPU, ScalarType::Float);
            auto stride_ = check_intlist<2>(stride, "stride", 5);
            auto padding_ = check_intlist<2>(padding, "padding", 6);
            auto output_padding_ = check_intlist<2>(output_padding, "output_padding", 7);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 8);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            auto columns_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto columns = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(columns_));
            auto ones_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto ones = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(ones_));
            THNN_FloatSpatialFullDilatedConvolution_updateOutput(globalContext().getTHCState(), self_, output_, weight_, bias_ ? bias_ : NULL, columns_, ones_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0], output_padding_[1], output_padding_[0]);
            bool maybe_scalar = self_->dim() == 0 && weight_->dim() == 0 && (!bias_ || bias_->dim() == 0);
            output_->maybe_zero_dim(maybe_scalar);
            columns_->maybe_zero_dim(maybe_scalar);
            ones_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor, Tensor>(output, columns, ones);
            break;
        }
        default:
            AT_ERROR("_thnn_conv_transpose2d_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor &,Tensor &,Tensor &> CPUType::_thnn_conv_transpose2d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto weight_ = checked_tensor_unwrap(weight,"weight",3, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 4);
            auto stride_ = check_intlist<2>(stride, "stride", 5);
            auto padding_ = check_intlist<2>(padding, "padding", 6);
            auto output_padding_ = check_intlist<2>(output_padding, "output_padding", 7);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 8);
            auto columns_ = checked_tensor_unwrap(columns,"columns",9, false, Backend::CPU, ScalarType::Double);
            auto ones_ = checked_tensor_unwrap(ones,"ones",10, false, Backend::CPU, ScalarType::Double);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",10, true, Backend::CPU, ScalarType::Double);
            auto grad_weight_ = checked_tensor_unwrap(grad_weight,"grad_weight",10, true, Backend::CPU, ScalarType::Double);
            if (grad_weight.defined()) {
                grad_weight.resize_(weight.sizes());
                grad_weight.zero_();
            }
            auto grad_bias_ = checked_tensor_unwrap(grad_bias,"grad_bias",10, true, Backend::CPU, ScalarType::Double);
            if (grad_bias.defined()) {
                grad_bias.resize_({ weight.size(1) });
                grad_bias.zero_();
            }
            if (grad_input_) THNN_DoubleSpatialFullDilatedConvolution_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_ ? grad_input_ : NULL, weight_, columns_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0], output_padding_[1], output_padding_[0]);
            if (grad_weight_ || grad_bias_) THNN_DoubleSpatialFullDilatedConvolution_accGradParameters(globalContext().getTHCState(), self_, grad_output_, grad_weight_ ? grad_weight_ : NULL, grad_bias_ ? grad_bias_ : NULL, columns_, ones_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0], output_padding_[1], output_padding_[0], 1);
            if (grad_input_) grad_input_->maybe_zero_dim(self_->dim() == 0);
            return std::tuple<Tensor &, Tensor &, Tensor &>(grad_input, grad_weight, grad_bias);
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto weight_ = checked_tensor_unwrap(weight,"weight",3, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 4);
            auto stride_ = check_intlist<2>(stride, "stride", 5);
            auto padding_ = check_intlist<2>(padding, "padding", 6);
            auto output_padding_ = check_intlist<2>(output_padding, "output_padding", 7);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 8);
            auto columns_ = checked_tensor_unwrap(columns,"columns",9, false, Backend::CPU, ScalarType::Float);
            auto ones_ = checked_tensor_unwrap(ones,"ones",10, false, Backend::CPU, ScalarType::Float);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",10, true, Backend::CPU, ScalarType::Float);
            auto grad_weight_ = checked_tensor_unwrap(grad_weight,"grad_weight",10, true, Backend::CPU, ScalarType::Float);
            if (grad_weight.defined()) {
                grad_weight.resize_(weight.sizes());
                grad_weight.zero_();
            }
            auto grad_bias_ = checked_tensor_unwrap(grad_bias,"grad_bias",10, true, Backend::CPU, ScalarType::Float);
            if (grad_bias.defined()) {
                grad_bias.resize_({ weight.size(1) });
                grad_bias.zero_();
            }
            if (grad_input_) THNN_FloatSpatialFullDilatedConvolution_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_ ? grad_input_ : NULL, weight_, columns_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0], output_padding_[1], output_padding_[0]);
            if (grad_weight_ || grad_bias_) THNN_FloatSpatialFullDilatedConvolution_accGradParameters(globalContext().getTHCState(), self_, grad_output_, grad_weight_ ? grad_weight_ : NULL, grad_bias_ ? grad_bias_ : NULL, columns_, ones_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0], output_padding_[1], output_padding_[0], 1);
            if (grad_input_) grad_input_->maybe_zero_dim(self_->dim() == 0);
            return std::tuple<Tensor &, Tensor &, Tensor &>(grad_input, grad_weight, grad_bias);
            break;
        }
        default:
            AT_ERROR("_thnn_conv_transpose2d_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor,Tensor> CPUType::_thnn_conv_transpose2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones, std::array<bool,3> output_mask) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto weight_ = checked_tensor_unwrap(weight,"weight",3, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 4);
            auto stride_ = check_intlist<2>(stride, "stride", 5);
            auto padding_ = check_intlist<2>(padding, "padding", 6);
            auto output_padding_ = check_intlist<2>(output_padding, "output_padding", 7);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 8);
            auto columns_ = checked_tensor_unwrap(columns,"columns",9, false, Backend::CPU, ScalarType::Double);
            auto ones_ = checked_tensor_unwrap(ones,"ones",10, false, Backend::CPU, ScalarType::Double);
            auto grad_input_ = output_mask[0] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release() : nullptr;
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_input_));
            auto grad_weight_ = output_mask[1] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release() : nullptr;
            auto grad_weight = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_weight_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_weight_));
            if (grad_weight.defined()) {
                grad_weight.resize_(weight.sizes());
                grad_weight.zero_();
            }
            auto grad_bias_ = output_mask[2] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release() : nullptr;
            auto grad_bias = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_bias_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_bias_));
            if (grad_bias.defined()) {
                grad_bias.resize_({ weight.size(1) });
                grad_bias.zero_();
            }
            if (grad_input_) THNN_DoubleSpatialFullDilatedConvolution_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_ ? grad_input_ : NULL, weight_, columns_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0], output_padding_[1], output_padding_[0]);
            if (grad_weight_ || grad_bias_) THNN_DoubleSpatialFullDilatedConvolution_accGradParameters(globalContext().getTHCState(), self_, grad_output_, grad_weight_ ? grad_weight_ : NULL, grad_bias_ ? grad_bias_ : NULL, columns_, ones_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0], output_padding_[1], output_padding_[0], 1);
            if (grad_input_) grad_input_->maybe_zero_dim(self_->dim() == 0);
            return std::tuple<Tensor, Tensor, Tensor>(grad_input, grad_weight, grad_bias);
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto weight_ = checked_tensor_unwrap(weight,"weight",3, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 4);
            auto stride_ = check_intlist<2>(stride, "stride", 5);
            auto padding_ = check_intlist<2>(padding, "padding", 6);
            auto output_padding_ = check_intlist<2>(output_padding, "output_padding", 7);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 8);
            auto columns_ = checked_tensor_unwrap(columns,"columns",9, false, Backend::CPU, ScalarType::Float);
            auto ones_ = checked_tensor_unwrap(ones,"ones",10, false, Backend::CPU, ScalarType::Float);
            auto grad_input_ = output_mask[0] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release() : nullptr;
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_input_));
            auto grad_weight_ = output_mask[1] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release() : nullptr;
            auto grad_weight = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_weight_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_weight_));
            if (grad_weight.defined()) {
                grad_weight.resize_(weight.sizes());
                grad_weight.zero_();
            }
            auto grad_bias_ = output_mask[2] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release() : nullptr;
            auto grad_bias = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_bias_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_bias_));
            if (grad_bias.defined()) {
                grad_bias.resize_({ weight.size(1) });
                grad_bias.zero_();
            }
            if (grad_input_) THNN_FloatSpatialFullDilatedConvolution_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_ ? grad_input_ : NULL, weight_, columns_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0], output_padding_[1], output_padding_[0]);
            if (grad_weight_ || grad_bias_) THNN_FloatSpatialFullDilatedConvolution_accGradParameters(globalContext().getTHCState(), self_, grad_output_, grad_weight_ ? grad_weight_ : NULL, grad_bias_ ? grad_bias_ : NULL, columns_, ones_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0], output_padding_[1], output_padding_[0], 1);
            if (grad_input_) grad_input_->maybe_zero_dim(self_->dim() == 0);
            return std::tuple<Tensor, Tensor, Tensor>(grad_input, grad_weight, grad_bias);
            break;
        }
        default:
            AT_ERROR("_thnn_conv_transpose2d_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor &,Tensor &,Tensor &> CPUType::_thnn_conv_transpose3d_forward_out(Tensor & output, Tensor & finput, Tensor & fgrad_input, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto weight_ = checked_tensor_unwrap(weight,"weight",2, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 3);
            auto bias_ = checked_tensor_unwrap(bias,"bias",4, true, Backend::CPU, ScalarType::Double);
            auto stride_ = check_intlist<3>(stride, "stride", 5);
            auto padding_ = check_intlist<3>(padding, "padding", 6);
            auto output_padding_ = check_intlist<3>(output_padding, "output_padding", 7);
            auto dilation_ = check_intlist<3>(dilation, "dilation", 8);
            auto output_ = checked_tensor_unwrap(output,"output",8, false, Backend::CPU, ScalarType::Double);
            auto finput_ = checked_tensor_unwrap(finput,"finput",8, false, Backend::CPU, ScalarType::Double);
            auto fgrad_input_ = checked_tensor_unwrap(fgrad_input,"fgrad_input",8, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleVolumetricFullDilatedConvolution_updateOutput(globalContext().getTHCState(), self_, output_, weight_, bias_ ? bias_ : NULL, finput_, fgrad_input_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1], output_padding_[0], output_padding_[2], output_padding_[1]);
            bool maybe_scalar = self_->dim() == 0 && weight_->dim() == 0 && (!bias_ || bias_->dim() == 0);
            output_->maybe_zero_dim(maybe_scalar);
            finput_->maybe_zero_dim(maybe_scalar);
            fgrad_input_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &, Tensor &>(output, finput, fgrad_input);
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto weight_ = checked_tensor_unwrap(weight,"weight",2, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 3);
            auto bias_ = checked_tensor_unwrap(bias,"bias",4, true, Backend::CPU, ScalarType::Float);
            auto stride_ = check_intlist<3>(stride, "stride", 5);
            auto padding_ = check_intlist<3>(padding, "padding", 6);
            auto output_padding_ = check_intlist<3>(output_padding, "output_padding", 7);
            auto dilation_ = check_intlist<3>(dilation, "dilation", 8);
            auto output_ = checked_tensor_unwrap(output,"output",8, false, Backend::CPU, ScalarType::Float);
            auto finput_ = checked_tensor_unwrap(finput,"finput",8, false, Backend::CPU, ScalarType::Float);
            auto fgrad_input_ = checked_tensor_unwrap(fgrad_input,"fgrad_input",8, false, Backend::CPU, ScalarType::Float);
            THNN_FloatVolumetricFullDilatedConvolution_updateOutput(globalContext().getTHCState(), self_, output_, weight_, bias_ ? bias_ : NULL, finput_, fgrad_input_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1], output_padding_[0], output_padding_[2], output_padding_[1]);
            bool maybe_scalar = self_->dim() == 0 && weight_->dim() == 0 && (!bias_ || bias_->dim() == 0);
            output_->maybe_zero_dim(maybe_scalar);
            finput_->maybe_zero_dim(maybe_scalar);
            fgrad_input_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &, Tensor &>(output, finput, fgrad_input);
            break;
        }
        default:
            AT_ERROR("_thnn_conv_transpose3d_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor,Tensor> CPUType::_thnn_conv_transpose3d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto weight_ = checked_tensor_unwrap(weight,"weight",2, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 3);
            auto bias_ = checked_tensor_unwrap(bias,"bias",4, true, Backend::CPU, ScalarType::Double);
            auto stride_ = check_intlist<3>(stride, "stride", 5);
            auto padding_ = check_intlist<3>(padding, "padding", 6);
            auto output_padding_ = check_intlist<3>(output_padding, "output_padding", 7);
            auto dilation_ = check_intlist<3>(dilation, "dilation", 8);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            auto finput_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto finput = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(finput_));
            auto fgrad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto fgrad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(fgrad_input_));
            THNN_DoubleVolumetricFullDilatedConvolution_updateOutput(globalContext().getTHCState(), self_, output_, weight_, bias_ ? bias_ : NULL, finput_, fgrad_input_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1], output_padding_[0], output_padding_[2], output_padding_[1]);
            bool maybe_scalar = self_->dim() == 0 && weight_->dim() == 0 && (!bias_ || bias_->dim() == 0);
            output_->maybe_zero_dim(maybe_scalar);
            finput_->maybe_zero_dim(maybe_scalar);
            fgrad_input_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor, Tensor>(output, finput, fgrad_input);
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto weight_ = checked_tensor_unwrap(weight,"weight",2, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 3);
            auto bias_ = checked_tensor_unwrap(bias,"bias",4, true, Backend::CPU, ScalarType::Float);
            auto stride_ = check_intlist<3>(stride, "stride", 5);
            auto padding_ = check_intlist<3>(padding, "padding", 6);
            auto output_padding_ = check_intlist<3>(output_padding, "output_padding", 7);
            auto dilation_ = check_intlist<3>(dilation, "dilation", 8);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            auto finput_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto finput = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(finput_));
            auto fgrad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto fgrad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(fgrad_input_));
            THNN_FloatVolumetricFullDilatedConvolution_updateOutput(globalContext().getTHCState(), self_, output_, weight_, bias_ ? bias_ : NULL, finput_, fgrad_input_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1], output_padding_[0], output_padding_[2], output_padding_[1]);
            bool maybe_scalar = self_->dim() == 0 && weight_->dim() == 0 && (!bias_ || bias_->dim() == 0);
            output_->maybe_zero_dim(maybe_scalar);
            finput_->maybe_zero_dim(maybe_scalar);
            fgrad_input_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor, Tensor>(output, finput, fgrad_input);
            break;
        }
        default:
            AT_ERROR("_thnn_conv_transpose3d_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor &,Tensor &,Tensor &> CPUType::_thnn_conv_transpose3d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & finput, const Tensor & fgrad_input) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto weight_ = checked_tensor_unwrap(weight,"weight",3, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 4);
            auto stride_ = check_intlist<3>(stride, "stride", 5);
            auto padding_ = check_intlist<3>(padding, "padding", 6);
            auto output_padding_ = check_intlist<3>(output_padding, "output_padding", 7);
            auto dilation_ = check_intlist<3>(dilation, "dilation", 8);
            auto finput_ = checked_tensor_unwrap(finput,"finput",9, false, Backend::CPU, ScalarType::Double);
            auto fgrad_input_ = checked_tensor_unwrap(fgrad_input,"fgrad_input",10, false, Backend::CPU, ScalarType::Double);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",10, true, Backend::CPU, ScalarType::Double);
            auto grad_weight_ = checked_tensor_unwrap(grad_weight,"grad_weight",10, true, Backend::CPU, ScalarType::Double);
            if (grad_weight.defined()) {
                grad_weight.resize_(weight.sizes());
                grad_weight.zero_();
            }
            auto grad_bias_ = checked_tensor_unwrap(grad_bias,"grad_bias",10, true, Backend::CPU, ScalarType::Double);
            if (grad_bias.defined()) {
                grad_bias.resize_({ weight.size(1) });
                grad_bias.zero_();
            }
            if (grad_input_) THNN_DoubleVolumetricFullDilatedConvolution_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_ ? grad_input_ : NULL, weight_, finput_, fgrad_input_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1], output_padding_[0], output_padding_[2], output_padding_[1]);
            if (grad_weight_ || grad_bias_) THNN_DoubleVolumetricFullDilatedConvolution_accGradParameters(globalContext().getTHCState(), self_, grad_output_, grad_weight_ ? grad_weight_ : NULL, grad_bias_ ? grad_bias_ : NULL, finput_, fgrad_input_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1], output_padding_[0], output_padding_[2], output_padding_[1], 1);
            if (grad_input_) grad_input_->maybe_zero_dim(self_->dim() == 0);
            return std::tuple<Tensor &, Tensor &, Tensor &>(grad_input, grad_weight, grad_bias);
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto weight_ = checked_tensor_unwrap(weight,"weight",3, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 4);
            auto stride_ = check_intlist<3>(stride, "stride", 5);
            auto padding_ = check_intlist<3>(padding, "padding", 6);
            auto output_padding_ = check_intlist<3>(output_padding, "output_padding", 7);
            auto dilation_ = check_intlist<3>(dilation, "dilation", 8);
            auto finput_ = checked_tensor_unwrap(finput,"finput",9, false, Backend::CPU, ScalarType::Float);
            auto fgrad_input_ = checked_tensor_unwrap(fgrad_input,"fgrad_input",10, false, Backend::CPU, ScalarType::Float);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",10, true, Backend::CPU, ScalarType::Float);
            auto grad_weight_ = checked_tensor_unwrap(grad_weight,"grad_weight",10, true, Backend::CPU, ScalarType::Float);
            if (grad_weight.defined()) {
                grad_weight.resize_(weight.sizes());
                grad_weight.zero_();
            }
            auto grad_bias_ = checked_tensor_unwrap(grad_bias,"grad_bias",10, true, Backend::CPU, ScalarType::Float);
            if (grad_bias.defined()) {
                grad_bias.resize_({ weight.size(1) });
                grad_bias.zero_();
            }
            if (grad_input_) THNN_FloatVolumetricFullDilatedConvolution_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_ ? grad_input_ : NULL, weight_, finput_, fgrad_input_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1], output_padding_[0], output_padding_[2], output_padding_[1]);
            if (grad_weight_ || grad_bias_) THNN_FloatVolumetricFullDilatedConvolution_accGradParameters(globalContext().getTHCState(), self_, grad_output_, grad_weight_ ? grad_weight_ : NULL, grad_bias_ ? grad_bias_ : NULL, finput_, fgrad_input_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1], output_padding_[0], output_padding_[2], output_padding_[1], 1);
            if (grad_input_) grad_input_->maybe_zero_dim(self_->dim() == 0);
            return std::tuple<Tensor &, Tensor &, Tensor &>(grad_input, grad_weight, grad_bias);
            break;
        }
        default:
            AT_ERROR("_thnn_conv_transpose3d_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor,Tensor> CPUType::_thnn_conv_transpose3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto weight_ = checked_tensor_unwrap(weight,"weight",3, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 4);
            auto stride_ = check_intlist<3>(stride, "stride", 5);
            auto padding_ = check_intlist<3>(padding, "padding", 6);
            auto output_padding_ = check_intlist<3>(output_padding, "output_padding", 7);
            auto dilation_ = check_intlist<3>(dilation, "dilation", 8);
            auto finput_ = checked_tensor_unwrap(finput,"finput",9, false, Backend::CPU, ScalarType::Double);
            auto fgrad_input_ = checked_tensor_unwrap(fgrad_input,"fgrad_input",10, false, Backend::CPU, ScalarType::Double);
            auto grad_input_ = output_mask[0] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release() : nullptr;
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_input_));
            auto grad_weight_ = output_mask[1] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release() : nullptr;
            auto grad_weight = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_weight_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_weight_));
            if (grad_weight.defined()) {
                grad_weight.resize_(weight.sizes());
                grad_weight.zero_();
            }
            auto grad_bias_ = output_mask[2] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release() : nullptr;
            auto grad_bias = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_bias_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_bias_));
            if (grad_bias.defined()) {
                grad_bias.resize_({ weight.size(1) });
                grad_bias.zero_();
            }
            if (grad_input_) THNN_DoubleVolumetricFullDilatedConvolution_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_ ? grad_input_ : NULL, weight_, finput_, fgrad_input_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1], output_padding_[0], output_padding_[2], output_padding_[1]);
            if (grad_weight_ || grad_bias_) THNN_DoubleVolumetricFullDilatedConvolution_accGradParameters(globalContext().getTHCState(), self_, grad_output_, grad_weight_ ? grad_weight_ : NULL, grad_bias_ ? grad_bias_ : NULL, finput_, fgrad_input_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1], output_padding_[0], output_padding_[2], output_padding_[1], 1);
            if (grad_input_) grad_input_->maybe_zero_dim(self_->dim() == 0);
            return std::tuple<Tensor, Tensor, Tensor>(grad_input, grad_weight, grad_bias);
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto weight_ = checked_tensor_unwrap(weight,"weight",3, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 4);
            auto stride_ = check_intlist<3>(stride, "stride", 5);
            auto padding_ = check_intlist<3>(padding, "padding", 6);
            auto output_padding_ = check_intlist<3>(output_padding, "output_padding", 7);
            auto dilation_ = check_intlist<3>(dilation, "dilation", 8);
            auto finput_ = checked_tensor_unwrap(finput,"finput",9, false, Backend::CPU, ScalarType::Float);
            auto fgrad_input_ = checked_tensor_unwrap(fgrad_input,"fgrad_input",10, false, Backend::CPU, ScalarType::Float);
            auto grad_input_ = output_mask[0] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release() : nullptr;
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_input_));
            auto grad_weight_ = output_mask[1] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release() : nullptr;
            auto grad_weight = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_weight_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_weight_));
            if (grad_weight.defined()) {
                grad_weight.resize_(weight.sizes());
                grad_weight.zero_();
            }
            auto grad_bias_ = output_mask[2] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release() : nullptr;
            auto grad_bias = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_bias_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_bias_));
            if (grad_bias.defined()) {
                grad_bias.resize_({ weight.size(1) });
                grad_bias.zero_();
            }
            if (grad_input_) THNN_FloatVolumetricFullDilatedConvolution_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_ ? grad_input_ : NULL, weight_, finput_, fgrad_input_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1], output_padding_[0], output_padding_[2], output_padding_[1]);
            if (grad_weight_ || grad_bias_) THNN_FloatVolumetricFullDilatedConvolution_accGradParameters(globalContext().getTHCState(), self_, grad_output_, grad_weight_ ? grad_weight_ : NULL, grad_bias_ ? grad_bias_ : NULL, finput_, fgrad_input_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1], output_padding_[0], output_padding_[2], output_padding_[1], 1);
            if (grad_input_) grad_input_->maybe_zero_dim(self_->dim() == 0);
            return std::tuple<Tensor, Tensor, Tensor>(grad_input, grad_weight, grad_bias);
            break;
        }
        default:
            AT_ERROR("_thnn_conv_transpose3d_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor &,Tensor &,Tensor &> CPUType::_thnn_conv2d_forward_out(Tensor & output, Tensor & finput, Tensor & fgrad_input, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto weight_ = checked_tensor_unwrap(weight,"weight",2, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
            auto bias_ = checked_tensor_unwrap(bias,"bias",4, true, Backend::CPU, ScalarType::Double);
            auto stride_ = check_intlist<2>(stride, "stride", 5);
            auto padding_ = check_intlist<2>(padding, "padding", 6);
            auto output_ = checked_tensor_unwrap(output,"output",6, false, Backend::CPU, ScalarType::Double);
            auto finput_ = checked_tensor_unwrap(finput,"finput",6, false, Backend::CPU, ScalarType::Double);
            auto fgrad_input_ = checked_tensor_unwrap(fgrad_input,"fgrad_input",6, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleSpatialConvolutionMM_updateOutput(globalContext().getTHCState(), self_, output_, weight_, bias_ ? bias_ : NULL, finput_, fgrad_input_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0]);
            bool maybe_scalar = self_->dim() == 0 && weight_->dim() == 0 && (!bias_ || bias_->dim() == 0);
            output_->maybe_zero_dim(maybe_scalar);
            finput_->maybe_zero_dim(maybe_scalar);
            fgrad_input_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &, Tensor &>(output, finput, fgrad_input);
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto weight_ = checked_tensor_unwrap(weight,"weight",2, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
            auto bias_ = checked_tensor_unwrap(bias,"bias",4, true, Backend::CPU, ScalarType::Float);
            auto stride_ = check_intlist<2>(stride, "stride", 5);
            auto padding_ = check_intlist<2>(padding, "padding", 6);
            auto output_ = checked_tensor_unwrap(output,"output",6, false, Backend::CPU, ScalarType::Float);
            auto finput_ = checked_tensor_unwrap(finput,"finput",6, false, Backend::CPU, ScalarType::Float);
            auto fgrad_input_ = checked_tensor_unwrap(fgrad_input,"fgrad_input",6, false, Backend::CPU, ScalarType::Float);
            THNN_FloatSpatialConvolutionMM_updateOutput(globalContext().getTHCState(), self_, output_, weight_, bias_ ? bias_ : NULL, finput_, fgrad_input_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0]);
            bool maybe_scalar = self_->dim() == 0 && weight_->dim() == 0 && (!bias_ || bias_->dim() == 0);
            output_->maybe_zero_dim(maybe_scalar);
            finput_->maybe_zero_dim(maybe_scalar);
            fgrad_input_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &, Tensor &>(output, finput, fgrad_input);
            break;
        }
        default:
            AT_ERROR("_thnn_conv2d_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor,Tensor> CPUType::_thnn_conv2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto weight_ = checked_tensor_unwrap(weight,"weight",2, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
            auto bias_ = checked_tensor_unwrap(bias,"bias",4, true, Backend::CPU, ScalarType::Double);
            auto stride_ = check_intlist<2>(stride, "stride", 5);
            auto padding_ = check_intlist<2>(padding, "padding", 6);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            auto finput_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto finput = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(finput_));
            auto fgrad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto fgrad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(fgrad_input_));
            THNN_DoubleSpatialConvolutionMM_updateOutput(globalContext().getTHCState(), self_, output_, weight_, bias_ ? bias_ : NULL, finput_, fgrad_input_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0]);
            bool maybe_scalar = self_->dim() == 0 && weight_->dim() == 0 && (!bias_ || bias_->dim() == 0);
            output_->maybe_zero_dim(maybe_scalar);
            finput_->maybe_zero_dim(maybe_scalar);
            fgrad_input_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor, Tensor>(output, finput, fgrad_input);
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto weight_ = checked_tensor_unwrap(weight,"weight",2, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
            auto bias_ = checked_tensor_unwrap(bias,"bias",4, true, Backend::CPU, ScalarType::Float);
            auto stride_ = check_intlist<2>(stride, "stride", 5);
            auto padding_ = check_intlist<2>(padding, "padding", 6);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            auto finput_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto finput = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(finput_));
            auto fgrad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto fgrad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(fgrad_input_));
            THNN_FloatSpatialConvolutionMM_updateOutput(globalContext().getTHCState(), self_, output_, weight_, bias_ ? bias_ : NULL, finput_, fgrad_input_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0]);
            bool maybe_scalar = self_->dim() == 0 && weight_->dim() == 0 && (!bias_ || bias_->dim() == 0);
            output_->maybe_zero_dim(maybe_scalar);
            finput_->maybe_zero_dim(maybe_scalar);
            fgrad_input_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor, Tensor>(output, finput, fgrad_input);
            break;
        }
        default:
            AT_ERROR("_thnn_conv2d_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor &,Tensor &,Tensor &> CPUType::_thnn_conv2d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto weight_ = checked_tensor_unwrap(weight,"weight",3, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 4);
            auto stride_ = check_intlist<2>(stride, "stride", 5);
            auto padding_ = check_intlist<2>(padding, "padding", 6);
            auto finput_ = checked_tensor_unwrap(finput,"finput",7, false, Backend::CPU, ScalarType::Double);
            auto fgrad_input_ = checked_tensor_unwrap(fgrad_input,"fgrad_input",8, false, Backend::CPU, ScalarType::Double);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",8, true, Backend::CPU, ScalarType::Double);
            auto grad_weight_ = checked_tensor_unwrap(grad_weight,"grad_weight",8, true, Backend::CPU, ScalarType::Double);
            if (grad_weight.defined()) {
                grad_weight.resize_(weight.sizes());
                grad_weight.zero_();
            }
            auto grad_bias_ = checked_tensor_unwrap(grad_bias,"grad_bias",8, true, Backend::CPU, ScalarType::Double);
            if (grad_bias.defined()) {
                grad_bias.resize_({ weight.size(0) });
                grad_bias.zero_();
            }
            if (grad_input_) THNN_DoubleSpatialConvolutionMM_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_ ? grad_input_ : NULL, weight_, finput_, fgrad_input_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0]);
            if (grad_weight_ || grad_bias_) THNN_DoubleSpatialConvolutionMM_accGradParameters(globalContext().getTHCState(), self_, grad_output_, grad_weight_ ? grad_weight_ : NULL, grad_bias_ ? grad_bias_ : NULL, finput_, fgrad_input_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], 1);
            if (grad_input_) grad_input_->maybe_zero_dim(self_->dim() == 0);
            return std::tuple<Tensor &, Tensor &, Tensor &>(grad_input, grad_weight, grad_bias);
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto weight_ = checked_tensor_unwrap(weight,"weight",3, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 4);
            auto stride_ = check_intlist<2>(stride, "stride", 5);
            auto padding_ = check_intlist<2>(padding, "padding", 6);
            auto finput_ = checked_tensor_unwrap(finput,"finput",7, false, Backend::CPU, ScalarType::Float);
            auto fgrad_input_ = checked_tensor_unwrap(fgrad_input,"fgrad_input",8, false, Backend::CPU, ScalarType::Float);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",8, true, Backend::CPU, ScalarType::Float);
            auto grad_weight_ = checked_tensor_unwrap(grad_weight,"grad_weight",8, true, Backend::CPU, ScalarType::Float);
            if (grad_weight.defined()) {
                grad_weight.resize_(weight.sizes());
                grad_weight.zero_();
            }
            auto grad_bias_ = checked_tensor_unwrap(grad_bias,"grad_bias",8, true, Backend::CPU, ScalarType::Float);
            if (grad_bias.defined()) {
                grad_bias.resize_({ weight.size(0) });
                grad_bias.zero_();
            }
            if (grad_input_) THNN_FloatSpatialConvolutionMM_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_ ? grad_input_ : NULL, weight_, finput_, fgrad_input_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0]);
            if (grad_weight_ || grad_bias_) THNN_FloatSpatialConvolutionMM_accGradParameters(globalContext().getTHCState(), self_, grad_output_, grad_weight_ ? grad_weight_ : NULL, grad_bias_ ? grad_bias_ : NULL, finput_, fgrad_input_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], 1);
            if (grad_input_) grad_input_->maybe_zero_dim(self_->dim() == 0);
            return std::tuple<Tensor &, Tensor &, Tensor &>(grad_input, grad_weight, grad_bias);
            break;
        }
        default:
            AT_ERROR("_thnn_conv2d_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor,Tensor> CPUType::_thnn_conv2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto weight_ = checked_tensor_unwrap(weight,"weight",3, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 4);
            auto stride_ = check_intlist<2>(stride, "stride", 5);
            auto padding_ = check_intlist<2>(padding, "padding", 6);
            auto finput_ = checked_tensor_unwrap(finput,"finput",7, false, Backend::CPU, ScalarType::Double);
            auto fgrad_input_ = checked_tensor_unwrap(fgrad_input,"fgrad_input",8, false, Backend::CPU, ScalarType::Double);
            auto grad_input_ = output_mask[0] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release() : nullptr;
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_input_));
            auto grad_weight_ = output_mask[1] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release() : nullptr;
            auto grad_weight = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_weight_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_weight_));
            if (grad_weight.defined()) {
                grad_weight.resize_(weight.sizes());
                grad_weight.zero_();
            }
            auto grad_bias_ = output_mask[2] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release() : nullptr;
            auto grad_bias = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_bias_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_bias_));
            if (grad_bias.defined()) {
                grad_bias.resize_({ weight.size(0) });
                grad_bias.zero_();
            }
            if (grad_input_) THNN_DoubleSpatialConvolutionMM_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_ ? grad_input_ : NULL, weight_, finput_, fgrad_input_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0]);
            if (grad_weight_ || grad_bias_) THNN_DoubleSpatialConvolutionMM_accGradParameters(globalContext().getTHCState(), self_, grad_output_, grad_weight_ ? grad_weight_ : NULL, grad_bias_ ? grad_bias_ : NULL, finput_, fgrad_input_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], 1);
            if (grad_input_) grad_input_->maybe_zero_dim(self_->dim() == 0);
            return std::tuple<Tensor, Tensor, Tensor>(grad_input, grad_weight, grad_bias);
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto weight_ = checked_tensor_unwrap(weight,"weight",3, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 4);
            auto stride_ = check_intlist<2>(stride, "stride", 5);
            auto padding_ = check_intlist<2>(padding, "padding", 6);
            auto finput_ = checked_tensor_unwrap(finput,"finput",7, false, Backend::CPU, ScalarType::Float);
            auto fgrad_input_ = checked_tensor_unwrap(fgrad_input,"fgrad_input",8, false, Backend::CPU, ScalarType::Float);
            auto grad_input_ = output_mask[0] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release() : nullptr;
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_input_));
            auto grad_weight_ = output_mask[1] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release() : nullptr;
            auto grad_weight = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_weight_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_weight_));
            if (grad_weight.defined()) {
                grad_weight.resize_(weight.sizes());
                grad_weight.zero_();
            }
            auto grad_bias_ = output_mask[2] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release() : nullptr;
            auto grad_bias = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_bias_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_bias_));
            if (grad_bias.defined()) {
                grad_bias.resize_({ weight.size(0) });
                grad_bias.zero_();
            }
            if (grad_input_) THNN_FloatSpatialConvolutionMM_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_ ? grad_input_ : NULL, weight_, finput_, fgrad_input_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0]);
            if (grad_weight_ || grad_bias_) THNN_FloatSpatialConvolutionMM_accGradParameters(globalContext().getTHCState(), self_, grad_output_, grad_weight_ ? grad_weight_ : NULL, grad_bias_ ? grad_bias_ : NULL, finput_, fgrad_input_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], 1);
            if (grad_input_) grad_input_->maybe_zero_dim(self_->dim() == 0);
            return std::tuple<Tensor, Tensor, Tensor>(grad_input, grad_weight, grad_bias);
            break;
        }
        default:
            AT_ERROR("_thnn_conv2d_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor &,Tensor &,Tensor &> CPUType::_thnn_conv3d_forward_out(Tensor & output, Tensor & finput, Tensor & fgrad_input, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto weight_ = checked_tensor_unwrap(weight,"weight",2, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 3);
            auto bias_ = checked_tensor_unwrap(bias,"bias",4, true, Backend::CPU, ScalarType::Double);
            auto stride_ = check_intlist<3>(stride, "stride", 5);
            auto padding_ = check_intlist<3>(padding, "padding", 6);
            auto output_ = checked_tensor_unwrap(output,"output",6, false, Backend::CPU, ScalarType::Double);
            auto finput_ = checked_tensor_unwrap(finput,"finput",6, false, Backend::CPU, ScalarType::Double);
            auto fgrad_input_ = checked_tensor_unwrap(fgrad_input,"fgrad_input",6, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleVolumetricConvolutionMM_updateOutput(globalContext().getTHCState(), self_, output_, weight_, bias_ ? bias_ : NULL, finput_, fgrad_input_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1]);
            bool maybe_scalar = self_->dim() == 0 && weight_->dim() == 0 && (!bias_ || bias_->dim() == 0);
            output_->maybe_zero_dim(maybe_scalar);
            finput_->maybe_zero_dim(maybe_scalar);
            fgrad_input_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &, Tensor &>(output, finput, fgrad_input);
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto weight_ = checked_tensor_unwrap(weight,"weight",2, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 3);
            auto bias_ = checked_tensor_unwrap(bias,"bias",4, true, Backend::CPU, ScalarType::Float);
            auto stride_ = check_intlist<3>(stride, "stride", 5);
            auto padding_ = check_intlist<3>(padding, "padding", 6);
            auto output_ = checked_tensor_unwrap(output,"output",6, false, Backend::CPU, ScalarType::Float);
            auto finput_ = checked_tensor_unwrap(finput,"finput",6, false, Backend::CPU, ScalarType::Float);
            auto fgrad_input_ = checked_tensor_unwrap(fgrad_input,"fgrad_input",6, false, Backend::CPU, ScalarType::Float);
            THNN_FloatVolumetricConvolutionMM_updateOutput(globalContext().getTHCState(), self_, output_, weight_, bias_ ? bias_ : NULL, finput_, fgrad_input_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1]);
            bool maybe_scalar = self_->dim() == 0 && weight_->dim() == 0 && (!bias_ || bias_->dim() == 0);
            output_->maybe_zero_dim(maybe_scalar);
            finput_->maybe_zero_dim(maybe_scalar);
            fgrad_input_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &, Tensor &>(output, finput, fgrad_input);
            break;
        }
        default:
            AT_ERROR("_thnn_conv3d_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor,Tensor> CPUType::_thnn_conv3d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto weight_ = checked_tensor_unwrap(weight,"weight",2, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 3);
            auto bias_ = checked_tensor_unwrap(bias,"bias",4, true, Backend::CPU, ScalarType::Double);
            auto stride_ = check_intlist<3>(stride, "stride", 5);
            auto padding_ = check_intlist<3>(padding, "padding", 6);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            auto finput_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto finput = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(finput_));
            auto fgrad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto fgrad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(fgrad_input_));
            THNN_DoubleVolumetricConvolutionMM_updateOutput(globalContext().getTHCState(), self_, output_, weight_, bias_ ? bias_ : NULL, finput_, fgrad_input_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1]);
            bool maybe_scalar = self_->dim() == 0 && weight_->dim() == 0 && (!bias_ || bias_->dim() == 0);
            output_->maybe_zero_dim(maybe_scalar);
            finput_->maybe_zero_dim(maybe_scalar);
            fgrad_input_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor, Tensor>(output, finput, fgrad_input);
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto weight_ = checked_tensor_unwrap(weight,"weight",2, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 3);
            auto bias_ = checked_tensor_unwrap(bias,"bias",4, true, Backend::CPU, ScalarType::Float);
            auto stride_ = check_intlist<3>(stride, "stride", 5);
            auto padding_ = check_intlist<3>(padding, "padding", 6);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            auto finput_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto finput = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(finput_));
            auto fgrad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto fgrad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(fgrad_input_));
            THNN_FloatVolumetricConvolutionMM_updateOutput(globalContext().getTHCState(), self_, output_, weight_, bias_ ? bias_ : NULL, finput_, fgrad_input_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1]);
            bool maybe_scalar = self_->dim() == 0 && weight_->dim() == 0 && (!bias_ || bias_->dim() == 0);
            output_->maybe_zero_dim(maybe_scalar);
            finput_->maybe_zero_dim(maybe_scalar);
            fgrad_input_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor, Tensor>(output, finput, fgrad_input);
            break;
        }
        default:
            AT_ERROR("_thnn_conv3d_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor &,Tensor &,Tensor &> CPUType::_thnn_conv3d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto weight_ = checked_tensor_unwrap(weight,"weight",3, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 4);
            auto stride_ = check_intlist<3>(stride, "stride", 5);
            auto padding_ = check_intlist<3>(padding, "padding", 6);
            auto finput_ = checked_tensor_unwrap(finput,"finput",7, false, Backend::CPU, ScalarType::Double);
            auto fgrad_input_ = checked_tensor_unwrap(fgrad_input,"fgrad_input",8, false, Backend::CPU, ScalarType::Double);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",8, true, Backend::CPU, ScalarType::Double);
            auto grad_weight_ = checked_tensor_unwrap(grad_weight,"grad_weight",8, true, Backend::CPU, ScalarType::Double);
            if (grad_weight.defined()) {
                grad_weight.resize_(weight.sizes());
                grad_weight.zero_();
            }
            auto grad_bias_ = checked_tensor_unwrap(grad_bias,"grad_bias",8, true, Backend::CPU, ScalarType::Double);
            if (grad_bias.defined()) {
                grad_bias.resize_({ weight.size(0) });
                grad_bias.zero_();
            }
            if (grad_input_) THNN_DoubleVolumetricConvolutionMM_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_ ? grad_input_ : NULL, weight_, finput_, fgrad_input_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1]);
            if (grad_weight_ || grad_bias_) THNN_DoubleVolumetricConvolutionMM_accGradParameters(globalContext().getTHCState(), self_, grad_output_, grad_weight_ ? grad_weight_ : NULL, grad_bias_ ? grad_bias_ : NULL, finput_, fgrad_input_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], 1);
            if (grad_input_) grad_input_->maybe_zero_dim(self_->dim() == 0);
            return std::tuple<Tensor &, Tensor &, Tensor &>(grad_input, grad_weight, grad_bias);
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto weight_ = checked_tensor_unwrap(weight,"weight",3, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 4);
            auto stride_ = check_intlist<3>(stride, "stride", 5);
            auto padding_ = check_intlist<3>(padding, "padding", 6);
            auto finput_ = checked_tensor_unwrap(finput,"finput",7, false, Backend::CPU, ScalarType::Float);
            auto fgrad_input_ = checked_tensor_unwrap(fgrad_input,"fgrad_input",8, false, Backend::CPU, ScalarType::Float);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",8, true, Backend::CPU, ScalarType::Float);
            auto grad_weight_ = checked_tensor_unwrap(grad_weight,"grad_weight",8, true, Backend::CPU, ScalarType::Float);
            if (grad_weight.defined()) {
                grad_weight.resize_(weight.sizes());
                grad_weight.zero_();
            }
            auto grad_bias_ = checked_tensor_unwrap(grad_bias,"grad_bias",8, true, Backend::CPU, ScalarType::Float);
            if (grad_bias.defined()) {
                grad_bias.resize_({ weight.size(0) });
                grad_bias.zero_();
            }
            if (grad_input_) THNN_FloatVolumetricConvolutionMM_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_ ? grad_input_ : NULL, weight_, finput_, fgrad_input_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1]);
            if (grad_weight_ || grad_bias_) THNN_FloatVolumetricConvolutionMM_accGradParameters(globalContext().getTHCState(), self_, grad_output_, grad_weight_ ? grad_weight_ : NULL, grad_bias_ ? grad_bias_ : NULL, finput_, fgrad_input_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], 1);
            if (grad_input_) grad_input_->maybe_zero_dim(self_->dim() == 0);
            return std::tuple<Tensor &, Tensor &, Tensor &>(grad_input, grad_weight, grad_bias);
            break;
        }
        default:
            AT_ERROR("_thnn_conv3d_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor,Tensor> CPUType::_thnn_conv3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto weight_ = checked_tensor_unwrap(weight,"weight",3, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 4);
            auto stride_ = check_intlist<3>(stride, "stride", 5);
            auto padding_ = check_intlist<3>(padding, "padding", 6);
            auto finput_ = checked_tensor_unwrap(finput,"finput",7, false, Backend::CPU, ScalarType::Double);
            auto fgrad_input_ = checked_tensor_unwrap(fgrad_input,"fgrad_input",8, false, Backend::CPU, ScalarType::Double);
            auto grad_input_ = output_mask[0] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release() : nullptr;
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_input_));
            auto grad_weight_ = output_mask[1] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release() : nullptr;
            auto grad_weight = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_weight_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_weight_));
            if (grad_weight.defined()) {
                grad_weight.resize_(weight.sizes());
                grad_weight.zero_();
            }
            auto grad_bias_ = output_mask[2] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release() : nullptr;
            auto grad_bias = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_bias_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_bias_));
            if (grad_bias.defined()) {
                grad_bias.resize_({ weight.size(0) });
                grad_bias.zero_();
            }
            if (grad_input_) THNN_DoubleVolumetricConvolutionMM_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_ ? grad_input_ : NULL, weight_, finput_, fgrad_input_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1]);
            if (grad_weight_ || grad_bias_) THNN_DoubleVolumetricConvolutionMM_accGradParameters(globalContext().getTHCState(), self_, grad_output_, grad_weight_ ? grad_weight_ : NULL, grad_bias_ ? grad_bias_ : NULL, finput_, fgrad_input_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], 1);
            if (grad_input_) grad_input_->maybe_zero_dim(self_->dim() == 0);
            return std::tuple<Tensor, Tensor, Tensor>(grad_input, grad_weight, grad_bias);
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto weight_ = checked_tensor_unwrap(weight,"weight",3, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 4);
            auto stride_ = check_intlist<3>(stride, "stride", 5);
            auto padding_ = check_intlist<3>(padding, "padding", 6);
            auto finput_ = checked_tensor_unwrap(finput,"finput",7, false, Backend::CPU, ScalarType::Float);
            auto fgrad_input_ = checked_tensor_unwrap(fgrad_input,"fgrad_input",8, false, Backend::CPU, ScalarType::Float);
            auto grad_input_ = output_mask[0] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release() : nullptr;
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_input_));
            auto grad_weight_ = output_mask[1] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release() : nullptr;
            auto grad_weight = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_weight_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_weight_));
            if (grad_weight.defined()) {
                grad_weight.resize_(weight.sizes());
                grad_weight.zero_();
            }
            auto grad_bias_ = output_mask[2] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release() : nullptr;
            auto grad_bias = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_bias_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_bias_));
            if (grad_bias.defined()) {
                grad_bias.resize_({ weight.size(0) });
                grad_bias.zero_();
            }
            if (grad_input_) THNN_FloatVolumetricConvolutionMM_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_ ? grad_input_ : NULL, weight_, finput_, fgrad_input_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1]);
            if (grad_weight_ || grad_bias_) THNN_FloatVolumetricConvolutionMM_accGradParameters(globalContext().getTHCState(), self_, grad_output_, grad_weight_ ? grad_weight_ : NULL, grad_bias_ ? grad_bias_ : NULL, finput_, fgrad_input_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], 1);
            if (grad_input_) grad_input_->maybe_zero_dim(self_->dim() == 0);
            return std::tuple<Tensor, Tensor, Tensor>(grad_input, grad_weight, grad_bias);
            break;
        }
        default:
            AT_ERROR("_thnn_conv3d_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor &,Tensor &,Tensor &> CPUType::_thnn_conv_dilated2d_forward_out(Tensor & output, Tensor & columns, Tensor & ones, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto weight_ = checked_tensor_unwrap(weight,"weight",2, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
            auto bias_ = checked_tensor_unwrap(bias,"bias",4, true, Backend::CPU, ScalarType::Double);
            auto stride_ = check_intlist<2>(stride, "stride", 5);
            auto padding_ = check_intlist<2>(padding, "padding", 6);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 7);
            auto output_ = checked_tensor_unwrap(output,"output",7, false, Backend::CPU, ScalarType::Double);
            auto columns_ = checked_tensor_unwrap(columns,"columns",7, false, Backend::CPU, ScalarType::Double);
            auto ones_ = checked_tensor_unwrap(ones,"ones",7, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleSpatialDilatedConvolution_updateOutput(globalContext().getTHCState(), self_, output_, weight_, bias_ ? bias_ : NULL, columns_, ones_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0]);
            bool maybe_scalar = self_->dim() == 0 && weight_->dim() == 0 && (!bias_ || bias_->dim() == 0);
            output_->maybe_zero_dim(maybe_scalar);
            columns_->maybe_zero_dim(maybe_scalar);
            ones_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &, Tensor &>(output, columns, ones);
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto weight_ = checked_tensor_unwrap(weight,"weight",2, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
            auto bias_ = checked_tensor_unwrap(bias,"bias",4, true, Backend::CPU, ScalarType::Float);
            auto stride_ = check_intlist<2>(stride, "stride", 5);
            auto padding_ = check_intlist<2>(padding, "padding", 6);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 7);
            auto output_ = checked_tensor_unwrap(output,"output",7, false, Backend::CPU, ScalarType::Float);
            auto columns_ = checked_tensor_unwrap(columns,"columns",7, false, Backend::CPU, ScalarType::Float);
            auto ones_ = checked_tensor_unwrap(ones,"ones",7, false, Backend::CPU, ScalarType::Float);
            THNN_FloatSpatialDilatedConvolution_updateOutput(globalContext().getTHCState(), self_, output_, weight_, bias_ ? bias_ : NULL, columns_, ones_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0]);
            bool maybe_scalar = self_->dim() == 0 && weight_->dim() == 0 && (!bias_ || bias_->dim() == 0);
            output_->maybe_zero_dim(maybe_scalar);
            columns_->maybe_zero_dim(maybe_scalar);
            ones_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &, Tensor &>(output, columns, ones);
            break;
        }
        default:
            AT_ERROR("_thnn_conv_dilated2d_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor,Tensor> CPUType::_thnn_conv_dilated2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto weight_ = checked_tensor_unwrap(weight,"weight",2, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
            auto bias_ = checked_tensor_unwrap(bias,"bias",4, true, Backend::CPU, ScalarType::Double);
            auto stride_ = check_intlist<2>(stride, "stride", 5);
            auto padding_ = check_intlist<2>(padding, "padding", 6);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 7);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            auto columns_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto columns = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(columns_));
            auto ones_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto ones = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(ones_));
            THNN_DoubleSpatialDilatedConvolution_updateOutput(globalContext().getTHCState(), self_, output_, weight_, bias_ ? bias_ : NULL, columns_, ones_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0]);
            bool maybe_scalar = self_->dim() == 0 && weight_->dim() == 0 && (!bias_ || bias_->dim() == 0);
            output_->maybe_zero_dim(maybe_scalar);
            columns_->maybe_zero_dim(maybe_scalar);
            ones_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor, Tensor>(output, columns, ones);
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto weight_ = checked_tensor_unwrap(weight,"weight",2, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
            auto bias_ = checked_tensor_unwrap(bias,"bias",4, true, Backend::CPU, ScalarType::Float);
            auto stride_ = check_intlist<2>(stride, "stride", 5);
            auto padding_ = check_intlist<2>(padding, "padding", 6);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 7);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            auto columns_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto columns = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(columns_));
            auto ones_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto ones = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(ones_));
            THNN_FloatSpatialDilatedConvolution_updateOutput(globalContext().getTHCState(), self_, output_, weight_, bias_ ? bias_ : NULL, columns_, ones_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0]);
            bool maybe_scalar = self_->dim() == 0 && weight_->dim() == 0 && (!bias_ || bias_->dim() == 0);
            output_->maybe_zero_dim(maybe_scalar);
            columns_->maybe_zero_dim(maybe_scalar);
            ones_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor, Tensor>(output, columns, ones);
            break;
        }
        default:
            AT_ERROR("_thnn_conv_dilated2d_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor &,Tensor &,Tensor &> CPUType::_thnn_conv_dilated2d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto weight_ = checked_tensor_unwrap(weight,"weight",3, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 4);
            auto stride_ = check_intlist<2>(stride, "stride", 5);
            auto padding_ = check_intlist<2>(padding, "padding", 6);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 7);
            auto columns_ = checked_tensor_unwrap(columns,"columns",8, false, Backend::CPU, ScalarType::Double);
            auto ones_ = checked_tensor_unwrap(ones,"ones",9, false, Backend::CPU, ScalarType::Double);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",9, true, Backend::CPU, ScalarType::Double);
            auto grad_weight_ = checked_tensor_unwrap(grad_weight,"grad_weight",9, true, Backend::CPU, ScalarType::Double);
            if (grad_weight.defined()) {
                grad_weight.resize_(weight.sizes());
                grad_weight.zero_();
            }
            auto grad_bias_ = checked_tensor_unwrap(grad_bias,"grad_bias",9, true, Backend::CPU, ScalarType::Double);
            if (grad_bias.defined()) {
                grad_bias.resize_({ weight.size(0) });
                grad_bias.zero_();
            }
            if (grad_input_) THNN_DoubleSpatialDilatedConvolution_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_ ? grad_input_ : NULL, weight_, columns_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0]);
            if (grad_weight_ || grad_bias_) THNN_DoubleSpatialDilatedConvolution_accGradParameters(globalContext().getTHCState(), self_, grad_output_, grad_weight_ ? grad_weight_ : NULL, grad_bias_ ? grad_bias_ : NULL, columns_, ones_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0], 1);
            if (grad_input_) grad_input_->maybe_zero_dim(self_->dim() == 0);
            return std::tuple<Tensor &, Tensor &, Tensor &>(grad_input, grad_weight, grad_bias);
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto weight_ = checked_tensor_unwrap(weight,"weight",3, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 4);
            auto stride_ = check_intlist<2>(stride, "stride", 5);
            auto padding_ = check_intlist<2>(padding, "padding", 6);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 7);
            auto columns_ = checked_tensor_unwrap(columns,"columns",8, false, Backend::CPU, ScalarType::Float);
            auto ones_ = checked_tensor_unwrap(ones,"ones",9, false, Backend::CPU, ScalarType::Float);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",9, true, Backend::CPU, ScalarType::Float);
            auto grad_weight_ = checked_tensor_unwrap(grad_weight,"grad_weight",9, true, Backend::CPU, ScalarType::Float);
            if (grad_weight.defined()) {
                grad_weight.resize_(weight.sizes());
                grad_weight.zero_();
            }
            auto grad_bias_ = checked_tensor_unwrap(grad_bias,"grad_bias",9, true, Backend::CPU, ScalarType::Float);
            if (grad_bias.defined()) {
                grad_bias.resize_({ weight.size(0) });
                grad_bias.zero_();
            }
            if (grad_input_) THNN_FloatSpatialDilatedConvolution_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_ ? grad_input_ : NULL, weight_, columns_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0]);
            if (grad_weight_ || grad_bias_) THNN_FloatSpatialDilatedConvolution_accGradParameters(globalContext().getTHCState(), self_, grad_output_, grad_weight_ ? grad_weight_ : NULL, grad_bias_ ? grad_bias_ : NULL, columns_, ones_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0], 1);
            if (grad_input_) grad_input_->maybe_zero_dim(self_->dim() == 0);
            return std::tuple<Tensor &, Tensor &, Tensor &>(grad_input, grad_weight, grad_bias);
            break;
        }
        default:
            AT_ERROR("_thnn_conv_dilated2d_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor,Tensor> CPUType::_thnn_conv_dilated2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones, std::array<bool,3> output_mask) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto weight_ = checked_tensor_unwrap(weight,"weight",3, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 4);
            auto stride_ = check_intlist<2>(stride, "stride", 5);
            auto padding_ = check_intlist<2>(padding, "padding", 6);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 7);
            auto columns_ = checked_tensor_unwrap(columns,"columns",8, false, Backend::CPU, ScalarType::Double);
            auto ones_ = checked_tensor_unwrap(ones,"ones",9, false, Backend::CPU, ScalarType::Double);
            auto grad_input_ = output_mask[0] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release() : nullptr;
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_input_));
            auto grad_weight_ = output_mask[1] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release() : nullptr;
            auto grad_weight = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_weight_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_weight_));
            if (grad_weight.defined()) {
                grad_weight.resize_(weight.sizes());
                grad_weight.zero_();
            }
            auto grad_bias_ = output_mask[2] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release() : nullptr;
            auto grad_bias = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_bias_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_bias_));
            if (grad_bias.defined()) {
                grad_bias.resize_({ weight.size(0) });
                grad_bias.zero_();
            }
            if (grad_input_) THNN_DoubleSpatialDilatedConvolution_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_ ? grad_input_ : NULL, weight_, columns_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0]);
            if (grad_weight_ || grad_bias_) THNN_DoubleSpatialDilatedConvolution_accGradParameters(globalContext().getTHCState(), self_, grad_output_, grad_weight_ ? grad_weight_ : NULL, grad_bias_ ? grad_bias_ : NULL, columns_, ones_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0], 1);
            if (grad_input_) grad_input_->maybe_zero_dim(self_->dim() == 0);
            return std::tuple<Tensor, Tensor, Tensor>(grad_input, grad_weight, grad_bias);
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto weight_ = checked_tensor_unwrap(weight,"weight",3, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 4);
            auto stride_ = check_intlist<2>(stride, "stride", 5);
            auto padding_ = check_intlist<2>(padding, "padding", 6);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 7);
            auto columns_ = checked_tensor_unwrap(columns,"columns",8, false, Backend::CPU, ScalarType::Float);
            auto ones_ = checked_tensor_unwrap(ones,"ones",9, false, Backend::CPU, ScalarType::Float);
            auto grad_input_ = output_mask[0] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release() : nullptr;
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_input_));
            auto grad_weight_ = output_mask[1] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release() : nullptr;
            auto grad_weight = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_weight_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_weight_));
            if (grad_weight.defined()) {
                grad_weight.resize_(weight.sizes());
                grad_weight.zero_();
            }
            auto grad_bias_ = output_mask[2] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release() : nullptr;
            auto grad_bias = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_bias_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_bias_));
            if (grad_bias.defined()) {
                grad_bias.resize_({ weight.size(0) });
                grad_bias.zero_();
            }
            if (grad_input_) THNN_FloatSpatialDilatedConvolution_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_ ? grad_input_ : NULL, weight_, columns_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0]);
            if (grad_weight_ || grad_bias_) THNN_FloatSpatialDilatedConvolution_accGradParameters(globalContext().getTHCState(), self_, grad_output_, grad_weight_ ? grad_weight_ : NULL, grad_bias_ ? grad_bias_ : NULL, columns_, ones_, kernel_size_[1], kernel_size_[0], stride_[1], stride_[0], padding_[1], padding_[0], dilation_[1], dilation_[0], 1);
            if (grad_input_) grad_input_->maybe_zero_dim(self_->dim() == 0);
            return std::tuple<Tensor, Tensor, Tensor>(grad_input, grad_weight, grad_bias);
            break;
        }
        default:
            AT_ERROR("_thnn_conv_dilated2d_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor &,Tensor &,Tensor &> CPUType::_thnn_conv_dilated3d_forward_out(Tensor & output, Tensor & columns, Tensor & ones, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto weight_ = checked_tensor_unwrap(weight,"weight",2, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 3);
            auto bias_ = checked_tensor_unwrap(bias,"bias",4, true, Backend::CPU, ScalarType::Double);
            auto stride_ = check_intlist<3>(stride, "stride", 5);
            auto padding_ = check_intlist<3>(padding, "padding", 6);
            auto dilation_ = check_intlist<3>(dilation, "dilation", 7);
            auto output_ = checked_tensor_unwrap(output,"output",7, false, Backend::CPU, ScalarType::Double);
            auto columns_ = checked_tensor_unwrap(columns,"columns",7, false, Backend::CPU, ScalarType::Double);
            auto ones_ = checked_tensor_unwrap(ones,"ones",7, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleVolumetricDilatedConvolution_updateOutput(globalContext().getTHCState(), self_, output_, weight_, bias_ ? bias_ : NULL, columns_, ones_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1]);
            bool maybe_scalar = self_->dim() == 0 && weight_->dim() == 0 && (!bias_ || bias_->dim() == 0);
            output_->maybe_zero_dim(maybe_scalar);
            columns_->maybe_zero_dim(maybe_scalar);
            ones_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &, Tensor &>(output, columns, ones);
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto weight_ = checked_tensor_unwrap(weight,"weight",2, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 3);
            auto bias_ = checked_tensor_unwrap(bias,"bias",4, true, Backend::CPU, ScalarType::Float);
            auto stride_ = check_intlist<3>(stride, "stride", 5);
            auto padding_ = check_intlist<3>(padding, "padding", 6);
            auto dilation_ = check_intlist<3>(dilation, "dilation", 7);
            auto output_ = checked_tensor_unwrap(output,"output",7, false, Backend::CPU, ScalarType::Float);
            auto columns_ = checked_tensor_unwrap(columns,"columns",7, false, Backend::CPU, ScalarType::Float);
            auto ones_ = checked_tensor_unwrap(ones,"ones",7, false, Backend::CPU, ScalarType::Float);
            THNN_FloatVolumetricDilatedConvolution_updateOutput(globalContext().getTHCState(), self_, output_, weight_, bias_ ? bias_ : NULL, columns_, ones_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1]);
            bool maybe_scalar = self_->dim() == 0 && weight_->dim() == 0 && (!bias_ || bias_->dim() == 0);
            output_->maybe_zero_dim(maybe_scalar);
            columns_->maybe_zero_dim(maybe_scalar);
            ones_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor &, Tensor &, Tensor &>(output, columns, ones);
            break;
        }
        default:
            AT_ERROR("_thnn_conv_dilated3d_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor,Tensor> CPUType::_thnn_conv_dilated3d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto weight_ = checked_tensor_unwrap(weight,"weight",2, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 3);
            auto bias_ = checked_tensor_unwrap(bias,"bias",4, true, Backend::CPU, ScalarType::Double);
            auto stride_ = check_intlist<3>(stride, "stride", 5);
            auto padding_ = check_intlist<3>(padding, "padding", 6);
            auto dilation_ = check_intlist<3>(dilation, "dilation", 7);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            auto columns_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto columns = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(columns_));
            auto ones_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto ones = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(ones_));
            THNN_DoubleVolumetricDilatedConvolution_updateOutput(globalContext().getTHCState(), self_, output_, weight_, bias_ ? bias_ : NULL, columns_, ones_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1]);
            bool maybe_scalar = self_->dim() == 0 && weight_->dim() == 0 && (!bias_ || bias_->dim() == 0);
            output_->maybe_zero_dim(maybe_scalar);
            columns_->maybe_zero_dim(maybe_scalar);
            ones_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor, Tensor>(output, columns, ones);
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto weight_ = checked_tensor_unwrap(weight,"weight",2, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 3);
            auto bias_ = checked_tensor_unwrap(bias,"bias",4, true, Backend::CPU, ScalarType::Float);
            auto stride_ = check_intlist<3>(stride, "stride", 5);
            auto padding_ = check_intlist<3>(padding, "padding", 6);
            auto dilation_ = check_intlist<3>(dilation, "dilation", 7);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            auto columns_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto columns = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(columns_));
            auto ones_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto ones = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(ones_));
            THNN_FloatVolumetricDilatedConvolution_updateOutput(globalContext().getTHCState(), self_, output_, weight_, bias_ ? bias_ : NULL, columns_, ones_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1]);
            bool maybe_scalar = self_->dim() == 0 && weight_->dim() == 0 && (!bias_ || bias_->dim() == 0);
            output_->maybe_zero_dim(maybe_scalar);
            columns_->maybe_zero_dim(maybe_scalar);
            ones_->maybe_zero_dim(maybe_scalar);
            return std::tuple<Tensor, Tensor, Tensor>(output, columns, ones);
            break;
        }
        default:
            AT_ERROR("_thnn_conv_dilated3d_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor &,Tensor &,Tensor &> CPUType::_thnn_conv_dilated3d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto weight_ = checked_tensor_unwrap(weight,"weight",3, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 4);
            auto stride_ = check_intlist<3>(stride, "stride", 5);
            auto padding_ = check_intlist<3>(padding, "padding", 6);
            auto dilation_ = check_intlist<3>(dilation, "dilation", 7);
            auto columns_ = checked_tensor_unwrap(columns,"columns",8, false, Backend::CPU, ScalarType::Double);
            auto ones_ = checked_tensor_unwrap(ones,"ones",9, false, Backend::CPU, ScalarType::Double);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",9, true, Backend::CPU, ScalarType::Double);
            auto grad_weight_ = checked_tensor_unwrap(grad_weight,"grad_weight",9, true, Backend::CPU, ScalarType::Double);
            if (grad_weight.defined()) {
                grad_weight.resize_(weight.sizes());
                grad_weight.zero_();
            }
            auto grad_bias_ = checked_tensor_unwrap(grad_bias,"grad_bias",9, true, Backend::CPU, ScalarType::Double);
            if (grad_bias.defined()) {
                grad_bias.resize_({ weight.size(0) });
                grad_bias.zero_();
            }
            if (grad_input_) THNN_DoubleVolumetricDilatedConvolution_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_ ? grad_input_ : NULL, weight_, columns_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1]);
            if (grad_weight_ || grad_bias_) THNN_DoubleVolumetricDilatedConvolution_accGradParameters(globalContext().getTHCState(), self_, grad_output_, grad_weight_ ? grad_weight_ : NULL, grad_bias_ ? grad_bias_ : NULL, columns_, ones_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1], 1);
            if (grad_input_) grad_input_->maybe_zero_dim(self_->dim() == 0);
            return std::tuple<Tensor &, Tensor &, Tensor &>(grad_input, grad_weight, grad_bias);
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto weight_ = checked_tensor_unwrap(weight,"weight",3, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 4);
            auto stride_ = check_intlist<3>(stride, "stride", 5);
            auto padding_ = check_intlist<3>(padding, "padding", 6);
            auto dilation_ = check_intlist<3>(dilation, "dilation", 7);
            auto columns_ = checked_tensor_unwrap(columns,"columns",8, false, Backend::CPU, ScalarType::Float);
            auto ones_ = checked_tensor_unwrap(ones,"ones",9, false, Backend::CPU, ScalarType::Float);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",9, true, Backend::CPU, ScalarType::Float);
            auto grad_weight_ = checked_tensor_unwrap(grad_weight,"grad_weight",9, true, Backend::CPU, ScalarType::Float);
            if (grad_weight.defined()) {
                grad_weight.resize_(weight.sizes());
                grad_weight.zero_();
            }
            auto grad_bias_ = checked_tensor_unwrap(grad_bias,"grad_bias",9, true, Backend::CPU, ScalarType::Float);
            if (grad_bias.defined()) {
                grad_bias.resize_({ weight.size(0) });
                grad_bias.zero_();
            }
            if (grad_input_) THNN_FloatVolumetricDilatedConvolution_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_ ? grad_input_ : NULL, weight_, columns_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1]);
            if (grad_weight_ || grad_bias_) THNN_FloatVolumetricDilatedConvolution_accGradParameters(globalContext().getTHCState(), self_, grad_output_, grad_weight_ ? grad_weight_ : NULL, grad_bias_ ? grad_bias_ : NULL, columns_, ones_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1], 1);
            if (grad_input_) grad_input_->maybe_zero_dim(self_->dim() == 0);
            return std::tuple<Tensor &, Tensor &, Tensor &>(grad_input, grad_weight, grad_bias);
            break;
        }
        default:
            AT_ERROR("_thnn_conv_dilated3d_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor,Tensor> CPUType::_thnn_conv_dilated3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones, std::array<bool,3> output_mask) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Double);
            auto weight_ = checked_tensor_unwrap(weight,"weight",3, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 4);
            auto stride_ = check_intlist<3>(stride, "stride", 5);
            auto padding_ = check_intlist<3>(padding, "padding", 6);
            auto dilation_ = check_intlist<3>(dilation, "dilation", 7);
            auto columns_ = checked_tensor_unwrap(columns,"columns",8, false, Backend::CPU, ScalarType::Double);
            auto ones_ = checked_tensor_unwrap(ones,"ones",9, false, Backend::CPU, ScalarType::Double);
            auto grad_input_ = output_mask[0] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release() : nullptr;
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_input_));
            auto grad_weight_ = output_mask[1] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release() : nullptr;
            auto grad_weight = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_weight_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_weight_));
            if (grad_weight.defined()) {
                grad_weight.resize_(weight.sizes());
                grad_weight.zero_();
            }
            auto grad_bias_ = output_mask[2] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release() : nullptr;
            auto grad_bias = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_bias_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_bias_));
            if (grad_bias.defined()) {
                grad_bias.resize_({ weight.size(0) });
                grad_bias.zero_();
            }
            if (grad_input_) THNN_DoubleVolumetricDilatedConvolution_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_ ? grad_input_ : NULL, weight_, columns_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1]);
            if (grad_weight_ || grad_bias_) THNN_DoubleVolumetricDilatedConvolution_accGradParameters(globalContext().getTHCState(), self_, grad_output_, grad_weight_ ? grad_weight_ : NULL, grad_bias_ ? grad_bias_ : NULL, columns_, ones_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1], 1);
            if (grad_input_) grad_input_->maybe_zero_dim(self_->dim() == 0);
            return std::tuple<Tensor, Tensor, Tensor>(grad_input, grad_weight, grad_bias);
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto self_ = checked_tensor_unwrap(self,"self",2, false, Backend::CPU, ScalarType::Float);
            auto weight_ = checked_tensor_unwrap(weight,"weight",3, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<3>(kernel_size, "kernel_size", 4);
            auto stride_ = check_intlist<3>(stride, "stride", 5);
            auto padding_ = check_intlist<3>(padding, "padding", 6);
            auto dilation_ = check_intlist<3>(dilation, "dilation", 7);
            auto columns_ = checked_tensor_unwrap(columns,"columns",8, false, Backend::CPU, ScalarType::Float);
            auto ones_ = checked_tensor_unwrap(ones,"ones",9, false, Backend::CPU, ScalarType::Float);
            auto grad_input_ = output_mask[0] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release() : nullptr;
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_input_));
            auto grad_weight_ = output_mask[1] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release() : nullptr;
            auto grad_weight = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_weight_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_weight_));
            if (grad_weight.defined()) {
                grad_weight.resize_(weight.sizes());
                grad_weight.zero_();
            }
            auto grad_bias_ = output_mask[2] ? c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release() : nullptr;
            auto grad_bias = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_bias_ == nullptr ? (TensorImpl*)UndefinedTensorImpl::singleton() : (TensorImpl*)grad_bias_));
            if (grad_bias.defined()) {
                grad_bias.resize_({ weight.size(0) });
                grad_bias.zero_();
            }
            if (grad_input_) THNN_FloatVolumetricDilatedConvolution_updateGradInput(globalContext().getTHCState(), self_, grad_output_, grad_input_ ? grad_input_ : NULL, weight_, columns_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1]);
            if (grad_weight_ || grad_bias_) THNN_FloatVolumetricDilatedConvolution_accGradParameters(globalContext().getTHCState(), self_, grad_output_, grad_weight_ ? grad_weight_ : NULL, grad_bias_ ? grad_bias_ : NULL, columns_, ones_, kernel_size_[0], kernel_size_[2], kernel_size_[1], stride_[0], stride_[2], stride_[1], padding_[0], padding_[2], padding_[1], dilation_[0], dilation_[2], dilation_[1], 1);
            if (grad_input_) grad_input_->maybe_zero_dim(self_->dim() == 0);
            return std::tuple<Tensor, Tensor, Tensor>(grad_input, grad_weight, grad_bias);
            break;
        }
        default:
            AT_ERROR("_thnn_conv_dilated3d_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_col2im_forward_out(Tensor & output, const Tensor & self, IntArrayRef output_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 4);
            auto padding_ = check_intlist<2>(padding, "padding", 5);
            auto stride_ = check_intlist<2>(stride, "stride", 6);
            auto output_ = checked_tensor_unwrap(output,"output",6, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleCol2Im_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[1], kernel_size_[0], kernel_size_[1], dilation_[0], dilation_[1], padding_[0], padding_[1], stride_[0], stride_[1]);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 4);
            auto padding_ = check_intlist<2>(padding, "padding", 5);
            auto stride_ = check_intlist<2>(stride, "stride", 6);
            auto output_ = checked_tensor_unwrap(output,"output",6, false, Backend::CPU, ScalarType::Float);
            THNN_FloatCol2Im_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[1], kernel_size_[0], kernel_size_[1], dilation_[0], dilation_[1], padding_[0], padding_[1], stride_[0], stride_[1]);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_col2im_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_col2im_forward(const Tensor & self, IntArrayRef output_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 4);
            auto padding_ = check_intlist<2>(padding, "padding", 5);
            auto stride_ = check_intlist<2>(stride, "stride", 6);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_DoubleCol2Im_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[1], kernel_size_[0], kernel_size_[1], dilation_[0], dilation_[1], padding_[0], padding_[1], stride_[0], stride_[1]);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto output_size_ = check_intlist<2>(output_size, "output_size", 2);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 4);
            auto padding_ = check_intlist<2>(padding, "padding", 5);
            auto stride_ = check_intlist<2>(stride, "stride", 6);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_FloatCol2Im_updateOutput(globalContext().getTHCState(), self_, output_, output_size_[0], output_size_[1], kernel_size_[0], kernel_size_[1], dilation_[0], dilation_[1], padding_[0], padding_[1], stride_[0], stride_[1]);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_col2im_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_col2im_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) const {
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    auto dispatch_scalar_type = infer_scalar_type(grad_input);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 2);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 3);
            auto padding_ = check_intlist<2>(padding, "padding", 4);
            auto stride_ = check_intlist<2>(stride, "stride", 5);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",5, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleCol2Im_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, kernel_size_[0], kernel_size_[1], dilation_[0], dilation_[1], padding_[0], padding_[1], stride_[0], stride_[1]);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 2);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 3);
            auto padding_ = check_intlist<2>(padding, "padding", 4);
            auto stride_ = check_intlist<2>(stride, "stride", 5);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",5, false, Backend::CPU, ScalarType::Float);
            THNN_FloatCol2Im_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, kernel_size_[0], kernel_size_[1], dilation_[0], dilation_[1], padding_[0], padding_[1], stride_[0], stride_[1]);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_col2im_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_col2im_backward(const Tensor & grad_output, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    auto dispatch_scalar_type = infer_scalar_type(grad_output);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 2);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 3);
            auto padding_ = check_intlist<2>(padding, "padding", 4);
            auto stride_ = check_intlist<2>(stride, "stride", 5);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_DoubleCol2Im_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, kernel_size_[0], kernel_size_[1], dilation_[0], dilation_[1], padding_[0], padding_[1], stride_[0], stride_[1]);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 2);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 3);
            auto padding_ = check_intlist<2>(padding, "padding", 4);
            auto stride_ = check_intlist<2>(stride, "stride", 5);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_FloatCol2Im_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, kernel_size_[0], kernel_size_[1], dilation_[0], dilation_[1], padding_[0], padding_[1], stride_[0], stride_[1]);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_col2im_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_im2col_forward_out(Tensor & output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 2);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 3);
            auto padding_ = check_intlist<2>(padding, "padding", 4);
            auto stride_ = check_intlist<2>(stride, "stride", 5);
            auto output_ = checked_tensor_unwrap(output,"output",5, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleIm2Col_updateOutput(globalContext().getTHCState(), self_, output_, kernel_size_[0], kernel_size_[1], dilation_[0], dilation_[1], padding_[0], padding_[1], stride_[0], stride_[1]);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 2);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 3);
            auto padding_ = check_intlist<2>(padding, "padding", 4);
            auto stride_ = check_intlist<2>(stride, "stride", 5);
            auto output_ = checked_tensor_unwrap(output,"output",5, false, Backend::CPU, ScalarType::Float);
            THNN_FloatIm2Col_updateOutput(globalContext().getTHCState(), self_, output_, kernel_size_[0], kernel_size_[1], dilation_[0], dilation_[1], padding_[0], padding_[1], stride_[0], stride_[1]);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_im2col_forward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_im2col_forward(const Tensor & self, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Double);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 2);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 3);
            auto padding_ = check_intlist<2>(padding, "padding", 4);
            auto stride_ = check_intlist<2>(stride, "stride", 5);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_DoubleIm2Col_updateOutput(globalContext().getTHCState(), self_, output_, kernel_size_[0], kernel_size_[1], dilation_[0], dilation_[1], padding_[0], padding_[1], stride_[0], stride_[1]);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        case ScalarType::Float: {
            auto self_ = checked_tensor_unwrap(self,"self",1, false, Backend::CPU, ScalarType::Float);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 2);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 3);
            auto padding_ = check_intlist<2>(padding, "padding", 4);
            auto stride_ = check_intlist<2>(stride, "stride", 5);
            auto output_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto output = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(output_));
            THNN_FloatIm2Col_updateOutput(globalContext().getTHCState(), self_, output_, kernel_size_[0], kernel_size_[1], dilation_[0], dilation_[1], padding_[0], padding_[1], stride_[0], stride_[1]);
            output_->maybe_zero_dim(false);
            return output;
            break;
        }
        default:
            AT_ERROR("_thnn_im2col_forward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_thnn_im2col_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef input_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) const {
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    auto dispatch_scalar_type = infer_scalar_type(grad_input);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto input_size_ = check_intlist<2>(input_size, "input_size", 2);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 4);
            auto padding_ = check_intlist<2>(padding, "padding", 5);
            auto stride_ = check_intlist<2>(stride, "stride", 6);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",6, false, Backend::CPU, ScalarType::Double);
            THNN_DoubleIm2Col_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], kernel_size_[0], kernel_size_[1], dilation_[0], dilation_[1], padding_[0], padding_[1], stride_[0], stride_[1]);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto input_size_ = check_intlist<2>(input_size, "input_size", 2);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 4);
            auto padding_ = check_intlist<2>(padding, "padding", 5);
            auto stride_ = check_intlist<2>(stride, "stride", 6);
            auto grad_input_ = checked_tensor_unwrap(grad_input,"grad_input",6, false, Backend::CPU, ScalarType::Float);
            THNN_FloatIm2Col_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], kernel_size_[0], kernel_size_[1], dilation_[0], dilation_[1], padding_[0], padding_[1], stride_[0], stride_[1]);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_im2col_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_thnn_im2col_backward(const Tensor & grad_output, IntArrayRef input_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    auto dispatch_scalar_type = infer_scalar_type(grad_output);
    switch (dispatch_scalar_type) {
        case ScalarType::Double: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Double);
            auto input_size_ = check_intlist<2>(input_size, "input_size", 2);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 4);
            auto padding_ = check_intlist<2>(padding, "padding", 5);
            auto stride_ = check_intlist<2>(stride, "stride", 6);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<double>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_DoubleIm2Col_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], kernel_size_[0], kernel_size_[1], dilation_[0], dilation_[1], padding_[0], padding_[1], stride_[0], stride_[1]);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        case ScalarType::Float: {
            auto grad_output_ = checked_tensor_unwrap(grad_output,"grad_output",1, false, Backend::CPU, ScalarType::Float);
            auto input_size_ = check_intlist<2>(input_size, "input_size", 2);
            auto kernel_size_ = check_intlist<2>(kernel_size, "kernel_size", 3);
            auto dilation_ = check_intlist<2>(dilation, "dilation", 4);
            auto padding_ = check_intlist<2>(padding, "padding", 5);
            auto stride_ = check_intlist<2>(stride, "stride", 6);
            auto grad_input_ = c10::make_intrusive<TensorImpl, UndefinedTensorImpl>(c10::Storage(caffe2::TypeMeta::Make<float>(), 0, allocator(), true),CPUTensorId()).release();
            auto grad_input = Tensor(c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>::reclaim(grad_input_));
            THNN_FloatIm2Col_updateGradInput(globalContext().getTHCState(), grad_output_, grad_input_, input_size_[0], input_size_[1], kernel_size_[0], kernel_size_[1], dilation_[0], dilation_[1], padding_[0], padding_[1], stride_[0], stride_[1]);
            grad_input_->maybe_zero_dim(false);
            return grad_input;
            break;
        }
        default:
            AT_ERROR("_thnn_im2col_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::abs_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_abs__cpu(/* actuals */ self);
        break;
        default:
            AT_ERROR("abs_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::abs_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_abs_out_cpu(/* actuals */ out, self);
        break;
        default:
            AT_ERROR("abs_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::acos_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_acos__cpu(/* actuals */ self);
        break;
        default:
            AT_ERROR("acos_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::acos_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_acos_out_cpu(/* actuals */ out, self);
        break;
        default:
            AT_ERROR("acos_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::add(const Tensor & self, const Tensor & other, Scalar alpha) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::add(/* actuals */ self, other, alpha);
        break;
        default:
            AT_ERROR("add not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::add_(Tensor & self, const Tensor & other, Scalar alpha) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::add_(/* actuals */ self, other, alpha);
        break;
        default:
            AT_ERROR("add_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::add_out(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::add_out(/* actuals */ out, self, other, alpha);
        break;
        default:
            AT_ERROR("add_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::arange_out(Tensor & out, Scalar start, Scalar end, Scalar step) const {
    const OptionalDeviceGuard device_guard(device_of(out));
    auto dispatch_scalar_type = infer_scalar_type(out);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::arange_cpu_out(/* actuals */ out, start, end, step);
        break;
        default:
            AT_ERROR("arange_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::as_strided(const Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool:
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Half:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::as_strided_tensorimpl(/* actuals */ self, size, stride, storage_offset);
        break;
        default:
            AT_ERROR("as_strided not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::asin_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_asin__cpu(/* actuals */ self);
        break;
        default:
            AT_ERROR("asin_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::asin_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_asin_out_cpu(/* actuals */ out, self);
        break;
        default:
            AT_ERROR("asin_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::atan_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_atan__cpu(/* actuals */ self);
        break;
        default:
            AT_ERROR("atan_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::atan_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_atan_out_cpu(/* actuals */ out, self);
        break;
        default:
            AT_ERROR("atan_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::baddbmm(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::baddbmm_cpu(/* actuals */ self, batch1, batch2, beta, alpha);
        break;
        default:
            AT_ERROR("baddbmm not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::baddbmm_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::baddbmm__cpu(/* actuals */ self, batch1, batch2, beta, alpha);
        break;
        default:
            AT_ERROR("baddbmm_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::baddbmm_out(Tensor & out, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::baddbmm_out_cpu(/* actuals */ out, self, batch1, batch2, beta, alpha);
        break;
        default:
            AT_ERROR("baddbmm_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::bernoulli_(Tensor & self, const Tensor & p, Generator * generator) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::bernoulli_tensor_cpu_(/* actuals */ self, p, generator);
        break;
        default:
            AT_ERROR("bernoulli_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::bernoulli_(Tensor & self, double p, Generator * generator) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::bernoulli_scalar_cpu_(/* actuals */ self, p, generator);
        break;
        default:
            AT_ERROR("bernoulli_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::bincount(const Tensor & self, const Tensor & weights, int64_t minlength) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_bincount_cpu(/* actuals */ self, weights, minlength);
        break;
        default:
            AT_ERROR("bincount not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::bmm(const Tensor & self, const Tensor & mat2) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::bmm_cpu(/* actuals */ self, mat2);
        break;
        default:
            AT_ERROR("bmm not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::bmm_out(Tensor & out, const Tensor & self, const Tensor & mat2) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::bmm_out_cpu(/* actuals */ out, self, mat2);
        break;
        default:
            AT_ERROR("bmm_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::ceil_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_ceil__cpu(/* actuals */ self);
        break;
        default:
            AT_ERROR("ceil_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::ceil_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_ceil_out_cpu(/* actuals */ out, self);
        break;
        default:
            AT_ERROR("ceil_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::clamp_(Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_clamp__cpu(/* actuals */ self, min, max);
        break;
        default:
            AT_ERROR("clamp_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::clamp_out(Tensor & out, const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_clamp_out_cpu(/* actuals */ out, self, min, max);
        break;
        default:
            AT_ERROR("clamp_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::clamp_max_(Tensor & self, Scalar max) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_clamp_max__cpu(/* actuals */ self, max);
        break;
        default:
            AT_ERROR("clamp_max_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::clamp_max_out(Tensor & out, const Tensor & self, Scalar max) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_clamp_max_out_cpu(/* actuals */ out, self, max);
        break;
        default:
            AT_ERROR("clamp_max_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::clamp_min_(Tensor & self, Scalar min) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_clamp_min__cpu(/* actuals */ self, min);
        break;
        default:
            AT_ERROR("clamp_min_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::clamp_min_out(Tensor & out, const Tensor & self, Scalar min) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_clamp_min_out_cpu(/* actuals */ out, self, min);
        break;
        default:
            AT_ERROR("clamp_min_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s_copy_(Tensor & self, const Tensor & src, bool non_blocking) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool:
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Half:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_s_copy__cpu(/* actuals */ self, src, non_blocking);
        break;
        default:
            AT_ERROR("s_copy_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
void CPUType::_copy_same_type_(Tensor & self, const Tensor & src) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool:
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Half:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
 at::native::_copy_same_type__cpu(/* actuals */ self, src);
        break;
        default:
            AT_ERROR("_copy_same_type_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::cos_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_cos__cpu(/* actuals */ self);
        break;
        default:
            AT_ERROR("cos_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::cos_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_cos_out_cpu(/* actuals */ out, self);
        break;
        default:
            AT_ERROR("cos_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::cosh_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_cosh__cpu(/* actuals */ self);
        break;
        default:
            AT_ERROR("cosh_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::cosh_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_cosh_out_cpu(/* actuals */ out, self);
        break;
        default:
            AT_ERROR("cosh_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor> CPUType::_ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank, bool zero_infinity) const {
    const OptionalDeviceGuard device_guard(device_of(log_probs));
    auto dispatch_scalar_type = infer_scalar_type(log_probs);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::ctc_loss_cpu(/* actuals */ log_probs, targets, input_lengths, target_lengths, blank, zero_infinity);
        break;
        default:
            AT_ERROR("_ctc_loss not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_ctc_loss_backward(const Tensor & grad, const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, const Tensor & neg_log_likelihood, const Tensor & log_alpha, int64_t blank, bool zero_infinity) const {
    const OptionalDeviceGuard device_guard(device_of(grad));
    auto dispatch_scalar_type = infer_scalar_type(grad);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::ctc_loss_backward_cpu(/* actuals */ grad, log_probs, targets, input_lengths, target_lengths, neg_log_likelihood, log_alpha, blank, zero_infinity);
        break;
        default:
            AT_ERROR("_ctc_loss_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::embedding_dense_backward(const Tensor & grad_output, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    auto dispatch_scalar_type = infer_scalar_type(grad_output);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::embedding_dense_backward_cpu(/* actuals */ grad_output, indices, num_weights, padding_idx, scale_grad_by_freq);
        break;
        default:
            AT_ERROR("embedding_dense_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::embedding_renorm_(Tensor & self, const Tensor & indices, double max_norm, double norm_type) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::embedding_renorm_cpu_(/* actuals */ self, indices, max_norm, norm_type);
        break;
        default:
            AT_ERROR("embedding_renorm_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor,Tensor,Tensor> CPUType::_embedding_bag(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const Tensor & per_sample_weights) const {
    const OptionalDeviceGuard device_guard(device_of(weight));
    auto dispatch_scalar_type = infer_scalar_type(weight);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_embedding_bag_cpu(/* actuals */ weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights);
        break;
        default:
            AT_ERROR("_embedding_bag not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_embedding_bag_dense_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const Tensor & per_sample_weights) const {
    const OptionalDeviceGuard device_guard(device_of(grad));
    auto dispatch_scalar_type = infer_scalar_type(grad);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_embedding_bag_dense_backward_cpu(/* actuals */ grad, indices, offsets, offset2bag, bag_size, maximum_indices, num_weights, scale_grad_by_freq, mode, per_sample_weights);
        break;
        default:
            AT_ERROR("_embedding_bag_dense_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_embedding_bag_per_sample_weights_backward(const Tensor & grad, const Tensor & weight, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, int64_t mode) const {
    const OptionalDeviceGuard device_guard(device_of(grad));
    auto dispatch_scalar_type = infer_scalar_type(grad);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_embedding_bag_per_sample_weights_backward_cpu(/* actuals */ grad, weight, indices, offsets, offset2bag, mode);
        break;
        default:
            AT_ERROR("_embedding_bag_per_sample_weights_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::empty(IntArrayRef size, const TensorOptions & options) const {
    const DeviceGuard device_guard(options.device());
    auto dispatch_scalar_type = typeMetaToScalarType(options.dtype());
    switch (dispatch_scalar_type) {
        case ScalarType::Bool:
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Half:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::empty_cpu(/* actuals */ size, options);
        break;
        default:
            AT_ERROR("empty not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::resize_(Tensor & self, IntArrayRef size) const {
    // DeviceGuard omitted
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool:
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Half:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::resize_cpu_(/* actuals */ self, size);
        break;
        default:
            AT_ERROR("resize_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::empty_strided(IntArrayRef size, IntArrayRef stride, const TensorOptions & options) const {
    const DeviceGuard device_guard(options.device());
    auto dispatch_scalar_type = typeMetaToScalarType(options.dtype());
    switch (dispatch_scalar_type) {
        case ScalarType::Bool:
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Half:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::empty_strided_cpu(/* actuals */ size, stride, options);
        break;
        default:
            AT_ERROR("empty_strided not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::erf_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_erf__cpu(/* actuals */ self);
        break;
        default:
            AT_ERROR("erf_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::erf_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_erf_out_cpu(/* actuals */ out, self);
        break;
        default:
            AT_ERROR("erf_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::erfc_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_erfc__cpu(/* actuals */ self);
        break;
        default:
            AT_ERROR("erfc_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::erfc_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_erfc_out_cpu(/* actuals */ out, self);
        break;
        default:
            AT_ERROR("erfc_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::exp_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_exp__cpu(/* actuals */ self);
        break;
        default:
            AT_ERROR("exp_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::exp_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_exp_out_cpu(/* actuals */ out, self);
        break;
        default:
            AT_ERROR("exp_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::expm1_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_expm1__cpu(/* actuals */ self);
        break;
        default:
            AT_ERROR("expm1_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::expm1_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_expm1_out_cpu(/* actuals */ out, self);
        break;
        default:
            AT_ERROR("expm1_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::eye_out(Tensor & out, int64_t n) const {
    const OptionalDeviceGuard device_guard(device_of(out));
    auto dispatch_scalar_type = infer_scalar_type(out);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::eye_out_cpu(/* actuals */ out, n);
        break;
        default:
            AT_ERROR("eye_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::eye_out(Tensor & out, int64_t n, int64_t m) const {
    const OptionalDeviceGuard device_guard(device_of(out));
    auto dispatch_scalar_type = infer_scalar_type(out);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::eye_out_cpu(/* actuals */ out, n, m);
        break;
        default:
            AT_ERROR("eye_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::floor_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_floor__cpu(/* actuals */ self);
        break;
        default:
            AT_ERROR("floor_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::floor_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_floor_out_cpu(/* actuals */ out, self);
        break;
        default:
            AT_ERROR("floor_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::frac_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_frac__cpu(/* actuals */ self);
        break;
        default:
            AT_ERROR("frac_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::frac_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_frac_out_cpu(/* actuals */ out, self);
        break;
        default:
            AT_ERROR("frac_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::from_file(std::string filename, c10::optional<bool> shared, c10::optional<int64_t> size, const TensorOptions & options) const {
    const DeviceGuard device_guard(options.device());
    auto dispatch_scalar_type = typeMetaToScalarType(options.dtype());
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::from_file(/* actuals */ filename, shared, size, options);
        break;
        default:
            AT_ERROR("from_file not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::grid_sampler_2d(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode) const {
    const OptionalDeviceGuard device_guard(device_of(input));
    auto dispatch_scalar_type = infer_scalar_type(input);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::grid_sampler_2d_cpu(/* actuals */ input, grid, interpolation_mode, padding_mode);
        break;
        default:
            AT_ERROR("grid_sampler_2d not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor> CPUType::grid_sampler_2d_backward(const Tensor & grad_output, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    auto dispatch_scalar_type = infer_scalar_type(grad_output);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::grid_sampler_2d_backward_cpu(/* actuals */ grad_output, input, grid, interpolation_mode, padding_mode);
        break;
        default:
            AT_ERROR("grid_sampler_2d_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::grid_sampler_3d(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode) const {
    const OptionalDeviceGuard device_guard(device_of(input));
    auto dispatch_scalar_type = infer_scalar_type(input);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::grid_sampler_3d_cpu(/* actuals */ input, grid, interpolation_mode, padding_mode);
        break;
        default:
            AT_ERROR("grid_sampler_3d not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor> CPUType::grid_sampler_3d_backward(const Tensor & grad_output, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    auto dispatch_scalar_type = infer_scalar_type(grad_output);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::grid_sampler_3d_backward_cpu(/* actuals */ grad_output, input, grid, interpolation_mode, padding_mode);
        break;
        default:
            AT_ERROR("grid_sampler_3d_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_fft_with_size(const Tensor & self, int64_t signal_ndim, bool complex_input, bool complex_output, bool inverse, IntArrayRef checked_signal_sizes, bool normalized, bool onesided, IntArrayRef output_sizes) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_fft_mkl(/* actuals */ self, signal_ndim, complex_input, complex_output, inverse, checked_signal_sizes, normalized, onesided, output_sizes);
        break;
        default:
            AT_ERROR("_fft_with_size not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_inverse_helper(const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_inverse_helper_cpu(/* actuals */ self);
        break;
        default:
            AT_ERROR("_inverse_helper not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::kl_div_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::kl_div_backward_cpu(/* actuals */ grad_output, self, target, reduction);
        break;
        default:
            AT_ERROR("kl_div_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor &,Tensor &> CPUType::kthvalue_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, int64_t dim, bool keepdim) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::kthvalue_out_cpu(/* actuals */ values, indices, self, k, dim, keepdim);
        break;
        default:
            AT_ERROR("kthvalue_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::linspace_out(Tensor & out, Scalar start, Scalar end, int64_t steps) const {
    const OptionalDeviceGuard device_guard(device_of(out));
    auto dispatch_scalar_type = infer_scalar_type(out);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::linspace_cpu_out(/* actuals */ out, start, end, steps);
        break;
        default:
            AT_ERROR("linspace_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::log_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_log__cpu(/* actuals */ self);
        break;
        default:
            AT_ERROR("log_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::log_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_log_out_cpu(/* actuals */ out, self);
        break;
        default:
            AT_ERROR("log_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::log10_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_log10__cpu(/* actuals */ self);
        break;
        default:
            AT_ERROR("log10_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::log10_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_log10_out_cpu(/* actuals */ out, self);
        break;
        default:
            AT_ERROR("log10_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::log1p_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_log1p__cpu(/* actuals */ self);
        break;
        default:
            AT_ERROR("log1p_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::log1p_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_log1p_out_cpu(/* actuals */ out, self);
        break;
        default:
            AT_ERROR("log1p_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::log2_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_log2__cpu(/* actuals */ self);
        break;
        default:
            AT_ERROR("log2_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::log2_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_log2_out_cpu(/* actuals */ out, self);
        break;
        default:
            AT_ERROR("log2_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::logspace_out(Tensor & out, Scalar start, Scalar end, int64_t steps, double base) const {
    const OptionalDeviceGuard device_guard(device_of(out));
    auto dispatch_scalar_type = infer_scalar_type(out);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::logspace_cpu_out(/* actuals */ out, start, end, steps, base);
        break;
        default:
            AT_ERROR("logspace_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_log_softmax(const Tensor & self, int64_t dim, bool half_to_float) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::log_softmax_cpu(/* actuals */ self, dim, half_to_float);
        break;
        default:
            AT_ERROR("_log_softmax not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_log_softmax_backward_data(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::log_softmax_backward_cpu(/* actuals */ grad_output, output, dim, self);
        break;
        default:
            AT_ERROR("_log_softmax_backward_data not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::narrow_copy(const Tensor & self, int64_t dim, int64_t start, int64_t length) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::narrow_copy_dense(/* actuals */ self, dim, start, length);
        break;
        default:
            AT_ERROR("narrow_copy not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor,Tensor> CPUType::native_batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps) const {
    const OptionalDeviceGuard device_guard(device_of(input));
    auto dispatch_scalar_type = infer_scalar_type(input);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::batch_norm_cpu(/* actuals */ input, weight, bias, running_mean, running_var, training, momentum, eps);
        break;
        default:
            AT_ERROR("native_batch_norm not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor,Tensor> CPUType::native_batch_norm_backward(const Tensor & grad_out, const Tensor & input, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_invstd, bool train, double eps, std::array<bool,3> output_mask) const {
    const OptionalDeviceGuard device_guard(device_of(grad_out));
    auto dispatch_scalar_type = infer_scalar_type(grad_out);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::batch_norm_backward_cpu(/* actuals */ grad_out, input, weight, running_mean, running_var, save_mean, save_invstd, train, eps, output_mask);
        break;
        default:
            AT_ERROR("native_batch_norm_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor> CPUType::batch_norm_update_stats(const Tensor & input, const Tensor & running_mean, const Tensor & running_var, double momentum) const {
    const OptionalDeviceGuard device_guard(device_of(input));
    auto dispatch_scalar_type = infer_scalar_type(input);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::batch_norm_update_stats_cpu(/* actuals */ input, running_mean, running_var, momentum);
        break;
        default:
            AT_ERROR("batch_norm_update_stats not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::randperm_out(Tensor & out, int64_t n, Generator * generator) const {
    const OptionalDeviceGuard device_guard(device_of(out));
    auto dispatch_scalar_type = infer_scalar_type(out);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::randperm_out_cpu(/* actuals */ out, n, generator);
        break;
        default:
            AT_ERROR("randperm_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::range_out(Tensor & out, Scalar start, Scalar end, Scalar step) const {
    const OptionalDeviceGuard device_guard(device_of(out));
    auto dispatch_scalar_type = infer_scalar_type(out);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::range_cpu_out(/* actuals */ out, start, end, step);
        break;
        default:
            AT_ERROR("range_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::reciprocal_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_reciprocal__cpu(/* actuals */ self);
        break;
        default:
            AT_ERROR("reciprocal_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::reciprocal_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_reciprocal_out_cpu(/* actuals */ out, self);
        break;
        default:
            AT_ERROR("reciprocal_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::neg_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_neg__cpu(/* actuals */ self);
        break;
        default:
            AT_ERROR("neg_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::neg_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_neg_out_cpu(/* actuals */ out, self);
        break;
        default:
            AT_ERROR("neg_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::repeat_interleave(const Tensor & repeats) const {
    const OptionalDeviceGuard device_guard(device_of(repeats));
    auto dispatch_scalar_type = infer_scalar_type(repeats);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::repeat_interleave_cpu(/* actuals */ repeats);
        break;
        default:
            AT_ERROR("repeat_interleave not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::round_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_round__cpu(/* actuals */ self);
        break;
        default:
            AT_ERROR("round_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::round_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_round_out_cpu(/* actuals */ out, self);
        break;
        default:
            AT_ERROR("round_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::relu(const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::relu(/* actuals */ self);
        break;
        default:
            AT_ERROR("relu not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::relu_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::relu_(/* actuals */ self);
        break;
        default:
            AT_ERROR("relu_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::prelu(const Tensor & self, const Tensor & weight) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::prelu_cpu(/* actuals */ self, weight);
        break;
        default:
            AT_ERROR("prelu not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor> CPUType::prelu_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::prelu_backward_cpu(/* actuals */ grad_output, self, weight);
        break;
        default:
            AT_ERROR("prelu_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::hardshrink(const Tensor & self, Scalar lambd) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::hardshrink_cpu(/* actuals */ self, lambd);
        break;
        default:
            AT_ERROR("hardshrink not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::hardshrink_backward(const Tensor & grad_out, const Tensor & self, Scalar lambd) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::hardshrink_backward_cpu(/* actuals */ grad_out, self, lambd);
        break;
        default:
            AT_ERROR("hardshrink_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::rsqrt_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_rsqrt__cpu(/* actuals */ self);
        break;
        default:
            AT_ERROR("rsqrt_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::rsqrt_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_rsqrt_out_cpu(/* actuals */ out, self);
        break;
        default:
            AT_ERROR("rsqrt_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::sigmoid_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_sigmoid__cpu(/* actuals */ self);
        break;
        default:
            AT_ERROR("sigmoid_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::sigmoid_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_sigmoid_out_cpu(/* actuals */ out, self);
        break;
        default:
            AT_ERROR("sigmoid_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::sin_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_sin__cpu(/* actuals */ self);
        break;
        default:
            AT_ERROR("sin_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::sin_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_sin_out_cpu(/* actuals */ out, self);
        break;
        default:
            AT_ERROR("sin_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::sinh_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_sinh__cpu(/* actuals */ self);
        break;
        default:
            AT_ERROR("sinh_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::sinh_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_sinh_out_cpu(/* actuals */ out, self);
        break;
        default:
            AT_ERROR("sinh_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_softmax(const Tensor & self, int64_t dim, bool half_to_float) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::softmax_cpu(/* actuals */ self, dim, half_to_float);
        break;
        default:
            AT_ERROR("_softmax not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_softmax_backward_data(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::softmax_backward_cpu(/* actuals */ grad_output, output, dim, self);
        break;
        default:
            AT_ERROR("_softmax_backward_data not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::_sparse_dense_add_out(Tensor & out, const Tensor & self, SparseTensorRef other, Scalar alpha) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::add_out_dense_sparse_cpu(/* actuals */ out, self, other, alpha);
        break;
        default:
            AT_ERROR("_sparse_dense_add_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::sspaddmm_out(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_sspaddmm_out_only_sparse(/* actuals */ out, self, mat1, mat2, beta, alpha);
        break;
        default:
            AT_ERROR("sspaddmm_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::sqrt_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_sqrt__cpu(/* actuals */ self);
        break;
        default:
            AT_ERROR("sqrt_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::sqrt_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_sqrt_out_cpu(/* actuals */ out, self);
        break;
        default:
            AT_ERROR("sqrt_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::tan_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_tan__cpu(/* actuals */ self);
        break;
        default:
            AT_ERROR("tan_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::tan_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_tan_out_cpu(/* actuals */ out, self);
        break;
        default:
            AT_ERROR("tan_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::tanh_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_tanh__cpu(/* actuals */ self);
        break;
        default:
            AT_ERROR("tanh_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::tanh_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_tanh_out_cpu(/* actuals */ out, self);
        break;
        default:
            AT_ERROR("tanh_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::flip(const Tensor & self, IntArrayRef dims) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::flip_cpu(/* actuals */ self, dims);
        break;
        default:
            AT_ERROR("flip not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::roll(const Tensor & self, IntArrayRef shifts, IntArrayRef dims) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::roll_cpu(/* actuals */ self, shifts, dims);
        break;
        default:
            AT_ERROR("roll not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::trunc_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_trunc__cpu(/* actuals */ self);
        break;
        default:
            AT_ERROR("trunc_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::trunc_out(Tensor & out, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_trunc_out_cpu(/* actuals */ out, self);
        break;
        default:
            AT_ERROR("trunc_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor> CPUType::_unique(const Tensor & self, bool sorted, bool return_inverse) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_unique_cpu(/* actuals */ self, sorted, return_inverse);
        break;
        default:
            AT_ERROR("_unique not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor,Tensor> CPUType::unique_dim(const Tensor & self, int64_t dim, bool sorted, bool return_inverse, bool return_counts) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::unique_dim_cpu(/* actuals */ self, dim, sorted, return_inverse, return_counts);
        break;
        default:
            AT_ERROR("unique_dim not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor,Tensor> CPUType::unique_consecutive(const Tensor & self, bool return_inverse, bool return_counts, c10::optional<int64_t> dim) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::unique_consecutive_cpu(/* actuals */ self, return_inverse, return_counts, dim);
        break;
        default:
            AT_ERROR("unique_consecutive not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor,Tensor> CPUType::unique_dim_consecutive(const Tensor & self, int64_t dim, bool return_inverse, bool return_counts) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::unique_dim_consecutive_cpu(/* actuals */ self, dim, return_inverse, return_counts);
        break;
        default:
            AT_ERROR("unique_dim_consecutive not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor,Tensor> CPUType::_unique2(const Tensor & self, bool sorted, bool return_inverse, bool return_counts) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_unique2_cpu(/* actuals */ self, sorted, return_inverse, return_counts);
        break;
        default:
            AT_ERROR("_unique2 not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_s_where(const Tensor & condition, const Tensor & self, const Tensor & other) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_s_where_cpu(/* actuals */ condition, self, other);
        break;
        default:
            AT_ERROR("_s_where not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_standard_gamma_grad(const Tensor & self, const Tensor & output) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_standard_gamma_grad_cpu(/* actuals */ self, output);
        break;
        default:
            AT_ERROR("_standard_gamma_grad not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_standard_gamma(const Tensor & self, Generator * generator) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_s_gamma_cpu(/* actuals */ self, generator);
        break;
        default:
            AT_ERROR("_standard_gamma not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_sample_dirichlet(const Tensor & self, Generator * generator) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_s_dirichlet_cpu(/* actuals */ self, generator);
        break;
        default:
            AT_ERROR("_sample_dirichlet not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::poisson(const Tensor & self, Generator * generator) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_s_poisson_cpu(/* actuals */ self, generator);
        break;
        default:
            AT_ERROR("poisson not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::clone(const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool:
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Half:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::clone(/* actuals */ self);
        break;
        default:
            AT_ERROR("clone not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::resize_as_(Tensor & self, const Tensor & the_template) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool:
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Half:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::resize_as_(/* actuals */ self, the_template);
        break;
        default:
            AT_ERROR("resize_as_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::pow_out(Tensor & out, const Tensor & self, Scalar exponent) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::pow_out(/* actuals */ out, self, exponent);
        break;
        default:
            AT_ERROR("pow_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::pow(const Tensor & self, Scalar exponent) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::pow(/* actuals */ self, exponent);
        break;
        default:
            AT_ERROR("pow not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::zero_(Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool:
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Half:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::zero_(/* actuals */ self);
        break;
        default:
            AT_ERROR("zero_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s_native_addmm_out(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::s_addmm_out_sparse_dense_cpu(/* actuals */ out, self, mat1, mat2, beta, alpha);
        break;
        default:
            AT_ERROR("s_native_addmm_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::s_native_addmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::s_addmm_sparse_dense_cpu(/* actuals */ self, mat1, mat2, beta, alpha);
        break;
        default:
            AT_ERROR("s_native_addmm not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::s_native_addmm_(Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::s_addmm_sparse_dense_cpu_(/* actuals */ self, mat1, mat2, beta, alpha);
        break;
        default:
            AT_ERROR("s_native_addmm_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::sparse_mask(const Tensor & self, SparseTensorRef mask) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::sparse_mask_cpu(/* actuals */ self, mask);
        break;
        default:
            AT_ERROR("sparse_mask not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::to_sparse(const Tensor & self, int64_t sparse_dim) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::dense_to_sparse(/* actuals */ self, sparse_dim);
        break;
        default:
            AT_ERROR("to_sparse not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::to_sparse(const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::dense_to_sparse(/* actuals */ self);
        break;
        default:
            AT_ERROR("to_sparse not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::to_mkldnn(const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::dense_to_mkldnn(/* actuals */ self);
        break;
        default:
            AT_ERROR("to_mkldnn not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::quantize_linear(const Tensor & self, double scale, int64_t zero_point) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::quantize_linear_cpu(/* actuals */ self, scale, zero_point);
        break;
        default:
            AT_ERROR("quantize_linear not supported on CPUType for ", dispatch_scalar_type);
    }
}
Scalar CPUType::_local_scalar_dense(const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Bool:
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Half:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_local_scalar_dense_cpu(/* actuals */ self);
        break;
        default:
            AT_ERROR("_local_scalar_dense not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::tril_(Tensor & self, int64_t diagonal) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::tril_cpu_(/* actuals */ self, diagonal);
        break;
        default:
            AT_ERROR("tril_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::triu_(Tensor & self, int64_t diagonal) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::triu_cpu_(/* actuals */ self, diagonal);
        break;
        default:
            AT_ERROR("triu_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::lerp_(Tensor & self, const Tensor & end, Scalar weight) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::lerp_cpu_scalar_(/* actuals */ self, end, weight);
        break;
        default:
            AT_ERROR("lerp_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::lerp_(Tensor & self, const Tensor & end, const Tensor & weight) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::lerp_cpu_tensor_(/* actuals */ self, end, weight);
        break;
        default:
            AT_ERROR("lerp_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::uniform_(Tensor & self, double from, double to, Generator * generator) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::uniform_cpu_(/* actuals */ self, from, to, generator);
        break;
        default:
            AT_ERROR("uniform_ not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::triu_out(Tensor & out, const Tensor & self, int64_t diagonal) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::triu_cpu_out(/* actuals */ out, self, diagonal);
        break;
        default:
            AT_ERROR("triu_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::tril_out(Tensor & out, const Tensor & self, int64_t diagonal) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::tril_cpu_out(/* actuals */ out, self, diagonal);
        break;
        default:
            AT_ERROR("tril_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::tril_indices(int64_t row, int64_t col, int64_t offset, const TensorOptions & options) const {
    const DeviceGuard device_guard(options.device());
    auto dispatch_scalar_type = typeMetaToScalarType(options.dtype());
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::tril_indices_cpu(/* actuals */ row, col, offset, options);
        break;
        default:
            AT_ERROR("tril_indices not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::triu_indices(int64_t row, int64_t col, int64_t offset, const TensorOptions & options) const {
    const DeviceGuard device_guard(options.device());
    auto dispatch_scalar_type = typeMetaToScalarType(options.dtype());
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::triu_indices_cpu(/* actuals */ row, col, offset, options);
        break;
        default:
            AT_ERROR("triu_indices not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor> CPUType::_triangular_solve_helper(const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_triangular_solve_helper_cpu(/* actuals */ self, A, upper, transpose, unitriangular);
        break;
        default:
            AT_ERROR("_triangular_solve_helper not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_cholesky_helper(const Tensor & self, bool upper) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_cholesky_helper_cpu(/* actuals */ self, upper);
        break;
        default:
            AT_ERROR("_cholesky_helper not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_cholesky_solve_helper(const Tensor & self, const Tensor & A, bool upper) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_cholesky_solve_helper_cpu(/* actuals */ self, A, upper);
        break;
        default:
            AT_ERROR("_cholesky_solve_helper not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor> CPUType::_solve_helper(const Tensor & self, const Tensor & A) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_solve_helper_cpu(/* actuals */ self, A);
        break;
        default:
            AT_ERROR("_solve_helper not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor,Tensor> CPUType::_lu_with_info(const Tensor & self, bool pivot, bool check_errors) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_lu_with_info_cpu(/* actuals */ self, pivot, check_errors);
        break;
        default:
            AT_ERROR("_lu_with_info not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::lerp_out(Tensor & out, const Tensor & self, const Tensor & end, Scalar weight) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::lerp_cpu_scalar_out(/* actuals */ out, self, end, weight);
        break;
        default:
            AT_ERROR("lerp_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::lerp_out(Tensor & out, const Tensor & self, const Tensor & end, const Tensor & weight) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::lerp_cpu_tensor_out(/* actuals */ out, self, end, weight);
        break;
        default:
            AT_ERROR("lerp_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::lerp(const Tensor & self, const Tensor & end, Scalar weight) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::lerp_cpu_scalar(/* actuals */ self, end, weight);
        break;
        default:
            AT_ERROR("lerp not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::lerp(const Tensor & self, const Tensor & end, const Tensor & weight) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::lerp_cpu_tensor(/* actuals */ self, end, weight);
        break;
        default:
            AT_ERROR("lerp not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::histc_out(Tensor & out, const Tensor & self, int64_t bins, Scalar min, Scalar max) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_histc_out_cpu(/* actuals */ out, self, bins, min, max);
        break;
        default:
            AT_ERROR("histc_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::histc(const Tensor & self, int64_t bins, Scalar min, Scalar max) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::_histc_cpu(/* actuals */ self, bins, min, max);
        break;
        default:
            AT_ERROR("histc not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::median(const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::median_cpu(/* actuals */ self);
        break;
        default:
            AT_ERROR("median not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::adaptive_avg_pool2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::adaptive_avg_pool2d_out_cpu(/* actuals */ out, self, output_size);
        break;
        default:
            AT_ERROR("adaptive_avg_pool2d_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::adaptive_avg_pool2d_cpu(/* actuals */ self, output_size);
        break;
        default:
            AT_ERROR("_adaptive_avg_pool2d not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::_adaptive_avg_pool2d_backward(const Tensor & grad_output, const Tensor & self) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::adaptive_avg_pool2d_backward_cpu(/* actuals */ grad_output, self);
        break;
        default:
            AT_ERROR("_adaptive_avg_pool2d_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor &,Tensor &> CPUType::adaptive_max_pool2d_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::adaptive_max_pool2d_out_cpu(/* actuals */ out, indices, self, output_size);
        break;
        default:
            AT_ERROR("adaptive_max_pool2d_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor> CPUType::adaptive_max_pool2d(const Tensor & self, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::adaptive_max_pool2d_cpu(/* actuals */ self, output_size);
        break;
        default:
            AT_ERROR("adaptive_max_pool2d not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::adaptive_max_pool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::adaptive_max_pool2d_backward_out_cpu(/* actuals */ grad_input, grad_output, self, indices);
        break;
        default:
            AT_ERROR("adaptive_max_pool2d_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::adaptive_max_pool2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::adaptive_max_pool2d_backward_cpu(/* actuals */ grad_output, self, indices);
        break;
        default:
            AT_ERROR("adaptive_max_pool2d_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor &,Tensor &> CPUType::adaptive_max_pool3d_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::adaptive_max_pool3d_out_cpu(/* actuals */ out, indices, self, output_size);
        break;
        default:
            AT_ERROR("adaptive_max_pool3d_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor> CPUType::adaptive_max_pool3d(const Tensor & self, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::adaptive_max_pool3d_cpu(/* actuals */ self, output_size);
        break;
        default:
            AT_ERROR("adaptive_max_pool3d not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::adaptive_max_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::adaptive_max_pool3d_backward_out_cpu(/* actuals */ grad_input, grad_output, self, indices);
        break;
        default:
            AT_ERROR("adaptive_max_pool3d_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::adaptive_max_pool3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::adaptive_max_pool3d_backward_cpu(/* actuals */ grad_output, self, indices);
        break;
        default:
            AT_ERROR("adaptive_max_pool3d_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::avg_pool2d_out(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::avg_pool2d_out(/* actuals */ out, self, kernel_size, stride, padding, ceil_mode, count_include_pad);
        break;
        default:
            AT_ERROR("avg_pool2d_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::avg_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::avg_pool2d(/* actuals */ self, kernel_size, stride, padding, ceil_mode, count_include_pad);
        break;
        default:
            AT_ERROR("avg_pool2d not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor &,Tensor &> CPUType::fractional_max_pool2d_out(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::fractional_max_pool2d_out_cpu(/* actuals */ output, indices, self, kernel_size, output_size, random_samples);
        break;
        default:
            AT_ERROR("fractional_max_pool2d_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor> CPUType::fractional_max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::fractional_max_pool2d_cpu(/* actuals */ self, kernel_size, output_size, random_samples);
        break;
        default:
            AT_ERROR("fractional_max_pool2d not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::fractional_max_pool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::fractional_max_pool2d_backward_out_cpu(/* actuals */ grad_input, grad_output, self, kernel_size, output_size, indices);
        break;
        default:
            AT_ERROR("fractional_max_pool2d_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::fractional_max_pool2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::fractional_max_pool2d_backward_cpu(/* actuals */ grad_output, self, kernel_size, output_size, indices);
        break;
        default:
            AT_ERROR("fractional_max_pool2d_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor &,Tensor &> CPUType::fractional_max_pool3d_out(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::fractional_max_pool3d_out_cpu(/* actuals */ output, indices, self, kernel_size, output_size, random_samples);
        break;
        default:
            AT_ERROR("fractional_max_pool3d_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
std::tuple<Tensor,Tensor> CPUType::fractional_max_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::fractional_max_pool3d_cpu(/* actuals */ self, kernel_size, output_size, random_samples);
        break;
        default:
            AT_ERROR("fractional_max_pool3d not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::fractional_max_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::fractional_max_pool3d_backward_out_cpu(/* actuals */ grad_input, grad_output, self, kernel_size, output_size, indices);
        break;
        default:
            AT_ERROR("fractional_max_pool3d_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::fractional_max_pool3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::fractional_max_pool3d_backward_cpu(/* actuals */ grad_output, self, kernel_size, output_size, indices);
        break;
        default:
            AT_ERROR("fractional_max_pool3d_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::reflection_pad1d_out(Tensor & out, const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::reflection_pad1d_out_cpu(/* actuals */ out, self, padding);
        break;
        default:
            AT_ERROR("reflection_pad1d_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::reflection_pad1d(const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::reflection_pad1d_cpu(/* actuals */ self, padding);
        break;
        default:
            AT_ERROR("reflection_pad1d not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::reflection_pad1d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::reflection_pad1d_backward_out_cpu(/* actuals */ grad_input, grad_output, self, padding);
        break;
        default:
            AT_ERROR("reflection_pad1d_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::reflection_pad1d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::reflection_pad1d_backward_cpu(/* actuals */ grad_output, self, padding);
        break;
        default:
            AT_ERROR("reflection_pad1d_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::reflection_pad2d_out(Tensor & out, const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::reflection_pad2d_out_cpu(/* actuals */ out, self, padding);
        break;
        default:
            AT_ERROR("reflection_pad2d_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::reflection_pad2d(const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::reflection_pad2d_cpu(/* actuals */ self, padding);
        break;
        default:
            AT_ERROR("reflection_pad2d not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::reflection_pad2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::reflection_pad2d_backward_out_cpu(/* actuals */ grad_input, grad_output, self, padding);
        break;
        default:
            AT_ERROR("reflection_pad2d_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::reflection_pad2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::reflection_pad2d_backward_cpu(/* actuals */ grad_output, self, padding);
        break;
        default:
            AT_ERROR("reflection_pad2d_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::replication_pad1d_out(Tensor & out, const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::replication_pad1d_out_cpu(/* actuals */ out, self, padding);
        break;
        default:
            AT_ERROR("replication_pad1d_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::replication_pad1d(const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::replication_pad1d_cpu(/* actuals */ self, padding);
        break;
        default:
            AT_ERROR("replication_pad1d not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::replication_pad1d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::replication_pad1d_backward_out_cpu(/* actuals */ grad_input, grad_output, self, padding);
        break;
        default:
            AT_ERROR("replication_pad1d_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::replication_pad1d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::replication_pad1d_backward_cpu(/* actuals */ grad_output, self, padding);
        break;
        default:
            AT_ERROR("replication_pad1d_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::replication_pad2d_out(Tensor & out, const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::replication_pad2d_out_cpu(/* actuals */ out, self, padding);
        break;
        default:
            AT_ERROR("replication_pad2d_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::replication_pad2d(const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::replication_pad2d_cpu(/* actuals */ self, padding);
        break;
        default:
            AT_ERROR("replication_pad2d not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::replication_pad2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::replication_pad2d_backward_out_cpu(/* actuals */ grad_input, grad_output, self, padding);
        break;
        default:
            AT_ERROR("replication_pad2d_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::replication_pad2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::replication_pad2d_backward_cpu(/* actuals */ grad_output, self, padding);
        break;
        default:
            AT_ERROR("replication_pad2d_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::replication_pad3d_out(Tensor & out, const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::replication_pad3d_out_cpu(/* actuals */ out, self, padding);
        break;
        default:
            AT_ERROR("replication_pad3d_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::replication_pad3d(const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::replication_pad3d_cpu(/* actuals */ self, padding);
        break;
        default:
            AT_ERROR("replication_pad3d not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::replication_pad3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::replication_pad3d_backward_out_cpu(/* actuals */ grad_input, grad_output, self, padding);
        break;
        default:
            AT_ERROR("replication_pad3d_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::replication_pad3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::replication_pad3d_backward_cpu(/* actuals */ grad_output, self, padding);
        break;
        default:
            AT_ERROR("replication_pad3d_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::upsample_linear1d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::upsample_linear1d_out_cpu(/* actuals */ out, self, output_size, align_corners);
        break;
        default:
            AT_ERROR("upsample_linear1d_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::upsample_linear1d(const Tensor & self, IntArrayRef output_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::upsample_linear1d_cpu(/* actuals */ self, output_size, align_corners);
        break;
        default:
            AT_ERROR("upsample_linear1d not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::upsample_linear1d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    auto dispatch_scalar_type = infer_scalar_type(grad_input);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::upsample_linear1d_backward_out_cpu(/* actuals */ grad_input, grad_output, output_size, input_size, align_corners);
        break;
        default:
            AT_ERROR("upsample_linear1d_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::upsample_linear1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    auto dispatch_scalar_type = infer_scalar_type(grad_output);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::upsample_linear1d_backward_cpu(/* actuals */ grad_output, output_size, input_size, align_corners);
        break;
        default:
            AT_ERROR("upsample_linear1d_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::upsample_bilinear2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::upsample_bilinear2d_out_cpu(/* actuals */ out, self, output_size, align_corners);
        break;
        default:
            AT_ERROR("upsample_bilinear2d_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::upsample_bilinear2d(const Tensor & self, IntArrayRef output_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::upsample_bilinear2d_cpu(/* actuals */ self, output_size, align_corners);
        break;
        default:
            AT_ERROR("upsample_bilinear2d not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::upsample_bilinear2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    auto dispatch_scalar_type = infer_scalar_type(grad_input);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::upsample_bilinear2d_backward_out_cpu(/* actuals */ grad_input, grad_output, output_size, input_size, align_corners);
        break;
        default:
            AT_ERROR("upsample_bilinear2d_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::upsample_bilinear2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    auto dispatch_scalar_type = infer_scalar_type(grad_output);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::upsample_bilinear2d_backward_cpu(/* actuals */ grad_output, output_size, input_size, align_corners);
        break;
        default:
            AT_ERROR("upsample_bilinear2d_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::upsample_bicubic2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::upsample_bicubic2d_out_cpu(/* actuals */ out, self, output_size, align_corners);
        break;
        default:
            AT_ERROR("upsample_bicubic2d_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::upsample_bicubic2d(const Tensor & self, IntArrayRef output_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::upsample_bicubic2d_cpu(/* actuals */ self, output_size, align_corners);
        break;
        default:
            AT_ERROR("upsample_bicubic2d not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::upsample_bicubic2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    auto dispatch_scalar_type = infer_scalar_type(grad_input);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::upsample_bicubic2d_backward_out_cpu(/* actuals */ grad_input, grad_output, output_size, input_size, align_corners);
        break;
        default:
            AT_ERROR("upsample_bicubic2d_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::upsample_bicubic2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    auto dispatch_scalar_type = infer_scalar_type(grad_output);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::upsample_bicubic2d_backward_cpu(/* actuals */ grad_output, output_size, input_size, align_corners);
        break;
        default:
            AT_ERROR("upsample_bicubic2d_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::upsample_trilinear3d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::upsample_trilinear3d_out_cpu(/* actuals */ out, self, output_size, align_corners);
        break;
        default:
            AT_ERROR("upsample_trilinear3d_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::upsample_trilinear3d(const Tensor & self, IntArrayRef output_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::upsample_trilinear3d_cpu(/* actuals */ self, output_size, align_corners);
        break;
        default:
            AT_ERROR("upsample_trilinear3d not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::upsample_trilinear3d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    auto dispatch_scalar_type = infer_scalar_type(grad_input);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::upsample_trilinear3d_backward_out_cpu(/* actuals */ grad_input, grad_output, output_size, input_size, align_corners);
        break;
        default:
            AT_ERROR("upsample_trilinear3d_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::upsample_trilinear3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    auto dispatch_scalar_type = infer_scalar_type(grad_output);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::upsample_trilinear3d_backward_cpu(/* actuals */ grad_output, output_size, input_size, align_corners);
        break;
        default:
            AT_ERROR("upsample_trilinear3d_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::upsample_nearest1d_out(Tensor & out, const Tensor & self, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::upsample_nearest1d_out_cpu(/* actuals */ out, self, output_size);
        break;
        default:
            AT_ERROR("upsample_nearest1d_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::upsample_nearest1d(const Tensor & self, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::upsample_nearest1d_cpu(/* actuals */ self, output_size);
        break;
        default:
            AT_ERROR("upsample_nearest1d not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::upsample_nearest1d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) const {
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    auto dispatch_scalar_type = infer_scalar_type(grad_input);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::upsample_nearest1d_backward_out_cpu(/* actuals */ grad_input, grad_output, output_size, input_size);
        break;
        default:
            AT_ERROR("upsample_nearest1d_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::upsample_nearest1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    auto dispatch_scalar_type = infer_scalar_type(grad_output);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::upsample_nearest1d_backward_cpu(/* actuals */ grad_output, output_size, input_size);
        break;
        default:
            AT_ERROR("upsample_nearest1d_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::upsample_nearest2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::upsample_nearest2d_out_cpu(/* actuals */ out, self, output_size);
        break;
        default:
            AT_ERROR("upsample_nearest2d_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::upsample_nearest2d(const Tensor & self, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::upsample_nearest2d_cpu(/* actuals */ self, output_size);
        break;
        default:
            AT_ERROR("upsample_nearest2d not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::upsample_nearest2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) const {
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    auto dispatch_scalar_type = infer_scalar_type(grad_input);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::upsample_nearest2d_backward_out_cpu(/* actuals */ grad_input, grad_output, output_size, input_size);
        break;
        default:
            AT_ERROR("upsample_nearest2d_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::upsample_nearest2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    auto dispatch_scalar_type = infer_scalar_type(grad_output);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::upsample_nearest2d_backward_cpu(/* actuals */ grad_output, output_size, input_size);
        break;
        default:
            AT_ERROR("upsample_nearest2d_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::upsample_nearest3d_out(Tensor & out, const Tensor & self, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::upsample_nearest3d_out_cpu(/* actuals */ out, self, output_size);
        break;
        default:
            AT_ERROR("upsample_nearest3d_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::upsample_nearest3d(const Tensor & self, IntArrayRef output_size) const {
    const OptionalDeviceGuard device_guard(device_of(self));
    auto dispatch_scalar_type = infer_scalar_type(self);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::upsample_nearest3d_cpu(/* actuals */ self, output_size);
        break;
        default:
            AT_ERROR("upsample_nearest3d not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor & CPUType::upsample_nearest3d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) const {
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    auto dispatch_scalar_type = infer_scalar_type(grad_input);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::upsample_nearest3d_backward_out_cpu(/* actuals */ grad_input, grad_output, output_size, input_size);
        break;
        default:
            AT_ERROR("upsample_nearest3d_backward_out not supported on CPUType for ", dispatch_scalar_type);
    }
}
Tensor CPUType::upsample_nearest3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) const {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    auto dispatch_scalar_type = infer_scalar_type(grad_output);
    switch (dispatch_scalar_type) {
        case ScalarType::Byte:
        case ScalarType::Char:
        case ScalarType::Double:
        case ScalarType::Float:
        case ScalarType::Int:
        case ScalarType::Long:
        case ScalarType::QInt8:
        case ScalarType::Short:
            return at::native::upsample_nearest3d_backward_cpu(/* actuals */ grad_output, output_size, input_size);
        break;
        default:
            AT_ERROR("upsample_nearest3d_backward not supported on CPUType for ", dispatch_scalar_type);
    }
}

}
