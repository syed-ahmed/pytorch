#include <ATen/RegisterCPU.h>

// @generated by aten/src/ATen/gen.py

#include <ATen/Type.h>
#include <ATen/Context.h>
#include <ATen/UndefinedType.h>
#include <ATen/core/VariableHooksInterface.h>

#include "ATen/CPUBoolType.h"
#include "ATen/CPUByteType.h"
#include "ATen/CPUCharType.h"
#include "ATen/CPUDoubleType.h"
#include "ATen/CPUFloatType.h"
#include "ATen/CPUIntType.h"
#include "ATen/CPULongType.h"
#include "ATen/CPUShortType.h"
#include "ATen/CPUHalfType.h"
#include "ATen/SparseCPUBoolType.h"
#include "ATen/SparseCPUByteType.h"
#include "ATen/SparseCPUCharType.h"
#include "ATen/SparseCPUDoubleType.h"
#include "ATen/SparseCPUFloatType.h"
#include "ATen/SparseCPUIntType.h"
#include "ATen/SparseCPULongType.h"
#include "ATen/SparseCPUShortType.h"
#include "ATen/MSNPUBoolType.h"
#include "ATen/MSNPUByteType.h"
#include "ATen/MSNPUCharType.h"
#include "ATen/MSNPUDoubleType.h"
#include "ATen/MSNPUFloatType.h"
#include "ATen/MSNPUIntType.h"
#include "ATen/MSNPULongType.h"
#include "ATen/MSNPUShortType.h"
#include "ATen/MSNPUHalfType.h"
#include "ATen/XLABoolType.h"
#include "ATen/XLAByteType.h"
#include "ATen/XLACharType.h"
#include "ATen/XLADoubleType.h"
#include "ATen/XLAFloatType.h"
#include "ATen/XLAIntType.h"
#include "ATen/XLALongType.h"
#include "ATen/XLAShortType.h"
#include "ATen/XLAHalfType.h"

namespace at {

void register_cpu_types(Context * context) {
  context->registerType(Backend::CPU, ScalarType::Bool, new CPUBoolType());
  context->registerType(Backend::CPU, ScalarType::Byte, new CPUByteType());
  context->registerType(Backend::CPU, ScalarType::Char, new CPUCharType());
  context->registerType(Backend::CPU, ScalarType::Double, new CPUDoubleType());
  context->registerType(Backend::CPU, ScalarType::Float, new CPUFloatType());
  context->registerType(Backend::CPU, ScalarType::Int, new CPUIntType());
  context->registerType(Backend::CPU, ScalarType::Long, new CPULongType());
  context->registerType(Backend::CPU, ScalarType::Short, new CPUShortType());
  context->registerType(Backend::CPU, ScalarType::Half, new CPUHalfType());
  context->registerType(Backend::SparseCPU, ScalarType::Bool, new SparseCPUBoolType());
  context->registerType(Backend::SparseCPU, ScalarType::Byte, new SparseCPUByteType());
  context->registerType(Backend::SparseCPU, ScalarType::Char, new SparseCPUCharType());
  context->registerType(Backend::SparseCPU, ScalarType::Double, new SparseCPUDoubleType());
  context->registerType(Backend::SparseCPU, ScalarType::Float, new SparseCPUFloatType());
  context->registerType(Backend::SparseCPU, ScalarType::Int, new SparseCPUIntType());
  context->registerType(Backend::SparseCPU, ScalarType::Long, new SparseCPULongType());
  context->registerType(Backend::SparseCPU, ScalarType::Short, new SparseCPUShortType());
  context->registerType(Backend::MSNPU, ScalarType::Bool, new MSNPUBoolType());
  context->registerType(Backend::MSNPU, ScalarType::Byte, new MSNPUByteType());
  context->registerType(Backend::MSNPU, ScalarType::Char, new MSNPUCharType());
  context->registerType(Backend::MSNPU, ScalarType::Double, new MSNPUDoubleType());
  context->registerType(Backend::MSNPU, ScalarType::Float, new MSNPUFloatType());
  context->registerType(Backend::MSNPU, ScalarType::Int, new MSNPUIntType());
  context->registerType(Backend::MSNPU, ScalarType::Long, new MSNPULongType());
  context->registerType(Backend::MSNPU, ScalarType::Short, new MSNPUShortType());
  context->registerType(Backend::MSNPU, ScalarType::Half, new MSNPUHalfType());
  context->registerType(Backend::XLA, ScalarType::Bool, new XLABoolType());
  context->registerType(Backend::XLA, ScalarType::Byte, new XLAByteType());
  context->registerType(Backend::XLA, ScalarType::Char, new XLACharType());
  context->registerType(Backend::XLA, ScalarType::Double, new XLADoubleType());
  context->registerType(Backend::XLA, ScalarType::Float, new XLAFloatType());
  context->registerType(Backend::XLA, ScalarType::Int, new XLAIntType());
  context->registerType(Backend::XLA, ScalarType::Long, new XLALongType());
  context->registerType(Backend::XLA, ScalarType::Short, new XLAShortType());
  context->registerType(Backend::XLA, ScalarType::Half, new XLAHalfType());
  context->registerType(Backend::Undefined, ScalarType::Undefined, new UndefinedType());
}

} // namespace at
