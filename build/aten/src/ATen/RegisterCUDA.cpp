#include <ATen/RegisterCUDA.h>

// @generated by aten/src/ATen/gen.py

#include <ATen/Type.h>
#include <ATen/Context.h>
#include <ATen/core/VariableHooksInterface.h>

#include "ATen/CUDABoolType.h"
#include "ATen/CUDAByteType.h"
#include "ATen/CUDACharType.h"
#include "ATen/CUDADoubleType.h"
#include "ATen/CUDAFloatType.h"
#include "ATen/CUDAIntType.h"
#include "ATen/CUDALongType.h"
#include "ATen/CUDAShortType.h"
#include "ATen/CUDAHalfType.h"
#include "ATen/SparseCUDABoolType.h"
#include "ATen/SparseCUDAByteType.h"
#include "ATen/SparseCUDACharType.h"
#include "ATen/SparseCUDADoubleType.h"
#include "ATen/SparseCUDAFloatType.h"
#include "ATen/SparseCUDAIntType.h"
#include "ATen/SparseCUDALongType.h"
#include "ATen/SparseCUDAShortType.h"

namespace at {

void register_cuda_types(Context * context) {
  context->registerType(Backend::CUDA, ScalarType::Bool, new CUDABoolType());
  context->registerType(Backend::CUDA, ScalarType::Byte, new CUDAByteType());
  context->registerType(Backend::CUDA, ScalarType::Char, new CUDACharType());
  context->registerType(Backend::CUDA, ScalarType::Double, new CUDADoubleType());
  context->registerType(Backend::CUDA, ScalarType::Float, new CUDAFloatType());
  context->registerType(Backend::CUDA, ScalarType::Int, new CUDAIntType());
  context->registerType(Backend::CUDA, ScalarType::Long, new CUDALongType());
  context->registerType(Backend::CUDA, ScalarType::Short, new CUDAShortType());
  context->registerType(Backend::CUDA, ScalarType::Half, new CUDAHalfType());
  context->registerType(Backend::SparseCUDA, ScalarType::Bool, new SparseCUDABoolType());
  context->registerType(Backend::SparseCUDA, ScalarType::Byte, new SparseCUDAByteType());
  context->registerType(Backend::SparseCUDA, ScalarType::Char, new SparseCUDACharType());
  context->registerType(Backend::SparseCUDA, ScalarType::Double, new SparseCUDADoubleType());
  context->registerType(Backend::SparseCUDA, ScalarType::Float, new SparseCUDAFloatType());
  context->registerType(Backend::SparseCUDA, ScalarType::Int, new SparseCUDAIntType());
  context->registerType(Backend::SparseCUDA, ScalarType::Long, new SparseCUDALongType());
  context->registerType(Backend::SparseCUDA, ScalarType::Short, new SparseCUDAShortType());
}

} // namespace at
